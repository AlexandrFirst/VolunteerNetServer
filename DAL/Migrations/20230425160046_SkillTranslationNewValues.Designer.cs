// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(VolunteerNetServerDBContext))]
    [Migration("20230425160046_SkillTranslationNewValues")]
    partial class SkillTranslationNewValues
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<int>("RequiredNumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("669732a5-7b4a-4b53-b3d7-dd4b442bd826"),
                            CountryId = new Guid("7c4b94f6-4a76-40e8-a388-ff9a66691e9a"),
                            ISO = "vi"
                        },
                        new
                        {
                            Id = new Guid("6f57b409-8f0a-4e5c-93bc-b45adeba5875"),
                            CountryId = new Guid("7c4b94f6-4a76-40e8-a388-ff9a66691e9a"),
                            ISO = "dn"
                        },
                        new
                        {
                            Id = new Guid("731852ca-b28f-44a5-a651-665aaa4a430b"),
                            CountryId = new Guid("7c4b94f6-4a76-40e8-a388-ff9a66691e9a"),
                            ISO = "zhy"
                        },
                        new
                        {
                            Id = new Guid("f5621ad1-99b5-45db-bb8e-e0d98848eb2f"),
                            CountryId = new Guid("7c4b94f6-4a76-40e8-a388-ff9a66691e9a"),
                            ISO = "zp"
                        },
                        new
                        {
                            Id = new Guid("ed77f4dd-1d68-4d62-9a72-0f04fd9a68db"),
                            CountryId = new Guid("7c4b94f6-4a76-40e8-a388-ff9a66691e9a"),
                            ISO = "if"
                        },
                        new
                        {
                            Id = new Guid("7710f326-4663-4f79-b514-9a3c299ef29d"),
                            CountryId = new Guid("7c4b94f6-4a76-40e8-a388-ff9a66691e9a"),
                            ISO = "ky"
                        },
                        new
                        {
                            Id = new Guid("25d5501e-64a2-4548-831e-e7ccd597b11c"),
                            CountryId = new Guid("7c4b94f6-4a76-40e8-a388-ff9a66691e9a"),
                            ISO = "kr"
                        },
                        new
                        {
                            Id = new Guid("179acb92-de53-46ac-bb54-f06136097dc3"),
                            CountryId = new Guid("7c4b94f6-4a76-40e8-a388-ff9a66691e9a"),
                            ISO = "lut"
                        },
                        new
                        {
                            Id = new Guid("814ce336-752b-45c8-a2be-b7ead4bae6ed"),
                            CountryId = new Guid("7c4b94f6-4a76-40e8-a388-ff9a66691e9a"),
                            ISO = "lv"
                        },
                        new
                        {
                            Id = new Guid("ecd00690-cd36-42f6-82ed-18e587ea2263"),
                            CountryId = new Guid("7c4b94f6-4a76-40e8-a388-ff9a66691e9a"),
                            ISO = "my"
                        },
                        new
                        {
                            Id = new Guid("8af81c19-5278-4cf0-bfd4-3818723b74a4"),
                            CountryId = new Guid("7c4b94f6-4a76-40e8-a388-ff9a66691e9a"),
                            ISO = "od"
                        },
                        new
                        {
                            Id = new Guid("e628918e-15f3-431a-9fe7-21b67d625bbb"),
                            CountryId = new Guid("7c4b94f6-4a76-40e8-a388-ff9a66691e9a"),
                            ISO = "pol"
                        },
                        new
                        {
                            Id = new Guid("647abd59-7d36-48f5-8025-157e1ea6c4e5"),
                            CountryId = new Guid("7c4b94f6-4a76-40e8-a388-ff9a66691e9a"),
                            ISO = "ri"
                        },
                        new
                        {
                            Id = new Guid("6b9d241a-f7b8-4123-9695-a85541a74d59"),
                            CountryId = new Guid("7c4b94f6-4a76-40e8-a388-ff9a66691e9a"),
                            ISO = "su"
                        },
                        new
                        {
                            Id = new Guid("2b40ba8c-6eef-486d-b867-9e4968e7b978"),
                            CountryId = new Guid("7c4b94f6-4a76-40e8-a388-ff9a66691e9a"),
                            ISO = "ter"
                        },
                        new
                        {
                            Id = new Guid("5a24e32d-e549-4b84-813c-890011aee4f3"),
                            CountryId = new Guid("7c4b94f6-4a76-40e8-a388-ff9a66691e9a"),
                            ISO = "uzh"
                        },
                        new
                        {
                            Id = new Guid("41886934-1eb6-464b-942a-2b87274b0db7"),
                            CountryId = new Guid("7c4b94f6-4a76-40e8-a388-ff9a66691e9a"),
                            ISO = "khar"
                        },
                        new
                        {
                            Id = new Guid("db5c9b5d-1e8c-41ff-bdd1-1e3bfd8f91ef"),
                            CountryId = new Guid("7c4b94f6-4a76-40e8-a388-ff9a66691e9a"),
                            ISO = "kher"
                        },
                        new
                        {
                            Id = new Guid("4acf1f31-457b-46a4-b963-d323c6b8f398"),
                            CountryId = new Guid("7c4b94f6-4a76-40e8-a388-ff9a66691e9a"),
                            ISO = "khm"
                        },
                        new
                        {
                            Id = new Guid("6bc53e1a-6325-4d3d-8091-c4d913955695"),
                            CountryId = new Guid("7c4b94f6-4a76-40e8-a388-ff9a66691e9a"),
                            ISO = "chk"
                        },
                        new
                        {
                            Id = new Guid("9fbc278f-0a5b-4c81-a0fe-4263d73c058d"),
                            CountryId = new Guid("7c4b94f6-4a76-40e8-a388-ff9a66691e9a"),
                            ISO = "chv"
                        },
                        new
                        {
                            Id = new Guid("48d986b4-57bd-4eaf-92c6-f17bfbd0b401"),
                            CountryId = new Guid("7c4b94f6-4a76-40e8-a388-ff9a66691e9a"),
                            ISO = "chh"
                        },
                        new
                        {
                            Id = new Guid("6cfda45b-7e5c-4058-a18f-4999b8e4362e"),
                            CountryId = new Guid("e3b7503c-cf56-4001-974d-5d11bb20ec55"),
                            ISO = "var"
                        },
                        new
                        {
                            Id = new Guid("ce51b8a0-946a-4db6-ba1d-c777deebf8f8"),
                            CountryId = new Guid("e3b7503c-cf56-4001-974d-5d11bb20ec55"),
                            ISO = "lub"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("CityTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c4197988-ffd5-443e-9d7c-0b0a390c2a2e"),
                            CityId = new Guid("669732a5-7b4a-4b53-b3d7-dd4b442bd826"),
                            Language = "uk",
                            Name = "Вінниця"
                        },
                        new
                        {
                            Id = new Guid("09509056-6024-4b1b-b4f1-6893f1704f11"),
                            CityId = new Guid("6f57b409-8f0a-4e5c-93bc-b45adeba5875"),
                            Language = "uk",
                            Name = "Дніпро"
                        },
                        new
                        {
                            Id = new Guid("b8ab884d-617f-42b3-b295-c1aab3298085"),
                            CityId = new Guid("731852ca-b28f-44a5-a651-665aaa4a430b"),
                            Language = "uk",
                            Name = "Житомир"
                        },
                        new
                        {
                            Id = new Guid("46a6de0e-65b4-4311-97fd-6df37688bcb1"),
                            CityId = new Guid("f5621ad1-99b5-45db-bb8e-e0d98848eb2f"),
                            Language = "uk",
                            Name = "Запоріжжя"
                        },
                        new
                        {
                            Id = new Guid("9ed4e3b1-451d-4034-89a1-b0a07efa852b"),
                            CityId = new Guid("ed77f4dd-1d68-4d62-9a72-0f04fd9a68db"),
                            Language = "uk",
                            Name = "Івано-Франківськ"
                        },
                        new
                        {
                            Id = new Guid("797991c5-8347-47ab-99a1-971238a9dbcf"),
                            CityId = new Guid("7710f326-4663-4f79-b514-9a3c299ef29d"),
                            Language = "uk",
                            Name = "Київ"
                        },
                        new
                        {
                            Id = new Guid("6afd0f73-173d-489a-a23f-8b8536931ade"),
                            CityId = new Guid("25d5501e-64a2-4548-831e-e7ccd597b11c"),
                            Language = "uk",
                            Name = "Кропивницький"
                        },
                        new
                        {
                            Id = new Guid("9057a83b-61ce-4a95-a8a7-a28caa9f1686"),
                            CityId = new Guid("179acb92-de53-46ac-bb54-f06136097dc3"),
                            Language = "uk",
                            Name = "Луцьк"
                        },
                        new
                        {
                            Id = new Guid("2ce0bbbe-9e88-46fd-891b-0a742a8c7084"),
                            CityId = new Guid("814ce336-752b-45c8-a2be-b7ead4bae6ed"),
                            Language = "uk",
                            Name = "Львів"
                        },
                        new
                        {
                            Id = new Guid("4052c142-e3c1-42c0-acc8-05ccebd693f5"),
                            CityId = new Guid("ecd00690-cd36-42f6-82ed-18e587ea2263"),
                            Language = "uk",
                            Name = "Миколаїв"
                        },
                        new
                        {
                            Id = new Guid("0a0ff14d-3f47-452e-a9eb-cd86162fa623"),
                            CityId = new Guid("8af81c19-5278-4cf0-bfd4-3818723b74a4"),
                            Language = "uk",
                            Name = "Одеса"
                        },
                        new
                        {
                            Id = new Guid("38776dad-926a-4383-afa1-9fc345dd2031"),
                            CityId = new Guid("e628918e-15f3-431a-9fe7-21b67d625bbb"),
                            Language = "uk",
                            Name = "Полтава"
                        },
                        new
                        {
                            Id = new Guid("898abc5b-4ded-40e4-8c38-a3e9295f7b64"),
                            CityId = new Guid("647abd59-7d36-48f5-8025-157e1ea6c4e5"),
                            Language = "uk",
                            Name = "Рівне"
                        },
                        new
                        {
                            Id = new Guid("bf1ec472-8ece-4a8c-87e1-8252c4fc5d57"),
                            CityId = new Guid("6b9d241a-f7b8-4123-9695-a85541a74d59"),
                            Language = "uk",
                            Name = "Суми"
                        },
                        new
                        {
                            Id = new Guid("68e80005-6dd0-4606-ba69-7f711e569f9e"),
                            CityId = new Guid("2b40ba8c-6eef-486d-b867-9e4968e7b978"),
                            Language = "uk",
                            Name = "Тернопіль"
                        },
                        new
                        {
                            Id = new Guid("23b0ccb2-f3f3-404e-b0a5-b7a410840972"),
                            CityId = new Guid("5a24e32d-e549-4b84-813c-890011aee4f3"),
                            Language = "uk",
                            Name = "Ужгород"
                        },
                        new
                        {
                            Id = new Guid("a6d11a2e-0f68-47de-abcb-bbc70d92f0df"),
                            CityId = new Guid("41886934-1eb6-464b-942a-2b87274b0db7"),
                            Language = "uk",
                            Name = "Харків"
                        },
                        new
                        {
                            Id = new Guid("821d3b19-b0f2-4770-8ce9-6b1945f9e320"),
                            CityId = new Guid("db5c9b5d-1e8c-41ff-bdd1-1e3bfd8f91ef"),
                            Language = "uk",
                            Name = "Херсон"
                        },
                        new
                        {
                            Id = new Guid("70820541-b6d5-4539-978a-84470e5f0ed6"),
                            CityId = new Guid("4acf1f31-457b-46a4-b963-d323c6b8f398"),
                            Language = "uk",
                            Name = "Хмельницький"
                        },
                        new
                        {
                            Id = new Guid("425c766e-a213-46c1-9ab9-270131b79695"),
                            CityId = new Guid("6bc53e1a-6325-4d3d-8091-c4d913955695"),
                            Language = "uk",
                            Name = "Черкаси"
                        },
                        new
                        {
                            Id = new Guid("bfe50ef8-f2a9-43a8-a16a-0b4879961a40"),
                            CityId = new Guid("9fbc278f-0a5b-4c81-a0fe-4263d73c058d"),
                            Language = "uk",
                            Name = "Чернівці"
                        },
                        new
                        {
                            Id = new Guid("62ea0f1e-c87d-4dcc-96a5-8400f2209dc0"),
                            CityId = new Guid("48d986b4-57bd-4eaf-92c6-f17bfbd0b401"),
                            Language = "uk",
                            Name = "Чернігів"
                        },
                        new
                        {
                            Id = new Guid("26014848-0d6c-400b-8217-9e35859cd0e5"),
                            CityId = new Guid("669732a5-7b4a-4b53-b3d7-dd4b442bd826"),
                            Language = "en",
                            Name = "Vinnytsia"
                        },
                        new
                        {
                            Id = new Guid("da31db19-9c47-4094-b659-7095af5e7486"),
                            CityId = new Guid("6f57b409-8f0a-4e5c-93bc-b45adeba5875"),
                            Language = "en",
                            Name = "Dnipro"
                        },
                        new
                        {
                            Id = new Guid("d3803939-050a-4ad5-b364-276edf4d7d2b"),
                            CityId = new Guid("731852ca-b28f-44a5-a651-665aaa4a430b"),
                            Language = "en",
                            Name = "Zhytomyr"
                        },
                        new
                        {
                            Id = new Guid("be6d70e7-66ca-462f-8932-19ba366d3595"),
                            CityId = new Guid("f5621ad1-99b5-45db-bb8e-e0d98848eb2f"),
                            Language = "en",
                            Name = "Zaporizhzhia"
                        },
                        new
                        {
                            Id = new Guid("6c5ce72a-be87-4358-9beb-ff1730fb8563"),
                            CityId = new Guid("ed77f4dd-1d68-4d62-9a72-0f04fd9a68db"),
                            Language = "en",
                            Name = "Ivano-Frankivsk"
                        },
                        new
                        {
                            Id = new Guid("65b3ba33-2096-42cb-a27a-b111a015dc1d"),
                            CityId = new Guid("7710f326-4663-4f79-b514-9a3c299ef29d"),
                            Language = "en",
                            Name = "Kyiv"
                        },
                        new
                        {
                            Id = new Guid("19320126-cdee-4449-803e-3f91ae168af4"),
                            CityId = new Guid("25d5501e-64a2-4548-831e-e7ccd597b11c"),
                            Language = "en",
                            Name = "Kropyvnytskyi"
                        },
                        new
                        {
                            Id = new Guid("9e596763-455b-403d-8dae-76cc3109b1e8"),
                            CityId = new Guid("179acb92-de53-46ac-bb54-f06136097dc3"),
                            Language = "en",
                            Name = "Lutsk"
                        },
                        new
                        {
                            Id = new Guid("f85d48f5-ff08-42f0-9927-d9921459bec5"),
                            CityId = new Guid("814ce336-752b-45c8-a2be-b7ead4bae6ed"),
                            Language = "en",
                            Name = "Lviv"
                        },
                        new
                        {
                            Id = new Guid("20079a17-0775-4755-9b92-153042443d56"),
                            CityId = new Guid("ecd00690-cd36-42f6-82ed-18e587ea2263"),
                            Language = "en",
                            Name = "Mykolaiv"
                        },
                        new
                        {
                            Id = new Guid("1058dcfb-4a37-41b6-bb60-53bafc23ee29"),
                            CityId = new Guid("8af81c19-5278-4cf0-bfd4-3818723b74a4"),
                            Language = "en",
                            Name = "Odesa"
                        },
                        new
                        {
                            Id = new Guid("12cde4cf-63a1-4470-b015-a8e6d78a3ff0"),
                            CityId = new Guid("e628918e-15f3-431a-9fe7-21b67d625bbb"),
                            Language = "en",
                            Name = "Poltava"
                        },
                        new
                        {
                            Id = new Guid("0522e944-8be7-498a-93bc-fb961fe14366"),
                            CityId = new Guid("647abd59-7d36-48f5-8025-157e1ea6c4e5"),
                            Language = "en",
                            Name = "Rivne"
                        },
                        new
                        {
                            Id = new Guid("1e11f7b7-3309-401b-9caa-fd413dcc600f"),
                            CityId = new Guid("6b9d241a-f7b8-4123-9695-a85541a74d59"),
                            Language = "en",
                            Name = "Sumy"
                        },
                        new
                        {
                            Id = new Guid("c8d5ec18-b5c9-4910-9953-7576d45a2fe6"),
                            CityId = new Guid("2b40ba8c-6eef-486d-b867-9e4968e7b978"),
                            Language = "en",
                            Name = "Ternopil"
                        },
                        new
                        {
                            Id = new Guid("61705936-8916-4de3-a3c1-927a50939f8e"),
                            CityId = new Guid("5a24e32d-e549-4b84-813c-890011aee4f3"),
                            Language = "en",
                            Name = "Uzhhorod"
                        },
                        new
                        {
                            Id = new Guid("ca1afab3-b653-4ab7-9c4f-5db00965c4df"),
                            CityId = new Guid("41886934-1eb6-464b-942a-2b87274b0db7"),
                            Language = "en",
                            Name = "Kharkiv"
                        },
                        new
                        {
                            Id = new Guid("1f54b0da-665c-4cfb-b71b-2cf90583a1c3"),
                            CityId = new Guid("db5c9b5d-1e8c-41ff-bdd1-1e3bfd8f91ef"),
                            Language = "en",
                            Name = "Kherson"
                        },
                        new
                        {
                            Id = new Guid("ae34e7d9-eb81-42e2-bf46-56496d3a52ce"),
                            CityId = new Guid("4acf1f31-457b-46a4-b963-d323c6b8f398"),
                            Language = "en",
                            Name = "Khmelnytskyi"
                        },
                        new
                        {
                            Id = new Guid("6979c174-a8fe-42c4-b28e-1879dcd568ee"),
                            CityId = new Guid("6bc53e1a-6325-4d3d-8091-c4d913955695"),
                            Language = "en",
                            Name = "Cherkasy"
                        },
                        new
                        {
                            Id = new Guid("5642325e-3ac0-4baa-ae2f-cdcde1b1cabc"),
                            CityId = new Guid("9fbc278f-0a5b-4c81-a0fe-4263d73c058d"),
                            Language = "en",
                            Name = "Chernivtsi"
                        },
                        new
                        {
                            Id = new Guid("b35595d4-6332-4beb-a2d3-bad0cb680eaf"),
                            CityId = new Guid("48d986b4-57bd-4eaf-92c6-f17bfbd0b401"),
                            Language = "en",
                            Name = "Chernihiv"
                        },
                        new
                        {
                            Id = new Guid("01609451-daf2-434e-a1fe-d3700fda3531"),
                            CityId = new Guid("6cfda45b-7e5c-4058-a18f-4999b8e4362e"),
                            Language = "uk",
                            Name = "Варшава"
                        },
                        new
                        {
                            Id = new Guid("3c7a1ea5-26f2-4225-b0f8-f3775ead25ef"),
                            CityId = new Guid("ce51b8a0-946a-4db6-ba1d-c777deebf8f8"),
                            Language = "uk",
                            Name = "Люблін"
                        },
                        new
                        {
                            Id = new Guid("b2fdb0a0-ed3b-4a90-bbe5-6b50aae8e027"),
                            CityId = new Guid("6cfda45b-7e5c-4058-a18f-4999b8e4362e"),
                            Language = "en",
                            Name = "Varshava"
                        },
                        new
                        {
                            Id = new Guid("3f19701b-1cf7-4ceb-9c25-782a223f8ebc"),
                            CityId = new Guid("ce51b8a0-946a-4db6-ba1d-c777deebf8f8"),
                            Language = "en",
                            Name = "Lublin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7c4b94f6-4a76-40e8-a388-ff9a66691e9a"),
                            ISO = "uk"
                        },
                        new
                        {
                            Id = new Guid("e3b7503c-cf56-4001-974d-5d11bb20ec55"),
                            ISO = "pl"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CountryTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1b587c3f-9465-489f-9c21-710387b9e96e"),
                            CountryId = new Guid("7c4b94f6-4a76-40e8-a388-ff9a66691e9a"),
                            Language = "en",
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("a6aaea8f-fd59-4308-8801-e1136a670eea"),
                            CountryId = new Guid("7c4b94f6-4a76-40e8-a388-ff9a66691e9a"),
                            Language = "uk",
                            Name = "Україна"
                        },
                        new
                        {
                            Id = new Guid("66251dc6-ce92-4f62-aaa8-7166936240ef"),
                            CountryId = new Guid("e3b7503c-cf56-4001-974d-5d11bb20ec55"),
                            Language = "en",
                            Name = "Poland"
                        },
                        new
                        {
                            Id = new Guid("f84806a9-3800-48a4-8645-401a2de0ae49"),
                            CountryId = new Guid("e3b7503c-cf56-4001-974d-5d11bb20ec55"),
                            Language = "uk",
                            Name = "Польша"
                        });
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ProfilePictures");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1acff851-c591-4d08-a906-bac1b1e851be"),
                            Title = "medicine"
                        },
                        new
                        {
                            Id = new Guid("a611db36-23bc-4750-9d8f-45548a869dec"),
                            Title = "cooking"
                        },
                        new
                        {
                            Id = new Guid("840fba25-38b4-4407-b060-f021cec14544"),
                            Title = "building"
                        },
                        new
                        {
                            Id = new Guid("b2a453a9-1cf4-43fc-8ed3-b03178a5eb9e"),
                            Title = "psychology"
                        });
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f001d405-3050-459d-8a62-60a923149c36"),
                            Language = "en",
                            Name = "medicine",
                            SkillId = new Guid("1acff851-c591-4d08-a906-bac1b1e851be")
                        },
                        new
                        {
                            Id = new Guid("3ba17eeb-2fb5-46ce-8ae5-254bcd237c55"),
                            Language = "uk",
                            Name = "медицина",
                            SkillId = new Guid("1acff851-c591-4d08-a906-bac1b1e851be")
                        },
                        new
                        {
                            Id = new Guid("fdec3384-ad0f-4fc1-8bcc-231275660487"),
                            Language = "en",
                            Name = "cooking",
                            SkillId = new Guid("a611db36-23bc-4750-9d8f-45548a869dec")
                        },
                        new
                        {
                            Id = new Guid("63a46497-6bb0-4a8d-a7ff-eeac03ac26ac"),
                            Language = "uk",
                            Name = "кулінарія",
                            SkillId = new Guid("a611db36-23bc-4750-9d8f-45548a869dec")
                        },
                        new
                        {
                            Id = new Guid("e8dd14a5-4ba1-4609-8913-ae23d74f8550"),
                            Language = "en",
                            Name = "building",
                            SkillId = new Guid("840fba25-38b4-4407-b060-f021cec14544")
                        },
                        new
                        {
                            Id = new Guid("7637c13b-ab6b-4c4c-a265-4bb5cf457ea1"),
                            Language = "uk",
                            Name = "будівництво",
                            SkillId = new Guid("840fba25-38b4-4407-b060-f021cec14544")
                        },
                        new
                        {
                            Id = new Guid("7506633f-ae60-4378-a9ec-a6610466a7a8"),
                            Language = "en",
                            Name = "psychology",
                            SkillId = new Guid("b2a453a9-1cf4-43fc-8ed3-b03178a5eb9e")
                        },
                        new
                        {
                            Id = new Guid("e992bb53-fca0-4fe0-93a9-44d60876de77"),
                            Language = "uk",
                            Name = "психологія",
                            SkillId = new Guid("b2a453a9-1cf4-43fc-8ed3-b03178a5eb9e")
                        });
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11ed553e-138f-4be7-82c1-ae7a234bd84c"),
                            CityId = new Guid("669732a5-7b4a-4b53-b3d7-dd4b442bd826"),
                            DateOfBirth = new DateTime(2023, 4, 25, 19, 0, 45, 671, DateTimeKind.Local).AddTicks(3189),
                            FirstName = "the first",
                            LastName = "admin",
                            Login = "ourfirstadmin",
                            Password = "Rk/ryiBNbnHx+s9i1IveCNNw4axYPQHm4T1eratfQlg=",
                            Phone = "+11111111111",
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Document")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DocumentFormat")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("NULL");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ApplicationId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("CityTranslations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("CountryTranslations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithOne("ProfilePicture")
                        .HasForeignKey("DAL.Entities.ProfilePicture", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("SkillTranslations")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Volunteers")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Volunteers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Navigation("CityTranslations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("CountryTranslations");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Navigation("SkillTranslations");

                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ProfilePicture");

                    b.Navigation("UserSkills");

                    b.Navigation("Volunteers");
                });
#pragma warning restore 612, 618
        }
    }
}
