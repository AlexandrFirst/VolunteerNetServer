// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(VolunteerNetServerDBContext))]
    [Migration("20230426172931_TestWithPrimaryKey2")]
    partial class TestWithPrimaryKey2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<int>("RequiredNumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f6806cb-14ca-4015-9153-fabc7403af20"),
                            CountryId = new Guid("c5fcb9d3-84bd-4d7f-aaf0-8b0bba190fae"),
                            ISO = "vi"
                        },
                        new
                        {
                            Id = new Guid("d85efbe5-617b-40b6-b63f-25ed141a39b3"),
                            CountryId = new Guid("c5fcb9d3-84bd-4d7f-aaf0-8b0bba190fae"),
                            ISO = "dn"
                        },
                        new
                        {
                            Id = new Guid("e74e3baf-d7e1-4906-a033-e8a3ce9f1afe"),
                            CountryId = new Guid("c5fcb9d3-84bd-4d7f-aaf0-8b0bba190fae"),
                            ISO = "zhy"
                        },
                        new
                        {
                            Id = new Guid("e00c67b6-8277-449a-8981-528d8d7c889a"),
                            CountryId = new Guid("c5fcb9d3-84bd-4d7f-aaf0-8b0bba190fae"),
                            ISO = "zp"
                        },
                        new
                        {
                            Id = new Guid("ef19f05d-5ba3-42fe-8e76-49d8822620a4"),
                            CountryId = new Guid("c5fcb9d3-84bd-4d7f-aaf0-8b0bba190fae"),
                            ISO = "if"
                        },
                        new
                        {
                            Id = new Guid("601df828-0c4a-41f4-90c0-19ef2f2d0294"),
                            CountryId = new Guid("c5fcb9d3-84bd-4d7f-aaf0-8b0bba190fae"),
                            ISO = "ky"
                        },
                        new
                        {
                            Id = new Guid("732f2a82-9586-4636-993f-53602ae1c593"),
                            CountryId = new Guid("c5fcb9d3-84bd-4d7f-aaf0-8b0bba190fae"),
                            ISO = "kr"
                        },
                        new
                        {
                            Id = new Guid("b4ad2ac7-25a6-41a5-9a1d-9e2cdef6df90"),
                            CountryId = new Guid("c5fcb9d3-84bd-4d7f-aaf0-8b0bba190fae"),
                            ISO = "lut"
                        },
                        new
                        {
                            Id = new Guid("23bcf60c-0cb1-449a-88d2-07149f4c7e9d"),
                            CountryId = new Guid("c5fcb9d3-84bd-4d7f-aaf0-8b0bba190fae"),
                            ISO = "lv"
                        },
                        new
                        {
                            Id = new Guid("1f7b74cc-2eb7-40bd-89fa-e81c64abea02"),
                            CountryId = new Guid("c5fcb9d3-84bd-4d7f-aaf0-8b0bba190fae"),
                            ISO = "my"
                        },
                        new
                        {
                            Id = new Guid("eae49efe-dde9-4a6b-9610-40303000eeb6"),
                            CountryId = new Guid("c5fcb9d3-84bd-4d7f-aaf0-8b0bba190fae"),
                            ISO = "od"
                        },
                        new
                        {
                            Id = new Guid("d31479e1-a729-4588-864a-f7b2e519397e"),
                            CountryId = new Guid("c5fcb9d3-84bd-4d7f-aaf0-8b0bba190fae"),
                            ISO = "pol"
                        },
                        new
                        {
                            Id = new Guid("e3befdc7-cba8-4ee0-86ff-6b0905b09261"),
                            CountryId = new Guid("c5fcb9d3-84bd-4d7f-aaf0-8b0bba190fae"),
                            ISO = "ri"
                        },
                        new
                        {
                            Id = new Guid("79bc5ce7-d04e-43c8-8abb-e75c71d99e63"),
                            CountryId = new Guid("c5fcb9d3-84bd-4d7f-aaf0-8b0bba190fae"),
                            ISO = "su"
                        },
                        new
                        {
                            Id = new Guid("31912a66-aee2-4bb6-aa96-79a0a1485f81"),
                            CountryId = new Guid("c5fcb9d3-84bd-4d7f-aaf0-8b0bba190fae"),
                            ISO = "ter"
                        },
                        new
                        {
                            Id = new Guid("f4e56e42-d3dd-462f-8761-9fd49b0e56ca"),
                            CountryId = new Guid("c5fcb9d3-84bd-4d7f-aaf0-8b0bba190fae"),
                            ISO = "uzh"
                        },
                        new
                        {
                            Id = new Guid("d074300e-717c-42b6-b6ea-b3b8effc1886"),
                            CountryId = new Guid("c5fcb9d3-84bd-4d7f-aaf0-8b0bba190fae"),
                            ISO = "khar"
                        },
                        new
                        {
                            Id = new Guid("519b0bc0-abbf-4862-b1c3-ee7a071d0925"),
                            CountryId = new Guid("c5fcb9d3-84bd-4d7f-aaf0-8b0bba190fae"),
                            ISO = "kher"
                        },
                        new
                        {
                            Id = new Guid("ae6f77cb-a48f-4ac6-9f17-b93f33c1eb9c"),
                            CountryId = new Guid("c5fcb9d3-84bd-4d7f-aaf0-8b0bba190fae"),
                            ISO = "khm"
                        },
                        new
                        {
                            Id = new Guid("42650c61-4dc0-4585-b6a1-eebbb3fbaf65"),
                            CountryId = new Guid("c5fcb9d3-84bd-4d7f-aaf0-8b0bba190fae"),
                            ISO = "chk"
                        },
                        new
                        {
                            Id = new Guid("b79017fa-8d84-42b2-bc70-df92fc4d86c3"),
                            CountryId = new Guid("c5fcb9d3-84bd-4d7f-aaf0-8b0bba190fae"),
                            ISO = "chv"
                        },
                        new
                        {
                            Id = new Guid("6a833395-b9fa-4aa8-bed1-774d680b3e2c"),
                            CountryId = new Guid("c5fcb9d3-84bd-4d7f-aaf0-8b0bba190fae"),
                            ISO = "chh"
                        },
                        new
                        {
                            Id = new Guid("f4230483-49c1-4bd7-a30e-a3ec602da97a"),
                            CountryId = new Guid("e936a692-37e9-4c15-ac7c-88e691dab2db"),
                            ISO = "var"
                        },
                        new
                        {
                            Id = new Guid("3c9c90fc-79d8-4e3d-b307-0c224c942313"),
                            CountryId = new Guid("e936a692-37e9-4c15-ac7c-88e691dab2db"),
                            ISO = "lub"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("CityTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b942202b-29d8-4ff2-9a36-687c131a0d2c"),
                            CityId = new Guid("1f6806cb-14ca-4015-9153-fabc7403af20"),
                            Language = "uk",
                            Name = "Вінниця"
                        },
                        new
                        {
                            Id = new Guid("e76a1480-be06-44f2-bff5-7410f11462f4"),
                            CityId = new Guid("d85efbe5-617b-40b6-b63f-25ed141a39b3"),
                            Language = "uk",
                            Name = "Дніпро"
                        },
                        new
                        {
                            Id = new Guid("4a8dfda6-08c3-47c0-b562-0e0f66aea1b9"),
                            CityId = new Guid("e74e3baf-d7e1-4906-a033-e8a3ce9f1afe"),
                            Language = "uk",
                            Name = "Житомир"
                        },
                        new
                        {
                            Id = new Guid("423adc9f-002f-495c-8736-4c9aaf4372c3"),
                            CityId = new Guid("e00c67b6-8277-449a-8981-528d8d7c889a"),
                            Language = "uk",
                            Name = "Запоріжжя"
                        },
                        new
                        {
                            Id = new Guid("dcd1af96-a699-4705-bf70-c7dbef3ad2ef"),
                            CityId = new Guid("ef19f05d-5ba3-42fe-8e76-49d8822620a4"),
                            Language = "uk",
                            Name = "Івано-Франківськ"
                        },
                        new
                        {
                            Id = new Guid("4f68cad6-7310-4957-9736-84170d46c3a1"),
                            CityId = new Guid("601df828-0c4a-41f4-90c0-19ef2f2d0294"),
                            Language = "uk",
                            Name = "Київ"
                        },
                        new
                        {
                            Id = new Guid("dda28c4f-34d3-479e-a29a-35d96a317aa9"),
                            CityId = new Guid("732f2a82-9586-4636-993f-53602ae1c593"),
                            Language = "uk",
                            Name = "Кропивницький"
                        },
                        new
                        {
                            Id = new Guid("490a0d51-c657-4f17-91b7-eb922b801b39"),
                            CityId = new Guid("b4ad2ac7-25a6-41a5-9a1d-9e2cdef6df90"),
                            Language = "uk",
                            Name = "Луцьк"
                        },
                        new
                        {
                            Id = new Guid("859cfe6a-e79c-467f-899c-a80de60556bd"),
                            CityId = new Guid("23bcf60c-0cb1-449a-88d2-07149f4c7e9d"),
                            Language = "uk",
                            Name = "Львів"
                        },
                        new
                        {
                            Id = new Guid("a3834a59-b5f7-436e-8d3a-6e375da6a81a"),
                            CityId = new Guid("1f7b74cc-2eb7-40bd-89fa-e81c64abea02"),
                            Language = "uk",
                            Name = "Миколаїв"
                        },
                        new
                        {
                            Id = new Guid("90a3d6de-eac0-4860-947f-12778f5391eb"),
                            CityId = new Guid("eae49efe-dde9-4a6b-9610-40303000eeb6"),
                            Language = "uk",
                            Name = "Одеса"
                        },
                        new
                        {
                            Id = new Guid("3a236763-cfc2-4a34-9a1a-6bfd70a91311"),
                            CityId = new Guid("d31479e1-a729-4588-864a-f7b2e519397e"),
                            Language = "uk",
                            Name = "Полтава"
                        },
                        new
                        {
                            Id = new Guid("5bc9aac4-03a7-4acb-a620-e709d91d15d2"),
                            CityId = new Guid("e3befdc7-cba8-4ee0-86ff-6b0905b09261"),
                            Language = "uk",
                            Name = "Рівне"
                        },
                        new
                        {
                            Id = new Guid("06c35869-cfe1-47b6-9846-c9eaf74e34bf"),
                            CityId = new Guid("79bc5ce7-d04e-43c8-8abb-e75c71d99e63"),
                            Language = "uk",
                            Name = "Суми"
                        },
                        new
                        {
                            Id = new Guid("e459510d-f2ed-432a-9607-3190e400beda"),
                            CityId = new Guid("31912a66-aee2-4bb6-aa96-79a0a1485f81"),
                            Language = "uk",
                            Name = "Тернопіль"
                        },
                        new
                        {
                            Id = new Guid("dd6ab431-390f-4555-a4de-6733877b0b38"),
                            CityId = new Guid("f4e56e42-d3dd-462f-8761-9fd49b0e56ca"),
                            Language = "uk",
                            Name = "Ужгород"
                        },
                        new
                        {
                            Id = new Guid("86d87783-5c0e-4f00-8af4-dcc6f71eadce"),
                            CityId = new Guid("d074300e-717c-42b6-b6ea-b3b8effc1886"),
                            Language = "uk",
                            Name = "Харків"
                        },
                        new
                        {
                            Id = new Guid("a1a9b7e0-a80d-46f3-82db-ec4f1e3c1c8c"),
                            CityId = new Guid("519b0bc0-abbf-4862-b1c3-ee7a071d0925"),
                            Language = "uk",
                            Name = "Херсон"
                        },
                        new
                        {
                            Id = new Guid("c938ffc9-6923-4dd0-a1d8-fdae1dcadd61"),
                            CityId = new Guid("ae6f77cb-a48f-4ac6-9f17-b93f33c1eb9c"),
                            Language = "uk",
                            Name = "Хмельницький"
                        },
                        new
                        {
                            Id = new Guid("640fc38f-9d2b-4a79-a0a9-30453abef65a"),
                            CityId = new Guid("42650c61-4dc0-4585-b6a1-eebbb3fbaf65"),
                            Language = "uk",
                            Name = "Черкаси"
                        },
                        new
                        {
                            Id = new Guid("0b7551ea-34f1-48ef-9a50-bf54cc9a06d5"),
                            CityId = new Guid("b79017fa-8d84-42b2-bc70-df92fc4d86c3"),
                            Language = "uk",
                            Name = "Чернівці"
                        },
                        new
                        {
                            Id = new Guid("18e24ab8-7c2c-458a-9562-ba99a1ae2054"),
                            CityId = new Guid("6a833395-b9fa-4aa8-bed1-774d680b3e2c"),
                            Language = "uk",
                            Name = "Чернігів"
                        },
                        new
                        {
                            Id = new Guid("5e7fbe9d-9e4d-4f12-9b5b-28b759a8af6a"),
                            CityId = new Guid("1f6806cb-14ca-4015-9153-fabc7403af20"),
                            Language = "en",
                            Name = "Vinnytsia"
                        },
                        new
                        {
                            Id = new Guid("30c14ad9-5286-4fca-87d8-55ea0f3cfe82"),
                            CityId = new Guid("d85efbe5-617b-40b6-b63f-25ed141a39b3"),
                            Language = "en",
                            Name = "Dnipro"
                        },
                        new
                        {
                            Id = new Guid("e0027ed9-064b-4cf6-bd71-c007c114d181"),
                            CityId = new Guid("e74e3baf-d7e1-4906-a033-e8a3ce9f1afe"),
                            Language = "en",
                            Name = "Zhytomyr"
                        },
                        new
                        {
                            Id = new Guid("a27a2c50-3c75-4fd4-aa09-5112aff23dc2"),
                            CityId = new Guid("e00c67b6-8277-449a-8981-528d8d7c889a"),
                            Language = "en",
                            Name = "Zaporizhzhia"
                        },
                        new
                        {
                            Id = new Guid("b0f43b42-9fab-4e24-b3d1-7207048d803e"),
                            CityId = new Guid("ef19f05d-5ba3-42fe-8e76-49d8822620a4"),
                            Language = "en",
                            Name = "Ivano-Frankivsk"
                        },
                        new
                        {
                            Id = new Guid("14e945fa-3e6e-4f1c-a235-c2cca7864e71"),
                            CityId = new Guid("601df828-0c4a-41f4-90c0-19ef2f2d0294"),
                            Language = "en",
                            Name = "Kyiv"
                        },
                        new
                        {
                            Id = new Guid("59d7451a-6cc8-45c5-8dd0-ee01172b500e"),
                            CityId = new Guid("732f2a82-9586-4636-993f-53602ae1c593"),
                            Language = "en",
                            Name = "Kropyvnytskyi"
                        },
                        new
                        {
                            Id = new Guid("2864e389-cfbe-4571-b0ca-fbb70db7ca06"),
                            CityId = new Guid("b4ad2ac7-25a6-41a5-9a1d-9e2cdef6df90"),
                            Language = "en",
                            Name = "Lutsk"
                        },
                        new
                        {
                            Id = new Guid("35cd518d-610f-478d-a900-3e563044ef12"),
                            CityId = new Guid("23bcf60c-0cb1-449a-88d2-07149f4c7e9d"),
                            Language = "en",
                            Name = "Lviv"
                        },
                        new
                        {
                            Id = new Guid("77fe961a-a707-46bd-8c0f-1b002ea41e13"),
                            CityId = new Guid("1f7b74cc-2eb7-40bd-89fa-e81c64abea02"),
                            Language = "en",
                            Name = "Mykolaiv"
                        },
                        new
                        {
                            Id = new Guid("c0969ec0-6286-4db8-9ba5-868bfa82d59f"),
                            CityId = new Guid("eae49efe-dde9-4a6b-9610-40303000eeb6"),
                            Language = "en",
                            Name = "Odesa"
                        },
                        new
                        {
                            Id = new Guid("ff1636da-39d4-4145-b984-16376ebfe304"),
                            CityId = new Guid("d31479e1-a729-4588-864a-f7b2e519397e"),
                            Language = "en",
                            Name = "Poltava"
                        },
                        new
                        {
                            Id = new Guid("80338a45-f2e4-4338-a1e5-52ba930c44a2"),
                            CityId = new Guid("e3befdc7-cba8-4ee0-86ff-6b0905b09261"),
                            Language = "en",
                            Name = "Rivne"
                        },
                        new
                        {
                            Id = new Guid("5b40a3d9-182b-4bf4-a694-166f28a0b193"),
                            CityId = new Guid("79bc5ce7-d04e-43c8-8abb-e75c71d99e63"),
                            Language = "en",
                            Name = "Sumy"
                        },
                        new
                        {
                            Id = new Guid("ebb663a7-bec3-4584-9f99-a031f59937b7"),
                            CityId = new Guid("31912a66-aee2-4bb6-aa96-79a0a1485f81"),
                            Language = "en",
                            Name = "Ternopil"
                        },
                        new
                        {
                            Id = new Guid("77567bd6-905d-45c6-b4dc-55d413132933"),
                            CityId = new Guid("f4e56e42-d3dd-462f-8761-9fd49b0e56ca"),
                            Language = "en",
                            Name = "Uzhhorod"
                        },
                        new
                        {
                            Id = new Guid("4db992a9-bb52-40d0-af1b-7d4bf27ba736"),
                            CityId = new Guid("d074300e-717c-42b6-b6ea-b3b8effc1886"),
                            Language = "en",
                            Name = "Kharkiv"
                        },
                        new
                        {
                            Id = new Guid("2ab2b3a2-bc59-48e5-b91e-8f271e4633a4"),
                            CityId = new Guid("519b0bc0-abbf-4862-b1c3-ee7a071d0925"),
                            Language = "en",
                            Name = "Kherson"
                        },
                        new
                        {
                            Id = new Guid("fb752b95-d89e-4fa5-8f00-060628583210"),
                            CityId = new Guid("ae6f77cb-a48f-4ac6-9f17-b93f33c1eb9c"),
                            Language = "en",
                            Name = "Khmelnytskyi"
                        },
                        new
                        {
                            Id = new Guid("e8424c06-d0af-4743-b84e-72eeb0623d21"),
                            CityId = new Guid("42650c61-4dc0-4585-b6a1-eebbb3fbaf65"),
                            Language = "en",
                            Name = "Cherkasy"
                        },
                        new
                        {
                            Id = new Guid("75ab3d80-79eb-40ae-b612-6c375c60a8d0"),
                            CityId = new Guid("b79017fa-8d84-42b2-bc70-df92fc4d86c3"),
                            Language = "en",
                            Name = "Chernivtsi"
                        },
                        new
                        {
                            Id = new Guid("e57c0576-64cb-4b5e-b852-85538dee3421"),
                            CityId = new Guid("6a833395-b9fa-4aa8-bed1-774d680b3e2c"),
                            Language = "en",
                            Name = "Chernihiv"
                        },
                        new
                        {
                            Id = new Guid("cb4cc408-a99d-44d7-966f-8056a5c407db"),
                            CityId = new Guid("f4230483-49c1-4bd7-a30e-a3ec602da97a"),
                            Language = "uk",
                            Name = "Варшава"
                        },
                        new
                        {
                            Id = new Guid("c2015edc-3b69-49f4-9872-43dba35efd03"),
                            CityId = new Guid("3c9c90fc-79d8-4e3d-b307-0c224c942313"),
                            Language = "uk",
                            Name = "Люблін"
                        },
                        new
                        {
                            Id = new Guid("488d7e8f-6536-4020-8517-a3d320f61136"),
                            CityId = new Guid("f4230483-49c1-4bd7-a30e-a3ec602da97a"),
                            Language = "en",
                            Name = "Varshava"
                        },
                        new
                        {
                            Id = new Guid("8f452fb8-c8c7-4de0-8d98-db5e0e336c30"),
                            CityId = new Guid("3c9c90fc-79d8-4e3d-b307-0c224c942313"),
                            Language = "en",
                            Name = "Lublin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c5fcb9d3-84bd-4d7f-aaf0-8b0bba190fae"),
                            ISO = "uk"
                        },
                        new
                        {
                            Id = new Guid("e936a692-37e9-4c15-ac7c-88e691dab2db"),
                            ISO = "pl"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CountryTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a36e64cc-00c7-4be8-8f7e-5fb96570cdc4"),
                            CountryId = new Guid("c5fcb9d3-84bd-4d7f-aaf0-8b0bba190fae"),
                            Language = "en",
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("6b15c0e4-1535-4a21-83b2-952db95592ef"),
                            CountryId = new Guid("c5fcb9d3-84bd-4d7f-aaf0-8b0bba190fae"),
                            Language = "uk",
                            Name = "Україна"
                        },
                        new
                        {
                            Id = new Guid("09915ccd-0742-4a46-83f6-8927e2d49eaf"),
                            CountryId = new Guid("e936a692-37e9-4c15-ac7c-88e691dab2db"),
                            Language = "en",
                            Name = "Poland"
                        },
                        new
                        {
                            Id = new Guid("8d1fffae-b2c6-4025-adb5-13ae031e086b"),
                            CountryId = new Guid("e936a692-37e9-4c15-ac7c-88e691dab2db"),
                            Language = "uk",
                            Name = "Польша"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VolunteerApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VolunteerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VolunteerUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VolunteerUserId", "VolunteerApplicationId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ProfilePictures");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e4883f00-0598-4bbf-a844-3ee31b652f82"),
                            Title = "medicine"
                        },
                        new
                        {
                            Id = new Guid("644ed009-6845-4870-9ead-db24f55be64c"),
                            Title = "cooking"
                        },
                        new
                        {
                            Id = new Guid("86cc2019-8713-4458-ab80-59ce72bcd82a"),
                            Title = "building"
                        },
                        new
                        {
                            Id = new Guid("abdcd250-4dce-457c-88bf-3eff855c1bc0"),
                            Title = "psychology"
                        });
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("353f4d67-1cd7-4191-98db-fa447f90d6be"),
                            Language = "en",
                            Name = "medicine",
                            SkillId = new Guid("e4883f00-0598-4bbf-a844-3ee31b652f82")
                        },
                        new
                        {
                            Id = new Guid("f6006a5e-a124-4b92-8c1d-9ca14fa86f3f"),
                            Language = "uk",
                            Name = "медицина",
                            SkillId = new Guid("e4883f00-0598-4bbf-a844-3ee31b652f82")
                        },
                        new
                        {
                            Id = new Guid("ff02115d-9396-41c3-829d-c56f61c2d499"),
                            Language = "en",
                            Name = "cooking",
                            SkillId = new Guid("644ed009-6845-4870-9ead-db24f55be64c")
                        },
                        new
                        {
                            Id = new Guid("9f5c07b2-ed5d-4523-bc40-5930e156a384"),
                            Language = "uk",
                            Name = "кулінарія",
                            SkillId = new Guid("644ed009-6845-4870-9ead-db24f55be64c")
                        },
                        new
                        {
                            Id = new Guid("78b2b4b2-ca0a-4672-9b19-ea4cbfcd192a"),
                            Language = "en",
                            Name = "building",
                            SkillId = new Guid("86cc2019-8713-4458-ab80-59ce72bcd82a")
                        },
                        new
                        {
                            Id = new Guid("fab887d7-a31f-4627-a1b6-050665bf6a2b"),
                            Language = "uk",
                            Name = "будівництво",
                            SkillId = new Guid("86cc2019-8713-4458-ab80-59ce72bcd82a")
                        },
                        new
                        {
                            Id = new Guid("4ea1609f-4cbf-41be-81d7-db2951d80f9e"),
                            Language = "en",
                            Name = "psychology",
                            SkillId = new Guid("abdcd250-4dce-457c-88bf-3eff855c1bc0")
                        },
                        new
                        {
                            Id = new Guid("54ce34e0-3d02-44e1-9dad-35180f6521dc"),
                            Language = "uk",
                            Name = "психологія",
                            SkillId = new Guid("abdcd250-4dce-457c-88bf-3eff855c1bc0")
                        });
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6e846a0c-e513-4edb-b7e3-1d34cc95c27f"),
                            CityId = new Guid("1f6806cb-14ca-4015-9153-fabc7403af20"),
                            DateOfBirth = new DateTime(2023, 4, 26, 20, 29, 18, 722, DateTimeKind.Local).AddTicks(1239),
                            FirstName = "the first",
                            LastName = "admin",
                            Login = "ourfirstadmin",
                            Password = "Rk/ryiBNbnHx+s9i1IveCNNw4axYPQHm4T1eratfQlg=",
                            Phone = "+11111111111",
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Document")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DocumentFormat")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("NULL");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("VolunteerApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VolunteerUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "ApplicationId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("VolunteerUserId", "VolunteerApplicationId");

                    b.ToTable("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("CityTranslations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("CountryTranslations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.HasOne("DAL.Entities.Volunteer", "Volunteer")
                        .WithMany()
                        .HasForeignKey("VolunteerUserId", "VolunteerApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithOne("ProfilePicture")
                        .HasForeignKey("DAL.Entities.ProfilePicture", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("SkillTranslations")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Volunteers")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Volunteers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Volunteer", null)
                        .WithMany("Volunteers")
                        .HasForeignKey("VolunteerUserId", "VolunteerApplicationId");

                    b.Navigation("Application");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Navigation("CityTranslations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("CountryTranslations");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Navigation("SkillTranslations");

                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ProfilePicture");

                    b.Navigation("UserSkills");

                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Navigation("Volunteers");
                });
#pragma warning restore 612, 618
        }
    }
}
