// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(VolunteerNetServerDBContext))]
    [Migration("20230523153726_VolunteerCreationDateTime2")]
    partial class VolunteerCreationDateTime2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("CurrentSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<string>("OwnerCardName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequiredNumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<decimal?>("RequiredSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationSkill", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("ApplicationSkills");
                });

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2b40a61b-7ef0-47e5-b9aa-e06d4058342f"),
                            Title = "health care"
                        },
                        new
                        {
                            Id = new Guid("b24333ed-1bdd-4776-a536-095adb9cc917"),
                            Title = "education"
                        },
                        new
                        {
                            Id = new Guid("c05f2b81-193d-4322-9160-605f0b431fb5"),
                            Title = "sports and physical culture"
                        },
                        new
                        {
                            Id = new Guid("945bc667-a3ce-4dd2-9819-fc2bf18eca15"),
                            Title = "culture and art"
                        },
                        new
                        {
                            Id = new Guid("5fb8ca90-0d87-4585-85aa-274ec3f2e2b3"),
                            Title = "social programs"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CategoryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DescriptionCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cb790de1-7132-4993-b699-8a45aa947682"),
                            CategoryId = new Guid("2b40a61b-7ef0-47e5-b9aa-e06d4058342f"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "health care"
                        },
                        new
                        {
                            Id = new Guid("54c4e2e1-b3c4-45de-96c1-fabea5f5d0a8"),
                            CategoryId = new Guid("2b40a61b-7ef0-47e5-b9aa-e06d4058342f"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "охорона здоров'я"
                        },
                        new
                        {
                            Id = new Guid("1435d9d1-ba77-49f0-9b51-8505be561874"),
                            CategoryId = new Guid("b24333ed-1bdd-4776-a536-095adb9cc917"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "education"
                        },
                        new
                        {
                            Id = new Guid("cd44c75d-bfaf-439e-9afe-49c027ff6258"),
                            CategoryId = new Guid("b24333ed-1bdd-4776-a536-095adb9cc917"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "освіта"
                        },
                        new
                        {
                            Id = new Guid("9f25cc3d-2d5a-45ef-8574-cacf58999799"),
                            CategoryId = new Guid("c05f2b81-193d-4322-9160-605f0b431fb5"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "sport and physical culture"
                        },
                        new
                        {
                            Id = new Guid("91246152-cbf6-4b16-aa16-e567934221cf"),
                            CategoryId = new Guid("c05f2b81-193d-4322-9160-605f0b431fb5"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "спорт та фізична культура"
                        },
                        new
                        {
                            Id = new Guid("d7a42436-d244-4852-8ae4-27b3c85d672e"),
                            CategoryId = new Guid("945bc667-a3ce-4dd2-9819-fc2bf18eca15"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "culture and art"
                        },
                        new
                        {
                            Id = new Guid("856a9360-00d6-458a-997a-962ded2fdec2"),
                            CategoryId = new Guid("945bc667-a3ce-4dd2-9819-fc2bf18eca15"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "культура та мистецтво"
                        },
                        new
                        {
                            Id = new Guid("b8d5a54b-40df-418d-9b03-b2dabf1ac56b"),
                            CategoryId = new Guid("5fb8ca90-0d87-4585-85aa-274ec3f2e2b3"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "social programs"
                        },
                        new
                        {
                            Id = new Guid("ea24dfe9-e060-4d2f-ac57-7895dddac7df"),
                            CategoryId = new Guid("5fb8ca90-0d87-4585-85aa-274ec3f2e2b3"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "соціальні програми"
                        });
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("79acd646-2c22-41b1-8b88-fa3ae18226bb"),
                            CountryId = new Guid("541a6ae3-1215-4e18-bb60-ab5c0bc8b3e6"),
                            ISO = "vi"
                        },
                        new
                        {
                            Id = new Guid("39c62d7a-37f8-465a-9b57-8118587d442a"),
                            CountryId = new Guid("541a6ae3-1215-4e18-bb60-ab5c0bc8b3e6"),
                            ISO = "dn"
                        },
                        new
                        {
                            Id = new Guid("bed4196e-eec9-4fb5-8447-d1766881330f"),
                            CountryId = new Guid("541a6ae3-1215-4e18-bb60-ab5c0bc8b3e6"),
                            ISO = "zhy"
                        },
                        new
                        {
                            Id = new Guid("0f578d1b-6eee-41a6-ab7a-e64012387e5d"),
                            CountryId = new Guid("541a6ae3-1215-4e18-bb60-ab5c0bc8b3e6"),
                            ISO = "zp"
                        },
                        new
                        {
                            Id = new Guid("2efef582-c619-4bff-bfd7-7b51ed88a370"),
                            CountryId = new Guid("541a6ae3-1215-4e18-bb60-ab5c0bc8b3e6"),
                            ISO = "if"
                        },
                        new
                        {
                            Id = new Guid("da5ed147-fba3-4017-a15d-979d1910b238"),
                            CountryId = new Guid("541a6ae3-1215-4e18-bb60-ab5c0bc8b3e6"),
                            ISO = "ky"
                        },
                        new
                        {
                            Id = new Guid("dbef6c59-cbdd-4358-a38f-40dfde3c5428"),
                            CountryId = new Guid("541a6ae3-1215-4e18-bb60-ab5c0bc8b3e6"),
                            ISO = "kr"
                        },
                        new
                        {
                            Id = new Guid("24fa1e5d-5d95-4e33-a7e2-38e95887dcb7"),
                            CountryId = new Guid("541a6ae3-1215-4e18-bb60-ab5c0bc8b3e6"),
                            ISO = "lut"
                        },
                        new
                        {
                            Id = new Guid("9ced12e4-48b9-4a64-8b4b-8098804b9c47"),
                            CountryId = new Guid("541a6ae3-1215-4e18-bb60-ab5c0bc8b3e6"),
                            ISO = "lv"
                        },
                        new
                        {
                            Id = new Guid("43993fe3-7d35-4331-a340-f8fd1a00ae63"),
                            CountryId = new Guid("541a6ae3-1215-4e18-bb60-ab5c0bc8b3e6"),
                            ISO = "my"
                        },
                        new
                        {
                            Id = new Guid("128146c9-c5da-448b-89f0-0fc8f186b63e"),
                            CountryId = new Guid("541a6ae3-1215-4e18-bb60-ab5c0bc8b3e6"),
                            ISO = "od"
                        },
                        new
                        {
                            Id = new Guid("1952bcbd-2c94-4b76-8bc9-f0193a3bfe6d"),
                            CountryId = new Guid("541a6ae3-1215-4e18-bb60-ab5c0bc8b3e6"),
                            ISO = "pol"
                        },
                        new
                        {
                            Id = new Guid("1e2b570e-9603-45c6-8341-52df459a9622"),
                            CountryId = new Guid("541a6ae3-1215-4e18-bb60-ab5c0bc8b3e6"),
                            ISO = "ri"
                        },
                        new
                        {
                            Id = new Guid("6a417828-6052-4b3c-a766-20aaffa7660a"),
                            CountryId = new Guid("541a6ae3-1215-4e18-bb60-ab5c0bc8b3e6"),
                            ISO = "su"
                        },
                        new
                        {
                            Id = new Guid("471a2a8b-3554-4f71-987b-ef3b4e1259b7"),
                            CountryId = new Guid("541a6ae3-1215-4e18-bb60-ab5c0bc8b3e6"),
                            ISO = "ter"
                        },
                        new
                        {
                            Id = new Guid("c6b514d2-5f40-4d69-81b5-7ef525d3f8c0"),
                            CountryId = new Guid("541a6ae3-1215-4e18-bb60-ab5c0bc8b3e6"),
                            ISO = "uzh"
                        },
                        new
                        {
                            Id = new Guid("75d0cb20-04eb-425b-85d3-eb3cd2205412"),
                            CountryId = new Guid("541a6ae3-1215-4e18-bb60-ab5c0bc8b3e6"),
                            ISO = "khar"
                        },
                        new
                        {
                            Id = new Guid("b4519953-690c-4aa1-8a79-738ddb89f0d7"),
                            CountryId = new Guid("541a6ae3-1215-4e18-bb60-ab5c0bc8b3e6"),
                            ISO = "kher"
                        },
                        new
                        {
                            Id = new Guid("a69624d5-c07d-4132-92b1-97224664abe3"),
                            CountryId = new Guid("541a6ae3-1215-4e18-bb60-ab5c0bc8b3e6"),
                            ISO = "khm"
                        },
                        new
                        {
                            Id = new Guid("3f833cc2-c629-410e-84ad-9a6edb92ef67"),
                            CountryId = new Guid("541a6ae3-1215-4e18-bb60-ab5c0bc8b3e6"),
                            ISO = "chk"
                        },
                        new
                        {
                            Id = new Guid("f194e86b-e8ae-4866-9537-7dc31c1aae37"),
                            CountryId = new Guid("541a6ae3-1215-4e18-bb60-ab5c0bc8b3e6"),
                            ISO = "chv"
                        },
                        new
                        {
                            Id = new Guid("52cbac5d-3338-4ff0-913d-ebf7b38afe89"),
                            CountryId = new Guid("541a6ae3-1215-4e18-bb60-ab5c0bc8b3e6"),
                            ISO = "chh"
                        },
                        new
                        {
                            Id = new Guid("2f494843-6cc9-40ca-bcdd-6b946ce9ac80"),
                            CountryId = new Guid("627a1bab-c593-4f9b-a84c-3091cbce53b9"),
                            ISO = "var"
                        },
                        new
                        {
                            Id = new Guid("b02d8716-fbf0-41c2-bcfa-0eb744fe7459"),
                            CountryId = new Guid("627a1bab-c593-4f9b-a84c-3091cbce53b9"),
                            ISO = "lub"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("CityTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("54154d03-94c2-4fd1-8ff7-a7e38407d0f6"),
                            CityId = new Guid("79acd646-2c22-41b1-8b88-fa3ae18226bb"),
                            Language = "uk",
                            Name = "Вінниця"
                        },
                        new
                        {
                            Id = new Guid("ecdc0ab5-90e6-4a64-8a5b-0b125b55caf2"),
                            CityId = new Guid("39c62d7a-37f8-465a-9b57-8118587d442a"),
                            Language = "uk",
                            Name = "Дніпро"
                        },
                        new
                        {
                            Id = new Guid("040f27dd-25cd-4bbb-8a10-eb3ef7ea507c"),
                            CityId = new Guid("bed4196e-eec9-4fb5-8447-d1766881330f"),
                            Language = "uk",
                            Name = "Житомир"
                        },
                        new
                        {
                            Id = new Guid("bd5b1160-0022-4a5e-920a-5666400d1c4d"),
                            CityId = new Guid("0f578d1b-6eee-41a6-ab7a-e64012387e5d"),
                            Language = "uk",
                            Name = "Запоріжжя"
                        },
                        new
                        {
                            Id = new Guid("1a628783-4718-4a1c-8fca-49a63c05891d"),
                            CityId = new Guid("2efef582-c619-4bff-bfd7-7b51ed88a370"),
                            Language = "uk",
                            Name = "Івано-Франківськ"
                        },
                        new
                        {
                            Id = new Guid("97dca339-2c74-484a-87ae-ea29baf5f057"),
                            CityId = new Guid("da5ed147-fba3-4017-a15d-979d1910b238"),
                            Language = "uk",
                            Name = "Київ"
                        },
                        new
                        {
                            Id = new Guid("6ee3686d-7aff-4dc5-9547-6e42bd0c2ef1"),
                            CityId = new Guid("dbef6c59-cbdd-4358-a38f-40dfde3c5428"),
                            Language = "uk",
                            Name = "Кропивницький"
                        },
                        new
                        {
                            Id = new Guid("0ed6ec23-629c-4af2-8e09-ee3e949a9d96"),
                            CityId = new Guid("24fa1e5d-5d95-4e33-a7e2-38e95887dcb7"),
                            Language = "uk",
                            Name = "Луцьк"
                        },
                        new
                        {
                            Id = new Guid("d83855ab-9a34-4e18-bba9-38fe76e08b8f"),
                            CityId = new Guid("9ced12e4-48b9-4a64-8b4b-8098804b9c47"),
                            Language = "uk",
                            Name = "Львів"
                        },
                        new
                        {
                            Id = new Guid("003ecf71-ed36-4d5b-9c2c-da44cf397ffc"),
                            CityId = new Guid("43993fe3-7d35-4331-a340-f8fd1a00ae63"),
                            Language = "uk",
                            Name = "Миколаїв"
                        },
                        new
                        {
                            Id = new Guid("cfd9d3da-66ee-47d0-971e-561d6a1ab4d0"),
                            CityId = new Guid("128146c9-c5da-448b-89f0-0fc8f186b63e"),
                            Language = "uk",
                            Name = "Одеса"
                        },
                        new
                        {
                            Id = new Guid("25375063-db36-48b5-a5e7-b62cc2bb94f7"),
                            CityId = new Guid("1952bcbd-2c94-4b76-8bc9-f0193a3bfe6d"),
                            Language = "uk",
                            Name = "Полтава"
                        },
                        new
                        {
                            Id = new Guid("694356ad-677c-4c9f-8e9d-2ea4c8e294ca"),
                            CityId = new Guid("1e2b570e-9603-45c6-8341-52df459a9622"),
                            Language = "uk",
                            Name = "Рівне"
                        },
                        new
                        {
                            Id = new Guid("eed2a81b-2a1a-42f7-bff5-6b60ae9c8998"),
                            CityId = new Guid("6a417828-6052-4b3c-a766-20aaffa7660a"),
                            Language = "uk",
                            Name = "Суми"
                        },
                        new
                        {
                            Id = new Guid("81e2e682-7ec0-4b8c-b0f9-d2e5db4eeadc"),
                            CityId = new Guid("471a2a8b-3554-4f71-987b-ef3b4e1259b7"),
                            Language = "uk",
                            Name = "Тернопіль"
                        },
                        new
                        {
                            Id = new Guid("c36eb30d-450a-4a15-93ea-72dbda89c266"),
                            CityId = new Guid("c6b514d2-5f40-4d69-81b5-7ef525d3f8c0"),
                            Language = "uk",
                            Name = "Ужгород"
                        },
                        new
                        {
                            Id = new Guid("8c9de803-830b-4bf6-811d-628f35c9147c"),
                            CityId = new Guid("75d0cb20-04eb-425b-85d3-eb3cd2205412"),
                            Language = "uk",
                            Name = "Харків"
                        },
                        new
                        {
                            Id = new Guid("f0a3bf7a-2500-40ac-b659-518f82d75593"),
                            CityId = new Guid("b4519953-690c-4aa1-8a79-738ddb89f0d7"),
                            Language = "uk",
                            Name = "Херсон"
                        },
                        new
                        {
                            Id = new Guid("8fb1bfd0-1162-4f70-a372-2b86ced9f3ae"),
                            CityId = new Guid("a69624d5-c07d-4132-92b1-97224664abe3"),
                            Language = "uk",
                            Name = "Хмельницький"
                        },
                        new
                        {
                            Id = new Guid("a501fc09-b916-4bbe-9e49-3069a493828d"),
                            CityId = new Guid("3f833cc2-c629-410e-84ad-9a6edb92ef67"),
                            Language = "uk",
                            Name = "Черкаси"
                        },
                        new
                        {
                            Id = new Guid("596ec190-51ec-4938-9334-6f8a959426fe"),
                            CityId = new Guid("f194e86b-e8ae-4866-9537-7dc31c1aae37"),
                            Language = "uk",
                            Name = "Чернівці"
                        },
                        new
                        {
                            Id = new Guid("c3973248-cced-4b83-a2a8-828bbb3b9567"),
                            CityId = new Guid("52cbac5d-3338-4ff0-913d-ebf7b38afe89"),
                            Language = "uk",
                            Name = "Чернігів"
                        },
                        new
                        {
                            Id = new Guid("fb7ae389-7f5b-4b7c-8bc5-0782206df64a"),
                            CityId = new Guid("79acd646-2c22-41b1-8b88-fa3ae18226bb"),
                            Language = "en",
                            Name = "Vinnytsia"
                        },
                        new
                        {
                            Id = new Guid("29c90407-c18d-4e91-80a2-0e0523fa3885"),
                            CityId = new Guid("39c62d7a-37f8-465a-9b57-8118587d442a"),
                            Language = "en",
                            Name = "Dnipro"
                        },
                        new
                        {
                            Id = new Guid("ed4664d3-a478-4648-a7ba-f59e47af4e89"),
                            CityId = new Guid("bed4196e-eec9-4fb5-8447-d1766881330f"),
                            Language = "en",
                            Name = "Zhytomyr"
                        },
                        new
                        {
                            Id = new Guid("3232528d-5ee5-48dd-8377-f52d702b9be2"),
                            CityId = new Guid("0f578d1b-6eee-41a6-ab7a-e64012387e5d"),
                            Language = "en",
                            Name = "Zaporizhzhia"
                        },
                        new
                        {
                            Id = new Guid("4296a043-0aac-4553-9862-ce71449922be"),
                            CityId = new Guid("2efef582-c619-4bff-bfd7-7b51ed88a370"),
                            Language = "en",
                            Name = "Ivano-Frankivsk"
                        },
                        new
                        {
                            Id = new Guid("0bc39f09-7e5f-463e-a54e-79266f00ecaf"),
                            CityId = new Guid("da5ed147-fba3-4017-a15d-979d1910b238"),
                            Language = "en",
                            Name = "Kyiv"
                        },
                        new
                        {
                            Id = new Guid("fac86f1e-64c5-4784-9170-c05558350699"),
                            CityId = new Guid("dbef6c59-cbdd-4358-a38f-40dfde3c5428"),
                            Language = "en",
                            Name = "Kropyvnytskyi"
                        },
                        new
                        {
                            Id = new Guid("3ca5cc31-1993-47ab-9af9-187665a852ff"),
                            CityId = new Guid("24fa1e5d-5d95-4e33-a7e2-38e95887dcb7"),
                            Language = "en",
                            Name = "Lutsk"
                        },
                        new
                        {
                            Id = new Guid("34986e72-7c38-45e6-a77c-4632ed624102"),
                            CityId = new Guid("9ced12e4-48b9-4a64-8b4b-8098804b9c47"),
                            Language = "en",
                            Name = "Lviv"
                        },
                        new
                        {
                            Id = new Guid("44603f57-da5d-47cf-9ee7-b50533a37017"),
                            CityId = new Guid("43993fe3-7d35-4331-a340-f8fd1a00ae63"),
                            Language = "en",
                            Name = "Mykolaiv"
                        },
                        new
                        {
                            Id = new Guid("9f75e37b-60f5-43b5-a783-bcc1606c52a1"),
                            CityId = new Guid("128146c9-c5da-448b-89f0-0fc8f186b63e"),
                            Language = "en",
                            Name = "Odesa"
                        },
                        new
                        {
                            Id = new Guid("4e17ea8e-f9db-4f63-82a5-183e22f5d6c0"),
                            CityId = new Guid("1952bcbd-2c94-4b76-8bc9-f0193a3bfe6d"),
                            Language = "en",
                            Name = "Poltava"
                        },
                        new
                        {
                            Id = new Guid("2a63bbb0-db08-4325-a7ee-64432865e401"),
                            CityId = new Guid("1e2b570e-9603-45c6-8341-52df459a9622"),
                            Language = "en",
                            Name = "Rivne"
                        },
                        new
                        {
                            Id = new Guid("8d53adae-a926-48b9-b2de-73622777a4b3"),
                            CityId = new Guid("6a417828-6052-4b3c-a766-20aaffa7660a"),
                            Language = "en",
                            Name = "Sumy"
                        },
                        new
                        {
                            Id = new Guid("a2c44eab-d311-4d48-99e6-e91e3b741ffb"),
                            CityId = new Guid("471a2a8b-3554-4f71-987b-ef3b4e1259b7"),
                            Language = "en",
                            Name = "Ternopil"
                        },
                        new
                        {
                            Id = new Guid("6b0ebc5e-80c4-4331-8ee7-4817552c9e4d"),
                            CityId = new Guid("c6b514d2-5f40-4d69-81b5-7ef525d3f8c0"),
                            Language = "en",
                            Name = "Uzhhorod"
                        },
                        new
                        {
                            Id = new Guid("f728e3b4-a3f1-4262-b58b-3905a4fece66"),
                            CityId = new Guid("75d0cb20-04eb-425b-85d3-eb3cd2205412"),
                            Language = "en",
                            Name = "Kharkiv"
                        },
                        new
                        {
                            Id = new Guid("09c0e5ed-fc5b-4632-9012-f67f51412db5"),
                            CityId = new Guid("b4519953-690c-4aa1-8a79-738ddb89f0d7"),
                            Language = "en",
                            Name = "Kherson"
                        },
                        new
                        {
                            Id = new Guid("ca0062eb-682b-4adc-8a61-cf83bb6a7825"),
                            CityId = new Guid("a69624d5-c07d-4132-92b1-97224664abe3"),
                            Language = "en",
                            Name = "Khmelnytskyi"
                        },
                        new
                        {
                            Id = new Guid("37a1ddb6-4a94-411e-acb6-a555878bb15f"),
                            CityId = new Guid("3f833cc2-c629-410e-84ad-9a6edb92ef67"),
                            Language = "en",
                            Name = "Cherkasy"
                        },
                        new
                        {
                            Id = new Guid("00ae7848-4da2-4b2a-a935-22659a066bd8"),
                            CityId = new Guid("f194e86b-e8ae-4866-9537-7dc31c1aae37"),
                            Language = "en",
                            Name = "Chernivtsi"
                        },
                        new
                        {
                            Id = new Guid("4a409807-eb6b-4bc7-bbad-9c2db8bb827d"),
                            CityId = new Guid("52cbac5d-3338-4ff0-913d-ebf7b38afe89"),
                            Language = "en",
                            Name = "Chernihiv"
                        },
                        new
                        {
                            Id = new Guid("c5be5572-61e1-45ce-b5fa-649380e40ffb"),
                            CityId = new Guid("2f494843-6cc9-40ca-bcdd-6b946ce9ac80"),
                            Language = "uk",
                            Name = "Варшава"
                        },
                        new
                        {
                            Id = new Guid("3b4184ab-f515-4580-9dbc-7b94607c4d6f"),
                            CityId = new Guid("b02d8716-fbf0-41c2-bcfa-0eb744fe7459"),
                            Language = "uk",
                            Name = "Люблін"
                        },
                        new
                        {
                            Id = new Guid("79666d71-d245-4a0d-80de-5c3f9fa68d98"),
                            CityId = new Guid("2f494843-6cc9-40ca-bcdd-6b946ce9ac80"),
                            Language = "en",
                            Name = "Varshava"
                        },
                        new
                        {
                            Id = new Guid("92a48ff6-45e0-4cac-8381-8f019a9afd96"),
                            CityId = new Guid("b02d8716-fbf0-41c2-bcfa-0eb744fe7459"),
                            Language = "en",
                            Name = "Lublin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("541a6ae3-1215-4e18-bb60-ab5c0bc8b3e6"),
                            ISO = "uk"
                        },
                        new
                        {
                            Id = new Guid("627a1bab-c593-4f9b-a84c-3091cbce53b9"),
                            ISO = "pl"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CountryTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1cb9d88d-87c0-48f6-873c-1d224c6a06c4"),
                            CountryId = new Guid("541a6ae3-1215-4e18-bb60-ab5c0bc8b3e6"),
                            Language = "en",
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("ebccdbea-d25b-446e-91b7-22e546e0f42b"),
                            CountryId = new Guid("541a6ae3-1215-4e18-bb60-ab5c0bc8b3e6"),
                            Language = "uk",
                            Name = "Україна"
                        },
                        new
                        {
                            Id = new Guid("fac0830a-06b1-4340-9cbd-2caba1f3c4d8"),
                            CountryId = new Guid("627a1bab-c593-4f9b-a84c-3091cbce53b9"),
                            Language = "en",
                            Name = "Poland"
                        },
                        new
                        {
                            Id = new Guid("82f7e19a-e9d3-49ab-8a8e-0bed4f9c7bd1"),
                            CountryId = new Guid("627a1bab-c593-4f9b-a84c-3091cbce53b9"),
                            Language = "uk",
                            Name = "Польша"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VolunteerApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VolunteerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VolunteerUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VolunteerUserId", "VolunteerApplicationId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DAL.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplictionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserRecipientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserSenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplictionId");

                    b.HasIndex("UserRecipientId");

                    b.HasIndex("UserSenderId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ProfilePictures");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("83cb022d-b217-411a-8242-1be12de613ff"),
                            Title = "medicine"
                        },
                        new
                        {
                            Id = new Guid("1d9de0ad-e168-49c1-9593-b98edb928bf1"),
                            Title = "cooking"
                        },
                        new
                        {
                            Id = new Guid("8ff4835a-b04c-4817-af7a-2510a2ed5449"),
                            Title = "building"
                        },
                        new
                        {
                            Id = new Guid("8314ac90-5fad-49a9-8f2f-2dbbfb265f0c"),
                            Title = "psychology"
                        });
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("59000b70-f351-43f7-802f-0c2399c17e0d"),
                            Language = "en",
                            Name = "medicine",
                            SkillId = new Guid("83cb022d-b217-411a-8242-1be12de613ff")
                        },
                        new
                        {
                            Id = new Guid("0be48a14-a181-4da7-97e7-0b15e9799726"),
                            Language = "uk",
                            Name = "медицина",
                            SkillId = new Guid("83cb022d-b217-411a-8242-1be12de613ff")
                        },
                        new
                        {
                            Id = new Guid("4148ead1-c4f2-4dff-abed-6dccd672b711"),
                            Language = "en",
                            Name = "cooking",
                            SkillId = new Guid("1d9de0ad-e168-49c1-9593-b98edb928bf1")
                        },
                        new
                        {
                            Id = new Guid("62b47b85-6343-44b1-86fa-4fc1eb6432a4"),
                            Language = "uk",
                            Name = "кулінарія",
                            SkillId = new Guid("1d9de0ad-e168-49c1-9593-b98edb928bf1")
                        },
                        new
                        {
                            Id = new Guid("b43d73c8-1d44-4822-b682-838631d7d81a"),
                            Language = "en",
                            Name = "building",
                            SkillId = new Guid("8ff4835a-b04c-4817-af7a-2510a2ed5449")
                        },
                        new
                        {
                            Id = new Guid("a47f1ec7-29cd-440d-86a2-682d8249cd2b"),
                            Language = "uk",
                            Name = "будівництво",
                            SkillId = new Guid("8ff4835a-b04c-4817-af7a-2510a2ed5449")
                        },
                        new
                        {
                            Id = new Guid("1074af7b-22f4-4c0a-89d6-2c3545ac2d47"),
                            Language = "en",
                            Name = "psychology",
                            SkillId = new Guid("8314ac90-5fad-49a9-8f2f-2dbbfb265f0c")
                        },
                        new
                        {
                            Id = new Guid("79211ecc-8eaa-42ff-b0e9-aec77ec72e4a"),
                            Language = "uk",
                            Name = "психологія",
                            SkillId = new Guid("8314ac90-5fad-49a9-8f2f-2dbbfb265f0c")
                        });
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e9f6597e-8af0-4ebc-ab4d-e3f8d8c012ab"),
                            CityId = new Guid("79acd646-2c22-41b1-8b88-fa3ae18226bb"),
                            DateOfBirth = new DateTime(2023, 5, 23, 18, 37, 11, 207, DateTimeKind.Local).AddTicks(8501),
                            FirstName = "the first",
                            LastName = "admin",
                            Login = "ourfirstadmin",
                            Password = "Rk/ryiBNbnHx+s9i1IveCNNw4axYPQHm4T1eratfQlg=",
                            Phone = "+11111111111",
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Document")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DocumentFormat")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("NULL");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ApplicationId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.HasOne("DAL.Entities.Category", "Category")
                        .WithMany("Applications")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("Applications")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationSkill", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("ApplicationSkills")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("ApplicationSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DAL.Entities.CategoryTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Category", "Category")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("CityTranslations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("CountryTranslations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.HasOne("DAL.Entities.Volunteer", "Volunteer")
                        .WithMany("Messages")
                        .HasForeignKey("VolunteerUserId", "VolunteerApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("DAL.Entities.Notification", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Notifications")
                        .HasForeignKey("ApplictionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "UserRecipient")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("UserRecipientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "UserSender")
                        .WithMany("SentNotifications")
                        .HasForeignKey("UserSenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("UserRecipient");

                    b.Navigation("UserSender");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithOne("ProfilePicture")
                        .HasForeignKey("DAL.Entities.ProfilePicture", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("SkillTranslations")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Volunteers")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Volunteers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Navigation("ApplicationSkills");

                    b.Navigation("Notifications");

                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("CategoryTranslations");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("CityTranslations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("CountryTranslations");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Navigation("ApplicationSkills");

                    b.Navigation("SkillTranslations");

                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ProfilePicture");

                    b.Navigation("ReceivedNotifications");

                    b.Navigation("SentNotifications");

                    b.Navigation("UserSkills");

                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
