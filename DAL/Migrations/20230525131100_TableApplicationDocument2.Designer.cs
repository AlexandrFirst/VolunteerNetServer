// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(VolunteerNetServerDBContext))]
    [Migration("20230525131100_TableApplicationDocument2")]
    partial class TableApplicationDocument2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("CurrentSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DateTimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimeStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<string>("OwnerCardName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequiredNumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<decimal?>("RequiredSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Document")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DocumentFormat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationDocuments");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationSkill", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("ApplicationSkills");
                });

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4eb2c76a-f758-4b72-96dd-1ad3778719f1"),
                            Title = "health care"
                        },
                        new
                        {
                            Id = new Guid("8ebef77a-a093-40a1-bad7-820f059070bd"),
                            Title = "education"
                        },
                        new
                        {
                            Id = new Guid("623b8063-1bc4-4c9d-a6c9-341fcdcd2486"),
                            Title = "sports and physical culture"
                        },
                        new
                        {
                            Id = new Guid("4efa8bac-b3a7-430b-951d-cc547573b233"),
                            Title = "culture and art"
                        },
                        new
                        {
                            Id = new Guid("e5197f13-5b60-4eea-8bfb-a48cca615cca"),
                            Title = "social programs"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CategoryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DescriptionCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("10255ccb-f7de-4a17-894a-23c2b8d0b979"),
                            CategoryId = new Guid("4eb2c76a-f758-4b72-96dd-1ad3778719f1"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "health care"
                        },
                        new
                        {
                            Id = new Guid("4b08a62f-48ed-4f99-a9bf-cb9ffae9f008"),
                            CategoryId = new Guid("4eb2c76a-f758-4b72-96dd-1ad3778719f1"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "охорона здоров'я"
                        },
                        new
                        {
                            Id = new Guid("5bee3305-ed2b-432a-a7fa-4c32636ba0d6"),
                            CategoryId = new Guid("8ebef77a-a093-40a1-bad7-820f059070bd"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "education"
                        },
                        new
                        {
                            Id = new Guid("36121ad4-33ac-426a-9b6f-f673fb2ff6e6"),
                            CategoryId = new Guid("8ebef77a-a093-40a1-bad7-820f059070bd"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "освіта"
                        },
                        new
                        {
                            Id = new Guid("7d5e2130-90b5-4c38-83ef-e8a2c45b5ae9"),
                            CategoryId = new Guid("623b8063-1bc4-4c9d-a6c9-341fcdcd2486"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "sport and physical culture"
                        },
                        new
                        {
                            Id = new Guid("a68293ee-cf46-4543-a6a2-37a83f9d83ec"),
                            CategoryId = new Guid("623b8063-1bc4-4c9d-a6c9-341fcdcd2486"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "спорт та фізична культура"
                        },
                        new
                        {
                            Id = new Guid("9a86278d-e426-4f0b-9a08-738567c86103"),
                            CategoryId = new Guid("4efa8bac-b3a7-430b-951d-cc547573b233"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "culture and art"
                        },
                        new
                        {
                            Id = new Guid("86251206-5729-42cb-897b-d50d194da596"),
                            CategoryId = new Guid("4efa8bac-b3a7-430b-951d-cc547573b233"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "культура та мистецтво"
                        },
                        new
                        {
                            Id = new Guid("a468dbdb-75ec-4d71-93b2-013eeeda1fff"),
                            CategoryId = new Guid("e5197f13-5b60-4eea-8bfb-a48cca615cca"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "social programs"
                        },
                        new
                        {
                            Id = new Guid("9c8757c6-7f49-4eb2-a92d-4c3f2c4e18bb"),
                            CategoryId = new Guid("e5197f13-5b60-4eea-8bfb-a48cca615cca"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "соціальні програми"
                        });
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ccc7e347-e853-402a-b58f-7722469f4218"),
                            CountryId = new Guid("95c93c40-9a93-4b6c-af60-c27f34750cae"),
                            ISO = "vi"
                        },
                        new
                        {
                            Id = new Guid("98bae417-cf3f-4a28-a5a8-e23d79924ca3"),
                            CountryId = new Guid("95c93c40-9a93-4b6c-af60-c27f34750cae"),
                            ISO = "dn"
                        },
                        new
                        {
                            Id = new Guid("8112c8fb-83a9-46a6-b87e-9ce72de47712"),
                            CountryId = new Guid("95c93c40-9a93-4b6c-af60-c27f34750cae"),
                            ISO = "zhy"
                        },
                        new
                        {
                            Id = new Guid("9822f563-dab8-457e-b900-3d1f4df345a4"),
                            CountryId = new Guid("95c93c40-9a93-4b6c-af60-c27f34750cae"),
                            ISO = "zp"
                        },
                        new
                        {
                            Id = new Guid("fcf0ad22-2edb-4a7e-91a4-fb8034e54304"),
                            CountryId = new Guid("95c93c40-9a93-4b6c-af60-c27f34750cae"),
                            ISO = "if"
                        },
                        new
                        {
                            Id = new Guid("f82616e1-a5f7-41a5-b905-8ba5a7f2a204"),
                            CountryId = new Guid("95c93c40-9a93-4b6c-af60-c27f34750cae"),
                            ISO = "ky"
                        },
                        new
                        {
                            Id = new Guid("33fe0100-68f9-4d85-8a26-b952bad87cb8"),
                            CountryId = new Guid("95c93c40-9a93-4b6c-af60-c27f34750cae"),
                            ISO = "kr"
                        },
                        new
                        {
                            Id = new Guid("73c767bb-ffa3-4c88-8f3a-048fa6c7a816"),
                            CountryId = new Guid("95c93c40-9a93-4b6c-af60-c27f34750cae"),
                            ISO = "lut"
                        },
                        new
                        {
                            Id = new Guid("e247de23-a5e1-44d7-9aa3-4a0312f7b93f"),
                            CountryId = new Guid("95c93c40-9a93-4b6c-af60-c27f34750cae"),
                            ISO = "lv"
                        },
                        new
                        {
                            Id = new Guid("176689a1-730b-42c6-9c77-24f8e7f1420c"),
                            CountryId = new Guid("95c93c40-9a93-4b6c-af60-c27f34750cae"),
                            ISO = "my"
                        },
                        new
                        {
                            Id = new Guid("da263f88-5ab7-4469-be6a-1f06ec0ae463"),
                            CountryId = new Guid("95c93c40-9a93-4b6c-af60-c27f34750cae"),
                            ISO = "od"
                        },
                        new
                        {
                            Id = new Guid("7fdd005e-3b8e-4010-b777-721d4e2971ef"),
                            CountryId = new Guid("95c93c40-9a93-4b6c-af60-c27f34750cae"),
                            ISO = "pol"
                        },
                        new
                        {
                            Id = new Guid("a761360b-dd89-44df-8581-dc2cf6e8564d"),
                            CountryId = new Guid("95c93c40-9a93-4b6c-af60-c27f34750cae"),
                            ISO = "ri"
                        },
                        new
                        {
                            Id = new Guid("8048bb0e-89ed-405d-a12c-ab40daf65883"),
                            CountryId = new Guid("95c93c40-9a93-4b6c-af60-c27f34750cae"),
                            ISO = "su"
                        },
                        new
                        {
                            Id = new Guid("e6883355-975d-4b73-bb60-083953adfb62"),
                            CountryId = new Guid("95c93c40-9a93-4b6c-af60-c27f34750cae"),
                            ISO = "ter"
                        },
                        new
                        {
                            Id = new Guid("4bedf628-8cf0-4a19-8e9d-101a301a45f8"),
                            CountryId = new Guid("95c93c40-9a93-4b6c-af60-c27f34750cae"),
                            ISO = "uzh"
                        },
                        new
                        {
                            Id = new Guid("d0274787-738f-4187-818b-c18d6a7356d0"),
                            CountryId = new Guid("95c93c40-9a93-4b6c-af60-c27f34750cae"),
                            ISO = "khar"
                        },
                        new
                        {
                            Id = new Guid("0f29e748-c208-404d-b10c-00c131755052"),
                            CountryId = new Guid("95c93c40-9a93-4b6c-af60-c27f34750cae"),
                            ISO = "kher"
                        },
                        new
                        {
                            Id = new Guid("1c6e3703-1675-4618-b70e-06a3d446b2a9"),
                            CountryId = new Guid("95c93c40-9a93-4b6c-af60-c27f34750cae"),
                            ISO = "khm"
                        },
                        new
                        {
                            Id = new Guid("de17c5bd-b05f-4694-a6d3-86a269edf80d"),
                            CountryId = new Guid("95c93c40-9a93-4b6c-af60-c27f34750cae"),
                            ISO = "chk"
                        },
                        new
                        {
                            Id = new Guid("51b89706-3156-4c6e-89b6-854e92f24a7c"),
                            CountryId = new Guid("95c93c40-9a93-4b6c-af60-c27f34750cae"),
                            ISO = "chv"
                        },
                        new
                        {
                            Id = new Guid("2d2eef31-f699-4e23-8ccf-2be77d0fd99f"),
                            CountryId = new Guid("95c93c40-9a93-4b6c-af60-c27f34750cae"),
                            ISO = "chh"
                        },
                        new
                        {
                            Id = new Guid("e0a8faa5-ce02-4073-8b8d-e664768a52ad"),
                            CountryId = new Guid("926df0da-9404-412b-9fee-3b2a0d3939f0"),
                            ISO = "var"
                        },
                        new
                        {
                            Id = new Guid("9b19acfb-5060-4970-952d-634ed4095a98"),
                            CountryId = new Guid("926df0da-9404-412b-9fee-3b2a0d3939f0"),
                            ISO = "lub"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("CityTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("afece68a-6cc5-4949-ae9e-01747b9f1f9e"),
                            CityId = new Guid("ccc7e347-e853-402a-b58f-7722469f4218"),
                            Language = "uk",
                            Name = "Вінниця"
                        },
                        new
                        {
                            Id = new Guid("b790457a-d2f4-4b32-aac3-93b2fddeb677"),
                            CityId = new Guid("98bae417-cf3f-4a28-a5a8-e23d79924ca3"),
                            Language = "uk",
                            Name = "Дніпро"
                        },
                        new
                        {
                            Id = new Guid("0a85b128-0ad2-4b10-8af0-6804216efbb6"),
                            CityId = new Guid("8112c8fb-83a9-46a6-b87e-9ce72de47712"),
                            Language = "uk",
                            Name = "Житомир"
                        },
                        new
                        {
                            Id = new Guid("80af9335-f5b9-426a-8246-1e931a2d8f9e"),
                            CityId = new Guid("9822f563-dab8-457e-b900-3d1f4df345a4"),
                            Language = "uk",
                            Name = "Запоріжжя"
                        },
                        new
                        {
                            Id = new Guid("8499a271-dea8-4e5a-8c3e-e2a69129cd1c"),
                            CityId = new Guid("fcf0ad22-2edb-4a7e-91a4-fb8034e54304"),
                            Language = "uk",
                            Name = "Івано-Франківськ"
                        },
                        new
                        {
                            Id = new Guid("cc689697-924d-40b2-95c3-bc0033c9dedd"),
                            CityId = new Guid("f82616e1-a5f7-41a5-b905-8ba5a7f2a204"),
                            Language = "uk",
                            Name = "Київ"
                        },
                        new
                        {
                            Id = new Guid("0bad1e09-c15a-468e-b927-f2fdc1c6a635"),
                            CityId = new Guid("33fe0100-68f9-4d85-8a26-b952bad87cb8"),
                            Language = "uk",
                            Name = "Кропивницький"
                        },
                        new
                        {
                            Id = new Guid("21a84d1f-de3f-4038-8e7b-966c468c9baa"),
                            CityId = new Guid("73c767bb-ffa3-4c88-8f3a-048fa6c7a816"),
                            Language = "uk",
                            Name = "Луцьк"
                        },
                        new
                        {
                            Id = new Guid("1efa4eb1-eae0-4e57-bc20-997154854f23"),
                            CityId = new Guid("e247de23-a5e1-44d7-9aa3-4a0312f7b93f"),
                            Language = "uk",
                            Name = "Львів"
                        },
                        new
                        {
                            Id = new Guid("cefd57c4-5ab8-408d-abcd-e7b794d70f28"),
                            CityId = new Guid("176689a1-730b-42c6-9c77-24f8e7f1420c"),
                            Language = "uk",
                            Name = "Миколаїв"
                        },
                        new
                        {
                            Id = new Guid("849cf436-3289-492e-9a9a-258949e504e3"),
                            CityId = new Guid("da263f88-5ab7-4469-be6a-1f06ec0ae463"),
                            Language = "uk",
                            Name = "Одеса"
                        },
                        new
                        {
                            Id = new Guid("225ddf58-7dc9-41e5-b96f-0a8cdd29e4c8"),
                            CityId = new Guid("7fdd005e-3b8e-4010-b777-721d4e2971ef"),
                            Language = "uk",
                            Name = "Полтава"
                        },
                        new
                        {
                            Id = new Guid("b14d9e56-8031-421b-b0db-876b0be5eb95"),
                            CityId = new Guid("a761360b-dd89-44df-8581-dc2cf6e8564d"),
                            Language = "uk",
                            Name = "Рівне"
                        },
                        new
                        {
                            Id = new Guid("5d656e9e-65bd-4725-bf78-c403be1918a3"),
                            CityId = new Guid("8048bb0e-89ed-405d-a12c-ab40daf65883"),
                            Language = "uk",
                            Name = "Суми"
                        },
                        new
                        {
                            Id = new Guid("a60c3d85-0375-42e5-80f9-21660cd85cc7"),
                            CityId = new Guid("e6883355-975d-4b73-bb60-083953adfb62"),
                            Language = "uk",
                            Name = "Тернопіль"
                        },
                        new
                        {
                            Id = new Guid("5261a3bc-796d-4d58-bc0b-6d16e26769a2"),
                            CityId = new Guid("4bedf628-8cf0-4a19-8e9d-101a301a45f8"),
                            Language = "uk",
                            Name = "Ужгород"
                        },
                        new
                        {
                            Id = new Guid("e3457f96-590b-4d49-a572-da528d3c3379"),
                            CityId = new Guid("d0274787-738f-4187-818b-c18d6a7356d0"),
                            Language = "uk",
                            Name = "Харків"
                        },
                        new
                        {
                            Id = new Guid("b39aca12-4941-4fc3-b6c5-3588af5d0a31"),
                            CityId = new Guid("0f29e748-c208-404d-b10c-00c131755052"),
                            Language = "uk",
                            Name = "Херсон"
                        },
                        new
                        {
                            Id = new Guid("a8d3aead-c55e-4e24-9298-95015bc648ab"),
                            CityId = new Guid("1c6e3703-1675-4618-b70e-06a3d446b2a9"),
                            Language = "uk",
                            Name = "Хмельницький"
                        },
                        new
                        {
                            Id = new Guid("97770636-9f15-4259-8dd0-e28c6c7d892e"),
                            CityId = new Guid("de17c5bd-b05f-4694-a6d3-86a269edf80d"),
                            Language = "uk",
                            Name = "Черкаси"
                        },
                        new
                        {
                            Id = new Guid("f1c48b31-6183-48bc-a55d-2f74ea81dc4d"),
                            CityId = new Guid("51b89706-3156-4c6e-89b6-854e92f24a7c"),
                            Language = "uk",
                            Name = "Чернівці"
                        },
                        new
                        {
                            Id = new Guid("55e81311-fd3a-4d65-b317-6ba2f681e884"),
                            CityId = new Guid("2d2eef31-f699-4e23-8ccf-2be77d0fd99f"),
                            Language = "uk",
                            Name = "Чернігів"
                        },
                        new
                        {
                            Id = new Guid("0f6ff792-a459-4f7a-97ee-8c4f423a07c9"),
                            CityId = new Guid("ccc7e347-e853-402a-b58f-7722469f4218"),
                            Language = "en",
                            Name = "Vinnytsia"
                        },
                        new
                        {
                            Id = new Guid("061ce734-c7db-40cd-b6db-4e48c98bdef9"),
                            CityId = new Guid("98bae417-cf3f-4a28-a5a8-e23d79924ca3"),
                            Language = "en",
                            Name = "Dnipro"
                        },
                        new
                        {
                            Id = new Guid("dfb5fa9d-f241-4236-af57-1ad90f68da2c"),
                            CityId = new Guid("8112c8fb-83a9-46a6-b87e-9ce72de47712"),
                            Language = "en",
                            Name = "Zhytomyr"
                        },
                        new
                        {
                            Id = new Guid("a9de1d94-b82d-4970-9876-9770a664d4bb"),
                            CityId = new Guid("9822f563-dab8-457e-b900-3d1f4df345a4"),
                            Language = "en",
                            Name = "Zaporizhzhia"
                        },
                        new
                        {
                            Id = new Guid("a13a992d-1802-4448-94e7-2d5a5f195060"),
                            CityId = new Guid("fcf0ad22-2edb-4a7e-91a4-fb8034e54304"),
                            Language = "en",
                            Name = "Ivano-Frankivsk"
                        },
                        new
                        {
                            Id = new Guid("5b5cf6c8-e328-4db9-a4e5-17b34cd83bc6"),
                            CityId = new Guid("f82616e1-a5f7-41a5-b905-8ba5a7f2a204"),
                            Language = "en",
                            Name = "Kyiv"
                        },
                        new
                        {
                            Id = new Guid("320a36c7-a276-4411-825d-210459c7ffa0"),
                            CityId = new Guid("33fe0100-68f9-4d85-8a26-b952bad87cb8"),
                            Language = "en",
                            Name = "Kropyvnytskyi"
                        },
                        new
                        {
                            Id = new Guid("43d01c28-3b87-48b9-b70a-8cf9900abe78"),
                            CityId = new Guid("73c767bb-ffa3-4c88-8f3a-048fa6c7a816"),
                            Language = "en",
                            Name = "Lutsk"
                        },
                        new
                        {
                            Id = new Guid("c69d2957-f6c8-49f0-8912-981ade79715c"),
                            CityId = new Guid("e247de23-a5e1-44d7-9aa3-4a0312f7b93f"),
                            Language = "en",
                            Name = "Lviv"
                        },
                        new
                        {
                            Id = new Guid("9e3df9e9-7c0c-4a58-860b-d63c1b9452b0"),
                            CityId = new Guid("176689a1-730b-42c6-9c77-24f8e7f1420c"),
                            Language = "en",
                            Name = "Mykolaiv"
                        },
                        new
                        {
                            Id = new Guid("05b9e1a2-7d6f-40c2-b647-1a79ffc44fbc"),
                            CityId = new Guid("da263f88-5ab7-4469-be6a-1f06ec0ae463"),
                            Language = "en",
                            Name = "Odesa"
                        },
                        new
                        {
                            Id = new Guid("8cc2610c-1722-41a0-b818-22bd1344072b"),
                            CityId = new Guid("7fdd005e-3b8e-4010-b777-721d4e2971ef"),
                            Language = "en",
                            Name = "Poltava"
                        },
                        new
                        {
                            Id = new Guid("24d6b709-58a9-4759-9bc2-a8db08661cc3"),
                            CityId = new Guid("a761360b-dd89-44df-8581-dc2cf6e8564d"),
                            Language = "en",
                            Name = "Rivne"
                        },
                        new
                        {
                            Id = new Guid("b00ef915-95e3-410f-999b-430222fefd29"),
                            CityId = new Guid("8048bb0e-89ed-405d-a12c-ab40daf65883"),
                            Language = "en",
                            Name = "Sumy"
                        },
                        new
                        {
                            Id = new Guid("79376a18-a842-4252-b598-9b59f245fff3"),
                            CityId = new Guid("e6883355-975d-4b73-bb60-083953adfb62"),
                            Language = "en",
                            Name = "Ternopil"
                        },
                        new
                        {
                            Id = new Guid("af77365c-8832-474d-85de-e050f2d434e9"),
                            CityId = new Guid("4bedf628-8cf0-4a19-8e9d-101a301a45f8"),
                            Language = "en",
                            Name = "Uzhhorod"
                        },
                        new
                        {
                            Id = new Guid("15cb5f03-d67a-4658-8a04-cf7c9e9b86b4"),
                            CityId = new Guid("d0274787-738f-4187-818b-c18d6a7356d0"),
                            Language = "en",
                            Name = "Kharkiv"
                        },
                        new
                        {
                            Id = new Guid("5ae35996-0082-41f3-afdc-f3519791a8af"),
                            CityId = new Guid("0f29e748-c208-404d-b10c-00c131755052"),
                            Language = "en",
                            Name = "Kherson"
                        },
                        new
                        {
                            Id = new Guid("fbcd37fd-94eb-4357-8c2b-7652e3b7641d"),
                            CityId = new Guid("1c6e3703-1675-4618-b70e-06a3d446b2a9"),
                            Language = "en",
                            Name = "Khmelnytskyi"
                        },
                        new
                        {
                            Id = new Guid("929bc386-e20d-400c-8b74-473f961c4757"),
                            CityId = new Guid("de17c5bd-b05f-4694-a6d3-86a269edf80d"),
                            Language = "en",
                            Name = "Cherkasy"
                        },
                        new
                        {
                            Id = new Guid("9ed3bc29-c761-48f5-945e-52ecab4976df"),
                            CityId = new Guid("51b89706-3156-4c6e-89b6-854e92f24a7c"),
                            Language = "en",
                            Name = "Chernivtsi"
                        },
                        new
                        {
                            Id = new Guid("48ac5f17-a3e9-4d3f-b236-8a41a74cb857"),
                            CityId = new Guid("2d2eef31-f699-4e23-8ccf-2be77d0fd99f"),
                            Language = "en",
                            Name = "Chernihiv"
                        },
                        new
                        {
                            Id = new Guid("e1a64a39-4716-47eb-ac41-cd0196403bfd"),
                            CityId = new Guid("e0a8faa5-ce02-4073-8b8d-e664768a52ad"),
                            Language = "uk",
                            Name = "Варшава"
                        },
                        new
                        {
                            Id = new Guid("d085f561-78a4-4140-9367-f6eb08bdf4a5"),
                            CityId = new Guid("9b19acfb-5060-4970-952d-634ed4095a98"),
                            Language = "uk",
                            Name = "Люблін"
                        },
                        new
                        {
                            Id = new Guid("6667df2b-33f7-4f40-85bd-be2942a84336"),
                            CityId = new Guid("e0a8faa5-ce02-4073-8b8d-e664768a52ad"),
                            Language = "en",
                            Name = "Varshava"
                        },
                        new
                        {
                            Id = new Guid("d7277544-cb3b-4e89-9bb6-cb663e3fe917"),
                            CityId = new Guid("9b19acfb-5060-4970-952d-634ed4095a98"),
                            Language = "en",
                            Name = "Lublin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("95c93c40-9a93-4b6c-af60-c27f34750cae"),
                            ISO = "uk"
                        },
                        new
                        {
                            Id = new Guid("926df0da-9404-412b-9fee-3b2a0d3939f0"),
                            ISO = "pl"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CountryTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ec382e05-3b85-4b64-8242-017ede078445"),
                            CountryId = new Guid("95c93c40-9a93-4b6c-af60-c27f34750cae"),
                            Language = "en",
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("26cf99d2-11f0-411a-92b7-750456384d00"),
                            CountryId = new Guid("95c93c40-9a93-4b6c-af60-c27f34750cae"),
                            Language = "uk",
                            Name = "Україна"
                        },
                        new
                        {
                            Id = new Guid("fa89a317-0334-4d91-8474-5f44bde0aa62"),
                            CountryId = new Guid("926df0da-9404-412b-9fee-3b2a0d3939f0"),
                            Language = "en",
                            Name = "Poland"
                        },
                        new
                        {
                            Id = new Guid("7c169287-3211-496c-a2fc-c1e4328b7958"),
                            CountryId = new Guid("926df0da-9404-412b-9fee-3b2a0d3939f0"),
                            Language = "uk",
                            Name = "Польша"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Donate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTimeCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderCardBank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SenderCardCountry")
                        .HasColumnType("int");

                    b.Property<string>("SenderCardMask2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderCardType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SenderCommission")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Donates");
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VolunteerApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VolunteerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VolunteerUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VolunteerUserId", "VolunteerApplicationId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DAL.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplictionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserRecipientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserSenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplictionId");

                    b.HasIndex("UserRecipientId");

                    b.HasIndex("UserSenderId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ProfilePictures");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("df8d22bb-6bfd-425a-816a-aa8a33d4356f"),
                            Title = "medicine"
                        },
                        new
                        {
                            Id = new Guid("c848cfdd-7bd8-4074-a13c-1124a36fbce8"),
                            Title = "cooking"
                        },
                        new
                        {
                            Id = new Guid("3021e949-7883-4db6-a7f9-b2f6af961eca"),
                            Title = "building"
                        },
                        new
                        {
                            Id = new Guid("9e12ad3c-ff8e-4766-aa64-dc779728217b"),
                            Title = "psychology"
                        });
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5fea66ed-8bad-4e39-a60d-c70b125c1241"),
                            Language = "en",
                            Name = "medicine",
                            SkillId = new Guid("df8d22bb-6bfd-425a-816a-aa8a33d4356f")
                        },
                        new
                        {
                            Id = new Guid("16ee786e-a09d-4c5f-af4f-f618b065993b"),
                            Language = "uk",
                            Name = "медицина",
                            SkillId = new Guid("df8d22bb-6bfd-425a-816a-aa8a33d4356f")
                        },
                        new
                        {
                            Id = new Guid("9bcce7bf-6622-4485-849c-8af13a750d88"),
                            Language = "en",
                            Name = "cooking",
                            SkillId = new Guid("c848cfdd-7bd8-4074-a13c-1124a36fbce8")
                        },
                        new
                        {
                            Id = new Guid("ffca5159-5c49-4a7f-9ab7-fb9e481e28ad"),
                            Language = "uk",
                            Name = "кулінарія",
                            SkillId = new Guid("c848cfdd-7bd8-4074-a13c-1124a36fbce8")
                        },
                        new
                        {
                            Id = new Guid("6cbd7f6f-7933-4036-a7cd-4dbaa04fe870"),
                            Language = "en",
                            Name = "building",
                            SkillId = new Guid("3021e949-7883-4db6-a7f9-b2f6af961eca")
                        },
                        new
                        {
                            Id = new Guid("0213d5ac-be7a-4197-b69a-e72baf4c07cd"),
                            Language = "uk",
                            Name = "будівництво",
                            SkillId = new Guid("3021e949-7883-4db6-a7f9-b2f6af961eca")
                        },
                        new
                        {
                            Id = new Guid("81f76fc1-5033-4d53-9e36-523f9fa5698c"),
                            Language = "en",
                            Name = "psychology",
                            SkillId = new Guid("9e12ad3c-ff8e-4766-aa64-dc779728217b")
                        },
                        new
                        {
                            Id = new Guid("8802dd38-7055-4647-9c0d-dfc02fbe9e64"),
                            Language = "uk",
                            Name = "психологія",
                            SkillId = new Guid("9e12ad3c-ff8e-4766-aa64-dc779728217b")
                        });
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7c8b2f83-ffb4-46b7-bea6-38716ad880ac"),
                            CityId = new Guid("ccc7e347-e853-402a-b58f-7722469f4218"),
                            DateOfBirth = new DateTime(2023, 5, 25, 16, 8, 53, 499, DateTimeKind.Local).AddTicks(2040),
                            FirstName = "the first",
                            LastName = "admin",
                            Login = "ourfirstadmin",
                            Password = "Rk/ryiBNbnHx+s9i1IveCNNw4axYPQHm4T1eratfQlg=",
                            Phone = "+11111111111",
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Document")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DocumentFormat")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("NULL");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ApplicationId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.HasOne("DAL.Entities.Category", "Category")
                        .WithMany("Applications")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("Applications")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationDocument", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("ApplicationDocuments")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationSkill", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("ApplicationSkills")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("ApplicationSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DAL.Entities.CategoryTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Category", "Category")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("CityTranslations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("CountryTranslations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.Donate", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Donates")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.HasOne("DAL.Entities.Volunteer", "Volunteer")
                        .WithMany("Messages")
                        .HasForeignKey("VolunteerUserId", "VolunteerApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("DAL.Entities.Notification", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Notifications")
                        .HasForeignKey("ApplictionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "UserRecipient")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("UserRecipientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "UserSender")
                        .WithMany("SentNotifications")
                        .HasForeignKey("UserSenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("UserRecipient");

                    b.Navigation("UserSender");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithOne("ProfilePicture")
                        .HasForeignKey("DAL.Entities.ProfilePicture", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("SkillTranslations")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Volunteers")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Volunteers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Navigation("ApplicationDocuments");

                    b.Navigation("ApplicationSkills");

                    b.Navigation("Donates");

                    b.Navigation("Notifications");

                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("CategoryTranslations");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("CityTranslations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("CountryTranslations");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Navigation("ApplicationSkills");

                    b.Navigation("SkillTranslations");

                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ProfilePicture");

                    b.Navigation("ReceivedNotifications");

                    b.Navigation("SentNotifications");

                    b.Navigation("UserSkills");

                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
