// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(VolunteerNetServerDBContext))]
    [Migration("20230509112850_NewFieldsUserKind")]
    partial class NewFieldsUserKind
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("CurrentSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<string>("OwnerCardName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequiredNumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<decimal?>("RequiredSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationSkill", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("ApplicationSkills");
                });

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e56bd4aa-ec3e-48b0-b222-08df9f5b4cb5"),
                            Title = "health care"
                        },
                        new
                        {
                            Id = new Guid("0323ec1b-0b8d-4706-8a1b-1e9d92c63bae"),
                            Title = "education"
                        },
                        new
                        {
                            Id = new Guid("88c4fe45-a508-4905-adec-316c8fa44589"),
                            Title = "sports and physical culture"
                        },
                        new
                        {
                            Id = new Guid("f7892204-0c6e-4ebd-9a70-d4da466ec9c6"),
                            Title = "culture and art"
                        },
                        new
                        {
                            Id = new Guid("1be41040-6cc2-4993-b8c5-10dde5f0b8fa"),
                            Title = "social programs"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CategoryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DescriptionCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c8de60f7-e9c0-4e80-842a-15f3192f0c7e"),
                            CategoryId = new Guid("e56bd4aa-ec3e-48b0-b222-08df9f5b4cb5"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "health care"
                        },
                        new
                        {
                            Id = new Guid("1f9b7276-22d1-4676-9e6b-80fc4ef2aa06"),
                            CategoryId = new Guid("e56bd4aa-ec3e-48b0-b222-08df9f5b4cb5"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "охорона здоров'я"
                        },
                        new
                        {
                            Id = new Guid("be23a6e0-26a9-4f2d-9ca7-54a456f2fdd1"),
                            CategoryId = new Guid("0323ec1b-0b8d-4706-8a1b-1e9d92c63bae"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "education"
                        },
                        new
                        {
                            Id = new Guid("b326d046-012a-4b0b-919d-5dd77e0c8f4f"),
                            CategoryId = new Guid("0323ec1b-0b8d-4706-8a1b-1e9d92c63bae"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "освіта"
                        },
                        new
                        {
                            Id = new Guid("c5335de8-ccf9-417d-97d0-7bc9ee971118"),
                            CategoryId = new Guid("88c4fe45-a508-4905-adec-316c8fa44589"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "sport and physical culture"
                        },
                        new
                        {
                            Id = new Guid("592871e8-efb7-49cb-9b4f-f1af3a9ab3b4"),
                            CategoryId = new Guid("88c4fe45-a508-4905-adec-316c8fa44589"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "спорт та фізична культура"
                        },
                        new
                        {
                            Id = new Guid("90a08022-41b8-43a7-8f58-9a9eb9ad7050"),
                            CategoryId = new Guid("f7892204-0c6e-4ebd-9a70-d4da466ec9c6"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "culture and art"
                        },
                        new
                        {
                            Id = new Guid("c7bb9357-cf95-4e12-82dc-a1610fcbc69e"),
                            CategoryId = new Guid("f7892204-0c6e-4ebd-9a70-d4da466ec9c6"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "культура та мистецтво"
                        },
                        new
                        {
                            Id = new Guid("057c405c-fbda-46ac-9210-afb0f0210954"),
                            CategoryId = new Guid("1be41040-6cc2-4993-b8c5-10dde5f0b8fa"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "social programs"
                        },
                        new
                        {
                            Id = new Guid("38ee95e8-a29b-4fc3-8db7-89816b2fcd21"),
                            CategoryId = new Guid("1be41040-6cc2-4993-b8c5-10dde5f0b8fa"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "соціальні програми"
                        });
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("03348147-463d-474b-b5d9-bf78cc9948bc"),
                            CountryId = new Guid("a1f93efe-5c0d-4422-8ea6-893e66ea274c"),
                            ISO = "vi"
                        },
                        new
                        {
                            Id = new Guid("d32885f3-34ad-412c-8e7a-6c766ead174a"),
                            CountryId = new Guid("a1f93efe-5c0d-4422-8ea6-893e66ea274c"),
                            ISO = "dn"
                        },
                        new
                        {
                            Id = new Guid("25dcdda2-205e-49e8-bee6-5ebf58fb28ee"),
                            CountryId = new Guid("a1f93efe-5c0d-4422-8ea6-893e66ea274c"),
                            ISO = "zhy"
                        },
                        new
                        {
                            Id = new Guid("bb71fe23-e9d5-407c-939b-8801f8229f77"),
                            CountryId = new Guid("a1f93efe-5c0d-4422-8ea6-893e66ea274c"),
                            ISO = "zp"
                        },
                        new
                        {
                            Id = new Guid("a415c35b-8aed-4ff5-a29c-29fcf59e0e1d"),
                            CountryId = new Guid("a1f93efe-5c0d-4422-8ea6-893e66ea274c"),
                            ISO = "if"
                        },
                        new
                        {
                            Id = new Guid("704c2356-852f-4db7-9e6c-8d60d1490ff5"),
                            CountryId = new Guid("a1f93efe-5c0d-4422-8ea6-893e66ea274c"),
                            ISO = "ky"
                        },
                        new
                        {
                            Id = new Guid("06a71cda-7f15-4606-9ddc-8c5d5f533f2b"),
                            CountryId = new Guid("a1f93efe-5c0d-4422-8ea6-893e66ea274c"),
                            ISO = "kr"
                        },
                        new
                        {
                            Id = new Guid("614f9be8-bf8f-4cbd-8556-393d1c1d9400"),
                            CountryId = new Guid("a1f93efe-5c0d-4422-8ea6-893e66ea274c"),
                            ISO = "lut"
                        },
                        new
                        {
                            Id = new Guid("8c978646-aae0-4aba-908c-387c3f5c3642"),
                            CountryId = new Guid("a1f93efe-5c0d-4422-8ea6-893e66ea274c"),
                            ISO = "lv"
                        },
                        new
                        {
                            Id = new Guid("4675b2c3-b057-4aa6-b9ad-a5201ce0e543"),
                            CountryId = new Guid("a1f93efe-5c0d-4422-8ea6-893e66ea274c"),
                            ISO = "my"
                        },
                        new
                        {
                            Id = new Guid("55a19903-61bf-4bc4-8aa8-cfba99befd13"),
                            CountryId = new Guid("a1f93efe-5c0d-4422-8ea6-893e66ea274c"),
                            ISO = "od"
                        },
                        new
                        {
                            Id = new Guid("110a1829-18a6-4411-8bb3-0f011e2141e3"),
                            CountryId = new Guid("a1f93efe-5c0d-4422-8ea6-893e66ea274c"),
                            ISO = "pol"
                        },
                        new
                        {
                            Id = new Guid("d3ae4ee5-997e-4b45-b4a9-3580cfc88ff5"),
                            CountryId = new Guid("a1f93efe-5c0d-4422-8ea6-893e66ea274c"),
                            ISO = "ri"
                        },
                        new
                        {
                            Id = new Guid("9ab39e71-3ab3-437d-877e-f7d9c2f6b980"),
                            CountryId = new Guid("a1f93efe-5c0d-4422-8ea6-893e66ea274c"),
                            ISO = "su"
                        },
                        new
                        {
                            Id = new Guid("a62df26c-80b8-459e-94f7-84be3b1e98d0"),
                            CountryId = new Guid("a1f93efe-5c0d-4422-8ea6-893e66ea274c"),
                            ISO = "ter"
                        },
                        new
                        {
                            Id = new Guid("d437e057-e75e-4f12-bb16-feef09e3f979"),
                            CountryId = new Guid("a1f93efe-5c0d-4422-8ea6-893e66ea274c"),
                            ISO = "uzh"
                        },
                        new
                        {
                            Id = new Guid("8819f0f2-7ef7-4acc-a1fa-50fd4eb1db15"),
                            CountryId = new Guid("a1f93efe-5c0d-4422-8ea6-893e66ea274c"),
                            ISO = "khar"
                        },
                        new
                        {
                            Id = new Guid("c8df4f8b-8475-4ac2-86c5-c49cabbb4af5"),
                            CountryId = new Guid("a1f93efe-5c0d-4422-8ea6-893e66ea274c"),
                            ISO = "kher"
                        },
                        new
                        {
                            Id = new Guid("b083d1aa-5a6e-42a1-ba19-e072e46ad7de"),
                            CountryId = new Guid("a1f93efe-5c0d-4422-8ea6-893e66ea274c"),
                            ISO = "khm"
                        },
                        new
                        {
                            Id = new Guid("d7c98954-541e-4355-9832-fc51977c2b19"),
                            CountryId = new Guid("a1f93efe-5c0d-4422-8ea6-893e66ea274c"),
                            ISO = "chk"
                        },
                        new
                        {
                            Id = new Guid("94300440-d16c-4303-82d2-a50083457788"),
                            CountryId = new Guid("a1f93efe-5c0d-4422-8ea6-893e66ea274c"),
                            ISO = "chv"
                        },
                        new
                        {
                            Id = new Guid("69a31abd-568c-470f-bc9a-31235fd7dfcc"),
                            CountryId = new Guid("a1f93efe-5c0d-4422-8ea6-893e66ea274c"),
                            ISO = "chh"
                        },
                        new
                        {
                            Id = new Guid("33ab6502-c01e-428b-a67d-427dd076e5ee"),
                            CountryId = new Guid("bd498d1a-d1c4-41f1-8cc9-e77fbf2fe74a"),
                            ISO = "var"
                        },
                        new
                        {
                            Id = new Guid("55a7e806-9154-4dab-89e7-317493ef7d78"),
                            CountryId = new Guid("bd498d1a-d1c4-41f1-8cc9-e77fbf2fe74a"),
                            ISO = "lub"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("CityTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b0ddded1-f4d1-475b-be3f-2db5f24b0a4e"),
                            CityId = new Guid("03348147-463d-474b-b5d9-bf78cc9948bc"),
                            Language = "uk",
                            Name = "Вінниця"
                        },
                        new
                        {
                            Id = new Guid("35dd3758-a28d-4d8b-9d91-d4d30d06da4a"),
                            CityId = new Guid("d32885f3-34ad-412c-8e7a-6c766ead174a"),
                            Language = "uk",
                            Name = "Дніпро"
                        },
                        new
                        {
                            Id = new Guid("9fad5fb9-1031-467c-b85e-3c18ed297a2e"),
                            CityId = new Guid("25dcdda2-205e-49e8-bee6-5ebf58fb28ee"),
                            Language = "uk",
                            Name = "Житомир"
                        },
                        new
                        {
                            Id = new Guid("1089692c-37f9-4191-a0f6-1aac42d0715f"),
                            CityId = new Guid("bb71fe23-e9d5-407c-939b-8801f8229f77"),
                            Language = "uk",
                            Name = "Запоріжжя"
                        },
                        new
                        {
                            Id = new Guid("fc383559-37fe-472b-883a-575115e8bada"),
                            CityId = new Guid("a415c35b-8aed-4ff5-a29c-29fcf59e0e1d"),
                            Language = "uk",
                            Name = "Івано-Франківськ"
                        },
                        new
                        {
                            Id = new Guid("d3c589b0-28e7-4e6c-b4ea-657ab51513f4"),
                            CityId = new Guid("704c2356-852f-4db7-9e6c-8d60d1490ff5"),
                            Language = "uk",
                            Name = "Київ"
                        },
                        new
                        {
                            Id = new Guid("b627344a-33a6-4df8-9b47-be4d0d53227d"),
                            CityId = new Guid("06a71cda-7f15-4606-9ddc-8c5d5f533f2b"),
                            Language = "uk",
                            Name = "Кропивницький"
                        },
                        new
                        {
                            Id = new Guid("f6510e9e-0aa0-4532-98ea-ab28beaa6517"),
                            CityId = new Guid("614f9be8-bf8f-4cbd-8556-393d1c1d9400"),
                            Language = "uk",
                            Name = "Луцьк"
                        },
                        new
                        {
                            Id = new Guid("a7add74d-5f2c-407a-8752-bcb2fcf8dcdd"),
                            CityId = new Guid("8c978646-aae0-4aba-908c-387c3f5c3642"),
                            Language = "uk",
                            Name = "Львів"
                        },
                        new
                        {
                            Id = new Guid("472842a8-b1b6-4115-9b65-e649ba12d9c2"),
                            CityId = new Guid("4675b2c3-b057-4aa6-b9ad-a5201ce0e543"),
                            Language = "uk",
                            Name = "Миколаїв"
                        },
                        new
                        {
                            Id = new Guid("061970a5-6713-432f-a03d-1e8815d06559"),
                            CityId = new Guid("55a19903-61bf-4bc4-8aa8-cfba99befd13"),
                            Language = "uk",
                            Name = "Одеса"
                        },
                        new
                        {
                            Id = new Guid("9323942a-5282-442a-b1b6-7d8b3ede42f3"),
                            CityId = new Guid("110a1829-18a6-4411-8bb3-0f011e2141e3"),
                            Language = "uk",
                            Name = "Полтава"
                        },
                        new
                        {
                            Id = new Guid("743f3964-441b-4bb0-a583-f31d184f79f7"),
                            CityId = new Guid("d3ae4ee5-997e-4b45-b4a9-3580cfc88ff5"),
                            Language = "uk",
                            Name = "Рівне"
                        },
                        new
                        {
                            Id = new Guid("0cb4c385-df2f-4566-91f5-05d6fc1a27d3"),
                            CityId = new Guid("9ab39e71-3ab3-437d-877e-f7d9c2f6b980"),
                            Language = "uk",
                            Name = "Суми"
                        },
                        new
                        {
                            Id = new Guid("28822c41-9c02-4ab2-890e-b5ba24e52627"),
                            CityId = new Guid("a62df26c-80b8-459e-94f7-84be3b1e98d0"),
                            Language = "uk",
                            Name = "Тернопіль"
                        },
                        new
                        {
                            Id = new Guid("9f326712-b8b7-45b3-a0d2-e4eb85f42081"),
                            CityId = new Guid("d437e057-e75e-4f12-bb16-feef09e3f979"),
                            Language = "uk",
                            Name = "Ужгород"
                        },
                        new
                        {
                            Id = new Guid("b17ddd51-a592-4f4b-843f-eb0a9fa40852"),
                            CityId = new Guid("8819f0f2-7ef7-4acc-a1fa-50fd4eb1db15"),
                            Language = "uk",
                            Name = "Харків"
                        },
                        new
                        {
                            Id = new Guid("bb6ce002-0159-47ce-abd4-d5395b9ce6bc"),
                            CityId = new Guid("c8df4f8b-8475-4ac2-86c5-c49cabbb4af5"),
                            Language = "uk",
                            Name = "Херсон"
                        },
                        new
                        {
                            Id = new Guid("a92521b4-edaa-4c82-b08b-1d1372e119df"),
                            CityId = new Guid("b083d1aa-5a6e-42a1-ba19-e072e46ad7de"),
                            Language = "uk",
                            Name = "Хмельницький"
                        },
                        new
                        {
                            Id = new Guid("964ee4f4-f914-4e51-ba4b-57c7060de6a8"),
                            CityId = new Guid("d7c98954-541e-4355-9832-fc51977c2b19"),
                            Language = "uk",
                            Name = "Черкаси"
                        },
                        new
                        {
                            Id = new Guid("6c19ec38-d525-458f-8c99-5f606f2c9b5e"),
                            CityId = new Guid("94300440-d16c-4303-82d2-a50083457788"),
                            Language = "uk",
                            Name = "Чернівці"
                        },
                        new
                        {
                            Id = new Guid("c344bc35-2cd1-4326-b1ce-72de264b3075"),
                            CityId = new Guid("69a31abd-568c-470f-bc9a-31235fd7dfcc"),
                            Language = "uk",
                            Name = "Чернігів"
                        },
                        new
                        {
                            Id = new Guid("de471fbd-3f7b-46f7-95b1-e54741f2d137"),
                            CityId = new Guid("03348147-463d-474b-b5d9-bf78cc9948bc"),
                            Language = "en",
                            Name = "Vinnytsia"
                        },
                        new
                        {
                            Id = new Guid("8af579aa-a644-48c3-8b6e-b082b145123f"),
                            CityId = new Guid("d32885f3-34ad-412c-8e7a-6c766ead174a"),
                            Language = "en",
                            Name = "Dnipro"
                        },
                        new
                        {
                            Id = new Guid("51192cb6-3155-460b-b923-45717e66cd68"),
                            CityId = new Guid("25dcdda2-205e-49e8-bee6-5ebf58fb28ee"),
                            Language = "en",
                            Name = "Zhytomyr"
                        },
                        new
                        {
                            Id = new Guid("69bc6ad8-eadc-4032-8ec2-97126ef438f8"),
                            CityId = new Guid("bb71fe23-e9d5-407c-939b-8801f8229f77"),
                            Language = "en",
                            Name = "Zaporizhzhia"
                        },
                        new
                        {
                            Id = new Guid("6507b9be-14e7-4b0d-bc95-98c9a7ee6959"),
                            CityId = new Guid("a415c35b-8aed-4ff5-a29c-29fcf59e0e1d"),
                            Language = "en",
                            Name = "Ivano-Frankivsk"
                        },
                        new
                        {
                            Id = new Guid("36dcd719-af8b-447c-ac29-2c3aef2588d8"),
                            CityId = new Guid("704c2356-852f-4db7-9e6c-8d60d1490ff5"),
                            Language = "en",
                            Name = "Kyiv"
                        },
                        new
                        {
                            Id = new Guid("ccd57c96-5b0f-4605-8b9d-c6879af254cb"),
                            CityId = new Guid("06a71cda-7f15-4606-9ddc-8c5d5f533f2b"),
                            Language = "en",
                            Name = "Kropyvnytskyi"
                        },
                        new
                        {
                            Id = new Guid("9fb66373-374b-4187-bc75-a0fea62fa828"),
                            CityId = new Guid("614f9be8-bf8f-4cbd-8556-393d1c1d9400"),
                            Language = "en",
                            Name = "Lutsk"
                        },
                        new
                        {
                            Id = new Guid("bcfbfb72-5f07-433e-a0ea-3ca1e50fb222"),
                            CityId = new Guid("8c978646-aae0-4aba-908c-387c3f5c3642"),
                            Language = "en",
                            Name = "Lviv"
                        },
                        new
                        {
                            Id = new Guid("86e6e216-8778-4e57-b1c5-2a7ce9cf8987"),
                            CityId = new Guid("4675b2c3-b057-4aa6-b9ad-a5201ce0e543"),
                            Language = "en",
                            Name = "Mykolaiv"
                        },
                        new
                        {
                            Id = new Guid("eb04929b-c4a2-4936-998d-646598efcd64"),
                            CityId = new Guid("55a19903-61bf-4bc4-8aa8-cfba99befd13"),
                            Language = "en",
                            Name = "Odesa"
                        },
                        new
                        {
                            Id = new Guid("1d47ec2b-294f-485a-9a26-52b662dfa329"),
                            CityId = new Guid("110a1829-18a6-4411-8bb3-0f011e2141e3"),
                            Language = "en",
                            Name = "Poltava"
                        },
                        new
                        {
                            Id = new Guid("102035fc-f765-4d79-a1f9-27f3b5881f9c"),
                            CityId = new Guid("d3ae4ee5-997e-4b45-b4a9-3580cfc88ff5"),
                            Language = "en",
                            Name = "Rivne"
                        },
                        new
                        {
                            Id = new Guid("c860fe45-a1c7-42b0-baae-30f8a3fb15dd"),
                            CityId = new Guid("9ab39e71-3ab3-437d-877e-f7d9c2f6b980"),
                            Language = "en",
                            Name = "Sumy"
                        },
                        new
                        {
                            Id = new Guid("da7c1374-8aa3-4abf-8c41-304b7b7df66b"),
                            CityId = new Guid("a62df26c-80b8-459e-94f7-84be3b1e98d0"),
                            Language = "en",
                            Name = "Ternopil"
                        },
                        new
                        {
                            Id = new Guid("1ef6ad3e-4a27-4023-9d67-755367085d9c"),
                            CityId = new Guid("d437e057-e75e-4f12-bb16-feef09e3f979"),
                            Language = "en",
                            Name = "Uzhhorod"
                        },
                        new
                        {
                            Id = new Guid("eba6c61f-b93c-439b-8c65-ed328628e24f"),
                            CityId = new Guid("8819f0f2-7ef7-4acc-a1fa-50fd4eb1db15"),
                            Language = "en",
                            Name = "Kharkiv"
                        },
                        new
                        {
                            Id = new Guid("068275e1-ae56-47e0-854f-a10505666a66"),
                            CityId = new Guid("c8df4f8b-8475-4ac2-86c5-c49cabbb4af5"),
                            Language = "en",
                            Name = "Kherson"
                        },
                        new
                        {
                            Id = new Guid("7a5ca893-1daa-4c76-bcd7-6d1a38c6c2cf"),
                            CityId = new Guid("b083d1aa-5a6e-42a1-ba19-e072e46ad7de"),
                            Language = "en",
                            Name = "Khmelnytskyi"
                        },
                        new
                        {
                            Id = new Guid("2c0e1fdd-2121-4feb-b1b1-1efdb1b1fa8b"),
                            CityId = new Guid("d7c98954-541e-4355-9832-fc51977c2b19"),
                            Language = "en",
                            Name = "Cherkasy"
                        },
                        new
                        {
                            Id = new Guid("6a1bf68d-294b-433b-aa56-93cd10f518ea"),
                            CityId = new Guid("94300440-d16c-4303-82d2-a50083457788"),
                            Language = "en",
                            Name = "Chernivtsi"
                        },
                        new
                        {
                            Id = new Guid("b3c1cc5d-1044-434b-91c7-da99ec648d36"),
                            CityId = new Guid("69a31abd-568c-470f-bc9a-31235fd7dfcc"),
                            Language = "en",
                            Name = "Chernihiv"
                        },
                        new
                        {
                            Id = new Guid("38da05e7-f728-4fa4-bb60-60590716e6f5"),
                            CityId = new Guid("33ab6502-c01e-428b-a67d-427dd076e5ee"),
                            Language = "uk",
                            Name = "Варшава"
                        },
                        new
                        {
                            Id = new Guid("aefaa737-366f-42e0-9175-5259a40f6ce2"),
                            CityId = new Guid("55a7e806-9154-4dab-89e7-317493ef7d78"),
                            Language = "uk",
                            Name = "Люблін"
                        },
                        new
                        {
                            Id = new Guid("29ea9130-748b-406e-af66-7753ce82b1e8"),
                            CityId = new Guid("33ab6502-c01e-428b-a67d-427dd076e5ee"),
                            Language = "en",
                            Name = "Varshava"
                        },
                        new
                        {
                            Id = new Guid("e06b8bfe-6915-4b6f-ab89-c37e48d7e919"),
                            CityId = new Guid("55a7e806-9154-4dab-89e7-317493ef7d78"),
                            Language = "en",
                            Name = "Lublin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1f93efe-5c0d-4422-8ea6-893e66ea274c"),
                            ISO = "uk"
                        },
                        new
                        {
                            Id = new Guid("bd498d1a-d1c4-41f1-8cc9-e77fbf2fe74a"),
                            ISO = "pl"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CountryTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("724e76b4-34f9-4c1a-851d-0ee33824720d"),
                            CountryId = new Guid("a1f93efe-5c0d-4422-8ea6-893e66ea274c"),
                            Language = "en",
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("6e727552-2ebf-46c7-944b-c0f000397ef5"),
                            CountryId = new Guid("a1f93efe-5c0d-4422-8ea6-893e66ea274c"),
                            Language = "uk",
                            Name = "Україна"
                        },
                        new
                        {
                            Id = new Guid("3c9b75cb-cfe1-4c7f-872d-08c402fa5039"),
                            CountryId = new Guid("bd498d1a-d1c4-41f1-8cc9-e77fbf2fe74a"),
                            Language = "en",
                            Name = "Poland"
                        },
                        new
                        {
                            Id = new Guid("0c76db30-f262-4e89-b229-5ddd5ecc9757"),
                            CountryId = new Guid("bd498d1a-d1c4-41f1-8cc9-e77fbf2fe74a"),
                            Language = "uk",
                            Name = "Польша"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VolunteerApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VolunteerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VolunteerUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VolunteerUserId", "VolunteerApplicationId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ProfilePictures");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("624a73d7-972e-464d-9b2f-2b8a1a990989"),
                            Title = "medicine"
                        },
                        new
                        {
                            Id = new Guid("e3a53e06-d7bc-48d9-bf95-623837022889"),
                            Title = "cooking"
                        },
                        new
                        {
                            Id = new Guid("0b1d0781-1485-4c23-abc0-44fa869fa2c3"),
                            Title = "building"
                        },
                        new
                        {
                            Id = new Guid("1cf52f96-8921-442d-8732-9cf8daa20a43"),
                            Title = "psychology"
                        });
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2f46eebc-cc96-4ce1-ab2e-314deacc458e"),
                            Language = "en",
                            Name = "medicine",
                            SkillId = new Guid("624a73d7-972e-464d-9b2f-2b8a1a990989")
                        },
                        new
                        {
                            Id = new Guid("8cd5a89d-0f10-44d6-b39c-ce0da0ec93a0"),
                            Language = "uk",
                            Name = "медицина",
                            SkillId = new Guid("624a73d7-972e-464d-9b2f-2b8a1a990989")
                        },
                        new
                        {
                            Id = new Guid("a3f98b53-1169-4223-bb8a-10d6510cbb8d"),
                            Language = "en",
                            Name = "cooking",
                            SkillId = new Guid("e3a53e06-d7bc-48d9-bf95-623837022889")
                        },
                        new
                        {
                            Id = new Guid("fdf254b7-e1b9-4699-8b80-9e85ff9680cd"),
                            Language = "uk",
                            Name = "кулінарія",
                            SkillId = new Guid("e3a53e06-d7bc-48d9-bf95-623837022889")
                        },
                        new
                        {
                            Id = new Guid("e6818cf0-e041-435c-9ca6-1ad07fce9e1e"),
                            Language = "en",
                            Name = "building",
                            SkillId = new Guid("0b1d0781-1485-4c23-abc0-44fa869fa2c3")
                        },
                        new
                        {
                            Id = new Guid("161eb0d0-cfbd-4f37-968c-a4236197fc01"),
                            Language = "uk",
                            Name = "будівництво",
                            SkillId = new Guid("0b1d0781-1485-4c23-abc0-44fa869fa2c3")
                        },
                        new
                        {
                            Id = new Guid("7e7cc42e-e692-4815-b826-c73282512164"),
                            Language = "en",
                            Name = "psychology",
                            SkillId = new Guid("1cf52f96-8921-442d-8732-9cf8daa20a43")
                        },
                        new
                        {
                            Id = new Guid("180ab13f-f131-48b0-94ed-2a57dd4cb5bc"),
                            Language = "uk",
                            Name = "психологія",
                            SkillId = new Guid("1cf52f96-8921-442d-8732-9cf8daa20a43")
                        });
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("36892ddd-d6a5-4069-acce-491092555d8c"),
                            CityId = new Guid("03348147-463d-474b-b5d9-bf78cc9948bc"),
                            DateOfBirth = new DateTime(2023, 5, 9, 14, 28, 49, 648, DateTimeKind.Local).AddTicks(8497),
                            FirstName = "the first",
                            LastName = "admin",
                            Login = "ourfirstadmin",
                            Password = "Rk/ryiBNbnHx+s9i1IveCNNw4axYPQHm4T1eratfQlg=",
                            Phone = "+11111111111",
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Document")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DocumentFormat")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("NULL");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ApplicationId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.HasOne("DAL.Entities.Category", "Category")
                        .WithMany("Applications")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("Applications")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationSkill", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("ApplicationSkills")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("ApplicationSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DAL.Entities.CategoryTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Category", "Category")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("CityTranslations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("CountryTranslations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.HasOne("DAL.Entities.Volunteer", "Volunteer")
                        .WithMany("Messages")
                        .HasForeignKey("VolunteerUserId", "VolunteerApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithOne("ProfilePicture")
                        .HasForeignKey("DAL.Entities.ProfilePicture", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("SkillTranslations")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Volunteers")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Volunteers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Navigation("ApplicationSkills");

                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("CategoryTranslations");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("CityTranslations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("CountryTranslations");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Navigation("ApplicationSkills");

                    b.Navigation("SkillTranslations");

                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ProfilePicture");

                    b.Navigation("UserSkills");

                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
