// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(VolunteerNetServerDBContext))]
    [Migration("20230524154154_TableDonate3")]
    partial class TableDonate3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("CurrentSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<string>("OwnerCardName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequiredNumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<decimal?>("RequiredSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationSkill", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("ApplicationSkills");
                });

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6d79b2b4-631a-42c6-85b8-a3243badfca5"),
                            Title = "health care"
                        },
                        new
                        {
                            Id = new Guid("20cddb48-d6de-446b-89a1-a85eca985f36"),
                            Title = "education"
                        },
                        new
                        {
                            Id = new Guid("c896fd70-54f1-431e-9c74-f280b1a440ed"),
                            Title = "sports and physical culture"
                        },
                        new
                        {
                            Id = new Guid("4458bf5f-6a02-4989-87e6-a1b5f9bf65c3"),
                            Title = "culture and art"
                        },
                        new
                        {
                            Id = new Guid("551d5c6c-2e68-414b-b5c4-2ff3bc1bb1ed"),
                            Title = "social programs"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CategoryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DescriptionCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3f0e3a26-aef0-4169-8e63-42b50fc0bb7b"),
                            CategoryId = new Guid("6d79b2b4-631a-42c6-85b8-a3243badfca5"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "health care"
                        },
                        new
                        {
                            Id = new Guid("fca39a5c-9213-4523-b7ee-dbc2bcc046cd"),
                            CategoryId = new Guid("6d79b2b4-631a-42c6-85b8-a3243badfca5"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "охорона здоров'я"
                        },
                        new
                        {
                            Id = new Guid("e78c333b-4e8d-40ad-a92e-a5eef686ed76"),
                            CategoryId = new Guid("20cddb48-d6de-446b-89a1-a85eca985f36"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "education"
                        },
                        new
                        {
                            Id = new Guid("8752a91f-7d61-47f2-9f18-8eb8cb911369"),
                            CategoryId = new Guid("20cddb48-d6de-446b-89a1-a85eca985f36"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "освіта"
                        },
                        new
                        {
                            Id = new Guid("84bda82a-2d10-49e7-a2c4-f4dfd95dd79e"),
                            CategoryId = new Guid("c896fd70-54f1-431e-9c74-f280b1a440ed"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "sport and physical culture"
                        },
                        new
                        {
                            Id = new Guid("9b3b768f-1805-4dcb-9ae3-15e11d838470"),
                            CategoryId = new Guid("c896fd70-54f1-431e-9c74-f280b1a440ed"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "спорт та фізична культура"
                        },
                        new
                        {
                            Id = new Guid("c3031883-2a2c-4d5a-befd-d39833fe54ab"),
                            CategoryId = new Guid("4458bf5f-6a02-4989-87e6-a1b5f9bf65c3"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "culture and art"
                        },
                        new
                        {
                            Id = new Guid("e3946940-d945-4c5b-8fa4-b5442b450e84"),
                            CategoryId = new Guid("4458bf5f-6a02-4989-87e6-a1b5f9bf65c3"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "культура та мистецтво"
                        },
                        new
                        {
                            Id = new Guid("fae61ff7-7f81-44c1-8b24-e85e02aa75b1"),
                            CategoryId = new Guid("551d5c6c-2e68-414b-b5c4-2ff3bc1bb1ed"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "social programs"
                        },
                        new
                        {
                            Id = new Guid("4a262d80-959d-4f98-83e9-c2054d9d2152"),
                            CategoryId = new Guid("551d5c6c-2e68-414b-b5c4-2ff3bc1bb1ed"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "соціальні програми"
                        });
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7529a5e9-85ac-42e5-b9ca-a9239ac400a0"),
                            CountryId = new Guid("80cfb84c-0aba-445a-b75a-1c8795e55030"),
                            ISO = "vi"
                        },
                        new
                        {
                            Id = new Guid("f96296bf-fbee-4e14-9963-e31a30506f82"),
                            CountryId = new Guid("80cfb84c-0aba-445a-b75a-1c8795e55030"),
                            ISO = "dn"
                        },
                        new
                        {
                            Id = new Guid("a62e2490-148d-4085-86bd-ca463ebd5dfa"),
                            CountryId = new Guid("80cfb84c-0aba-445a-b75a-1c8795e55030"),
                            ISO = "zhy"
                        },
                        new
                        {
                            Id = new Guid("0bfdd28f-e7e8-459d-911c-f33e71e61675"),
                            CountryId = new Guid("80cfb84c-0aba-445a-b75a-1c8795e55030"),
                            ISO = "zp"
                        },
                        new
                        {
                            Id = new Guid("43776fec-ddc3-4d5e-a7dc-d94ef2aa6b74"),
                            CountryId = new Guid("80cfb84c-0aba-445a-b75a-1c8795e55030"),
                            ISO = "if"
                        },
                        new
                        {
                            Id = new Guid("85cdee63-203f-4df1-84b9-5d4e75775036"),
                            CountryId = new Guid("80cfb84c-0aba-445a-b75a-1c8795e55030"),
                            ISO = "ky"
                        },
                        new
                        {
                            Id = new Guid("44d2778c-b524-4c8c-bb17-308822fd3ce1"),
                            CountryId = new Guid("80cfb84c-0aba-445a-b75a-1c8795e55030"),
                            ISO = "kr"
                        },
                        new
                        {
                            Id = new Guid("85428f6f-47a6-40a2-b59f-cbf0ede653fe"),
                            CountryId = new Guid("80cfb84c-0aba-445a-b75a-1c8795e55030"),
                            ISO = "lut"
                        },
                        new
                        {
                            Id = new Guid("ce62c23e-1118-429e-ac65-1ecc7ea6c31e"),
                            CountryId = new Guid("80cfb84c-0aba-445a-b75a-1c8795e55030"),
                            ISO = "lv"
                        },
                        new
                        {
                            Id = new Guid("7604d205-a0b6-413a-a1d5-400695c2de3a"),
                            CountryId = new Guid("80cfb84c-0aba-445a-b75a-1c8795e55030"),
                            ISO = "my"
                        },
                        new
                        {
                            Id = new Guid("05ab3bb5-d9fc-4708-9719-fa038c261e7f"),
                            CountryId = new Guid("80cfb84c-0aba-445a-b75a-1c8795e55030"),
                            ISO = "od"
                        },
                        new
                        {
                            Id = new Guid("5f29cc2f-9dca-45e0-a853-3d7de2460e62"),
                            CountryId = new Guid("80cfb84c-0aba-445a-b75a-1c8795e55030"),
                            ISO = "pol"
                        },
                        new
                        {
                            Id = new Guid("d62e7391-c442-45ab-9dfb-e46dfab141e9"),
                            CountryId = new Guid("80cfb84c-0aba-445a-b75a-1c8795e55030"),
                            ISO = "ri"
                        },
                        new
                        {
                            Id = new Guid("01f431e1-2fbd-49db-86bb-cfca3fa9e95a"),
                            CountryId = new Guid("80cfb84c-0aba-445a-b75a-1c8795e55030"),
                            ISO = "su"
                        },
                        new
                        {
                            Id = new Guid("ea443ff0-2c38-4669-82fb-a06adab38a5a"),
                            CountryId = new Guid("80cfb84c-0aba-445a-b75a-1c8795e55030"),
                            ISO = "ter"
                        },
                        new
                        {
                            Id = new Guid("8729a8b9-5431-4400-a98a-f5e276ac6e40"),
                            CountryId = new Guid("80cfb84c-0aba-445a-b75a-1c8795e55030"),
                            ISO = "uzh"
                        },
                        new
                        {
                            Id = new Guid("9417c40e-9f72-440b-9c44-6492c8f6a2c8"),
                            CountryId = new Guid("80cfb84c-0aba-445a-b75a-1c8795e55030"),
                            ISO = "khar"
                        },
                        new
                        {
                            Id = new Guid("60db1123-6676-4076-bef7-49f13c967881"),
                            CountryId = new Guid("80cfb84c-0aba-445a-b75a-1c8795e55030"),
                            ISO = "kher"
                        },
                        new
                        {
                            Id = new Guid("c64d78fe-dae0-493b-b489-d6e7162f3e50"),
                            CountryId = new Guid("80cfb84c-0aba-445a-b75a-1c8795e55030"),
                            ISO = "khm"
                        },
                        new
                        {
                            Id = new Guid("6ffaef27-f6a1-4b5e-acd8-e0318f604aa2"),
                            CountryId = new Guid("80cfb84c-0aba-445a-b75a-1c8795e55030"),
                            ISO = "chk"
                        },
                        new
                        {
                            Id = new Guid("50d80d35-1cf8-441c-bd7f-ec7ca97dd248"),
                            CountryId = new Guid("80cfb84c-0aba-445a-b75a-1c8795e55030"),
                            ISO = "chv"
                        },
                        new
                        {
                            Id = new Guid("3dd1adeb-7a0d-4c50-98a5-042e30903a83"),
                            CountryId = new Guid("80cfb84c-0aba-445a-b75a-1c8795e55030"),
                            ISO = "chh"
                        },
                        new
                        {
                            Id = new Guid("5d2efc8c-1c6f-4899-84f3-ca42ff4e5281"),
                            CountryId = new Guid("581bbe49-3b13-4540-9e48-737e90e4fd37"),
                            ISO = "var"
                        },
                        new
                        {
                            Id = new Guid("040a3d60-1f78-4b66-9b3f-53b7a35c11d2"),
                            CountryId = new Guid("581bbe49-3b13-4540-9e48-737e90e4fd37"),
                            ISO = "lub"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("CityTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("47248e50-0d8c-434d-b63c-2fff9f663f52"),
                            CityId = new Guid("7529a5e9-85ac-42e5-b9ca-a9239ac400a0"),
                            Language = "uk",
                            Name = "Вінниця"
                        },
                        new
                        {
                            Id = new Guid("79db28e0-09a0-4cc2-9a26-d82dca770fa4"),
                            CityId = new Guid("f96296bf-fbee-4e14-9963-e31a30506f82"),
                            Language = "uk",
                            Name = "Дніпро"
                        },
                        new
                        {
                            Id = new Guid("c38afea3-d969-4b0e-93d3-f176814ef904"),
                            CityId = new Guid("a62e2490-148d-4085-86bd-ca463ebd5dfa"),
                            Language = "uk",
                            Name = "Житомир"
                        },
                        new
                        {
                            Id = new Guid("55857d8b-e4f4-4a25-a61e-cd7b974d27f4"),
                            CityId = new Guid("0bfdd28f-e7e8-459d-911c-f33e71e61675"),
                            Language = "uk",
                            Name = "Запоріжжя"
                        },
                        new
                        {
                            Id = new Guid("41d9dffc-d3c9-4038-8674-9b9d423bfedd"),
                            CityId = new Guid("43776fec-ddc3-4d5e-a7dc-d94ef2aa6b74"),
                            Language = "uk",
                            Name = "Івано-Франківськ"
                        },
                        new
                        {
                            Id = new Guid("36287611-f266-4c51-8aa6-0323c0129065"),
                            CityId = new Guid("85cdee63-203f-4df1-84b9-5d4e75775036"),
                            Language = "uk",
                            Name = "Київ"
                        },
                        new
                        {
                            Id = new Guid("3b86e01e-fcb0-4860-8d7a-10f3cf078630"),
                            CityId = new Guid("44d2778c-b524-4c8c-bb17-308822fd3ce1"),
                            Language = "uk",
                            Name = "Кропивницький"
                        },
                        new
                        {
                            Id = new Guid("5389a7e2-c25a-45eb-b75a-8b2a381272e6"),
                            CityId = new Guid("85428f6f-47a6-40a2-b59f-cbf0ede653fe"),
                            Language = "uk",
                            Name = "Луцьк"
                        },
                        new
                        {
                            Id = new Guid("b951d9ae-d5fb-49c0-8f73-725a41790ca8"),
                            CityId = new Guid("ce62c23e-1118-429e-ac65-1ecc7ea6c31e"),
                            Language = "uk",
                            Name = "Львів"
                        },
                        new
                        {
                            Id = new Guid("82ac480f-5943-443d-b7b3-36c6c2077f04"),
                            CityId = new Guid("7604d205-a0b6-413a-a1d5-400695c2de3a"),
                            Language = "uk",
                            Name = "Миколаїв"
                        },
                        new
                        {
                            Id = new Guid("cad5cdba-20bb-4345-a4fb-1d92f370bbf2"),
                            CityId = new Guid("05ab3bb5-d9fc-4708-9719-fa038c261e7f"),
                            Language = "uk",
                            Name = "Одеса"
                        },
                        new
                        {
                            Id = new Guid("c8c0197c-9d19-4f76-814d-a01f7269a798"),
                            CityId = new Guid("5f29cc2f-9dca-45e0-a853-3d7de2460e62"),
                            Language = "uk",
                            Name = "Полтава"
                        },
                        new
                        {
                            Id = new Guid("4db7ac27-dd28-4d29-bbca-b7c992f01bd2"),
                            CityId = new Guid("d62e7391-c442-45ab-9dfb-e46dfab141e9"),
                            Language = "uk",
                            Name = "Рівне"
                        },
                        new
                        {
                            Id = new Guid("cc249cfb-1eca-442e-bede-6961c61e3c63"),
                            CityId = new Guid("01f431e1-2fbd-49db-86bb-cfca3fa9e95a"),
                            Language = "uk",
                            Name = "Суми"
                        },
                        new
                        {
                            Id = new Guid("713927e1-fd42-413c-a33e-e61cf4c81742"),
                            CityId = new Guid("ea443ff0-2c38-4669-82fb-a06adab38a5a"),
                            Language = "uk",
                            Name = "Тернопіль"
                        },
                        new
                        {
                            Id = new Guid("7dc8cbb2-bbda-48e4-8d11-472f459caf61"),
                            CityId = new Guid("8729a8b9-5431-4400-a98a-f5e276ac6e40"),
                            Language = "uk",
                            Name = "Ужгород"
                        },
                        new
                        {
                            Id = new Guid("67289dad-f6a3-42dc-a969-f04116401eba"),
                            CityId = new Guid("9417c40e-9f72-440b-9c44-6492c8f6a2c8"),
                            Language = "uk",
                            Name = "Харків"
                        },
                        new
                        {
                            Id = new Guid("3fb24829-0ee4-4292-9f87-7310959d4db7"),
                            CityId = new Guid("60db1123-6676-4076-bef7-49f13c967881"),
                            Language = "uk",
                            Name = "Херсон"
                        },
                        new
                        {
                            Id = new Guid("dd03d7d3-26b6-4fbc-b5cc-c1cef4824374"),
                            CityId = new Guid("c64d78fe-dae0-493b-b489-d6e7162f3e50"),
                            Language = "uk",
                            Name = "Хмельницький"
                        },
                        new
                        {
                            Id = new Guid("6a8278ae-32d0-4bad-9ced-246526440f0a"),
                            CityId = new Guid("6ffaef27-f6a1-4b5e-acd8-e0318f604aa2"),
                            Language = "uk",
                            Name = "Черкаси"
                        },
                        new
                        {
                            Id = new Guid("e7971890-1e47-4b71-8f15-5afcd6ea8399"),
                            CityId = new Guid("50d80d35-1cf8-441c-bd7f-ec7ca97dd248"),
                            Language = "uk",
                            Name = "Чернівці"
                        },
                        new
                        {
                            Id = new Guid("a8b8a5f0-01f0-46e1-add5-046426d9874a"),
                            CityId = new Guid("3dd1adeb-7a0d-4c50-98a5-042e30903a83"),
                            Language = "uk",
                            Name = "Чернігів"
                        },
                        new
                        {
                            Id = new Guid("db926800-104b-4974-b0c6-75fddc236027"),
                            CityId = new Guid("7529a5e9-85ac-42e5-b9ca-a9239ac400a0"),
                            Language = "en",
                            Name = "Vinnytsia"
                        },
                        new
                        {
                            Id = new Guid("55db1fbf-6933-4f44-886f-9ffc5aa46f3d"),
                            CityId = new Guid("f96296bf-fbee-4e14-9963-e31a30506f82"),
                            Language = "en",
                            Name = "Dnipro"
                        },
                        new
                        {
                            Id = new Guid("c5d575f7-701e-485d-b4f3-5f26c4763ecd"),
                            CityId = new Guid("a62e2490-148d-4085-86bd-ca463ebd5dfa"),
                            Language = "en",
                            Name = "Zhytomyr"
                        },
                        new
                        {
                            Id = new Guid("3bc5e13b-e095-483c-a3d9-d8c0fd27949b"),
                            CityId = new Guid("0bfdd28f-e7e8-459d-911c-f33e71e61675"),
                            Language = "en",
                            Name = "Zaporizhzhia"
                        },
                        new
                        {
                            Id = new Guid("abdbacc2-9495-434d-988f-fb00a996aa5d"),
                            CityId = new Guid("43776fec-ddc3-4d5e-a7dc-d94ef2aa6b74"),
                            Language = "en",
                            Name = "Ivano-Frankivsk"
                        },
                        new
                        {
                            Id = new Guid("11528011-3c80-4c66-b033-1aaf10e31cf2"),
                            CityId = new Guid("85cdee63-203f-4df1-84b9-5d4e75775036"),
                            Language = "en",
                            Name = "Kyiv"
                        },
                        new
                        {
                            Id = new Guid("b9a7de53-9a45-40a4-94a4-452df99263c5"),
                            CityId = new Guid("44d2778c-b524-4c8c-bb17-308822fd3ce1"),
                            Language = "en",
                            Name = "Kropyvnytskyi"
                        },
                        new
                        {
                            Id = new Guid("7a416bfd-c40a-4f53-9fdb-432d914edcb8"),
                            CityId = new Guid("85428f6f-47a6-40a2-b59f-cbf0ede653fe"),
                            Language = "en",
                            Name = "Lutsk"
                        },
                        new
                        {
                            Id = new Guid("06381fb6-ca1c-4318-bd0f-a56410eec4cb"),
                            CityId = new Guid("ce62c23e-1118-429e-ac65-1ecc7ea6c31e"),
                            Language = "en",
                            Name = "Lviv"
                        },
                        new
                        {
                            Id = new Guid("2e42c1bd-53b8-4c79-a1cb-1763d4dd519a"),
                            CityId = new Guid("7604d205-a0b6-413a-a1d5-400695c2de3a"),
                            Language = "en",
                            Name = "Mykolaiv"
                        },
                        new
                        {
                            Id = new Guid("44fb5961-3bbe-41e9-99e1-30f0f2019aba"),
                            CityId = new Guid("05ab3bb5-d9fc-4708-9719-fa038c261e7f"),
                            Language = "en",
                            Name = "Odesa"
                        },
                        new
                        {
                            Id = new Guid("ef046986-1124-4f2d-8492-ab6973c58516"),
                            CityId = new Guid("5f29cc2f-9dca-45e0-a853-3d7de2460e62"),
                            Language = "en",
                            Name = "Poltava"
                        },
                        new
                        {
                            Id = new Guid("b353f997-ce79-40a5-a0d7-e492d37f8ab9"),
                            CityId = new Guid("d62e7391-c442-45ab-9dfb-e46dfab141e9"),
                            Language = "en",
                            Name = "Rivne"
                        },
                        new
                        {
                            Id = new Guid("6a430fb1-388e-41ef-91df-d781fff26023"),
                            CityId = new Guid("01f431e1-2fbd-49db-86bb-cfca3fa9e95a"),
                            Language = "en",
                            Name = "Sumy"
                        },
                        new
                        {
                            Id = new Guid("3f787347-75d3-41d5-90ad-afbae0e5ec22"),
                            CityId = new Guid("ea443ff0-2c38-4669-82fb-a06adab38a5a"),
                            Language = "en",
                            Name = "Ternopil"
                        },
                        new
                        {
                            Id = new Guid("f80197b8-8fad-4222-aab4-813fa7088b52"),
                            CityId = new Guid("8729a8b9-5431-4400-a98a-f5e276ac6e40"),
                            Language = "en",
                            Name = "Uzhhorod"
                        },
                        new
                        {
                            Id = new Guid("38c404b7-fb67-4c6c-b418-babe7d6be3aa"),
                            CityId = new Guid("9417c40e-9f72-440b-9c44-6492c8f6a2c8"),
                            Language = "en",
                            Name = "Kharkiv"
                        },
                        new
                        {
                            Id = new Guid("fb2a04cb-656c-4ac8-9c6d-c20ebc394827"),
                            CityId = new Guid("60db1123-6676-4076-bef7-49f13c967881"),
                            Language = "en",
                            Name = "Kherson"
                        },
                        new
                        {
                            Id = new Guid("9b15d353-82d7-4aee-b54b-3686adab6688"),
                            CityId = new Guid("c64d78fe-dae0-493b-b489-d6e7162f3e50"),
                            Language = "en",
                            Name = "Khmelnytskyi"
                        },
                        new
                        {
                            Id = new Guid("d36612ca-e5c3-4197-af6c-f10b41c64851"),
                            CityId = new Guid("6ffaef27-f6a1-4b5e-acd8-e0318f604aa2"),
                            Language = "en",
                            Name = "Cherkasy"
                        },
                        new
                        {
                            Id = new Guid("d535e37c-1fb7-443f-a19a-83afcceb35a2"),
                            CityId = new Guid("50d80d35-1cf8-441c-bd7f-ec7ca97dd248"),
                            Language = "en",
                            Name = "Chernivtsi"
                        },
                        new
                        {
                            Id = new Guid("b8d8d160-bb99-4548-b262-baad9b6d7320"),
                            CityId = new Guid("3dd1adeb-7a0d-4c50-98a5-042e30903a83"),
                            Language = "en",
                            Name = "Chernihiv"
                        },
                        new
                        {
                            Id = new Guid("e36a7573-eab0-45a3-b9b4-32f262c6cbda"),
                            CityId = new Guid("5d2efc8c-1c6f-4899-84f3-ca42ff4e5281"),
                            Language = "uk",
                            Name = "Варшава"
                        },
                        new
                        {
                            Id = new Guid("129a8579-9ee9-49e5-bb71-480fad69f018"),
                            CityId = new Guid("040a3d60-1f78-4b66-9b3f-53b7a35c11d2"),
                            Language = "uk",
                            Name = "Люблін"
                        },
                        new
                        {
                            Id = new Guid("4a5c4f97-7a80-455a-a5aa-e5506c323c8e"),
                            CityId = new Guid("5d2efc8c-1c6f-4899-84f3-ca42ff4e5281"),
                            Language = "en",
                            Name = "Varshava"
                        },
                        new
                        {
                            Id = new Guid("674e2269-b9a5-42b3-ba58-00c32e6c93ab"),
                            CityId = new Guid("040a3d60-1f78-4b66-9b3f-53b7a35c11d2"),
                            Language = "en",
                            Name = "Lublin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("80cfb84c-0aba-445a-b75a-1c8795e55030"),
                            ISO = "uk"
                        },
                        new
                        {
                            Id = new Guid("581bbe49-3b13-4540-9e48-737e90e4fd37"),
                            ISO = "pl"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CountryTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0112560d-a917-44e0-a361-439cf065771b"),
                            CountryId = new Guid("80cfb84c-0aba-445a-b75a-1c8795e55030"),
                            Language = "en",
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("344ad51b-6f83-4aa6-95f7-ad9f33bd6835"),
                            CountryId = new Guid("80cfb84c-0aba-445a-b75a-1c8795e55030"),
                            Language = "uk",
                            Name = "Україна"
                        },
                        new
                        {
                            Id = new Guid("1489bbab-e104-441f-a80e-2746c88ec714"),
                            CountryId = new Guid("581bbe49-3b13-4540-9e48-737e90e4fd37"),
                            Language = "en",
                            Name = "Poland"
                        },
                        new
                        {
                            Id = new Guid("eadc6a8b-bdb8-4b71-ad2c-e1c806dce03b"),
                            CountryId = new Guid("581bbe49-3b13-4540-9e48-737e90e4fd37"),
                            Language = "uk",
                            Name = "Польша"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Donate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTimeCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderCardBank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SenderCardCountry")
                        .HasColumnType("int");

                    b.Property<string>("SenderCardMask2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SenderCommission")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("senderCardType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Donates");
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VolunteerApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VolunteerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VolunteerUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VolunteerUserId", "VolunteerApplicationId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DAL.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplictionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserRecipientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserSenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplictionId");

                    b.HasIndex("UserRecipientId");

                    b.HasIndex("UserSenderId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ProfilePictures");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("821fa28a-488e-45c9-97db-88f5b90536f7"),
                            Title = "medicine"
                        },
                        new
                        {
                            Id = new Guid("4624e380-912d-4e41-9ad6-0d6bceab5c95"),
                            Title = "cooking"
                        },
                        new
                        {
                            Id = new Guid("c83b89cb-9932-4534-9bb1-32a3023cf9e1"),
                            Title = "building"
                        },
                        new
                        {
                            Id = new Guid("5c6e8ca1-9cba-4f37-adbe-4fe4db2820d4"),
                            Title = "psychology"
                        });
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5191ad9c-9577-4f1b-a159-abc4667f2d1b"),
                            Language = "en",
                            Name = "medicine",
                            SkillId = new Guid("821fa28a-488e-45c9-97db-88f5b90536f7")
                        },
                        new
                        {
                            Id = new Guid("c32b0c09-4a25-4e6a-b50f-bc43f63d881b"),
                            Language = "uk",
                            Name = "медицина",
                            SkillId = new Guid("821fa28a-488e-45c9-97db-88f5b90536f7")
                        },
                        new
                        {
                            Id = new Guid("bea3f2b6-f18e-4805-a53a-d6218e1b2fbd"),
                            Language = "en",
                            Name = "cooking",
                            SkillId = new Guid("4624e380-912d-4e41-9ad6-0d6bceab5c95")
                        },
                        new
                        {
                            Id = new Guid("8ae33999-7ae1-403e-9918-e0aced30c4cb"),
                            Language = "uk",
                            Name = "кулінарія",
                            SkillId = new Guid("4624e380-912d-4e41-9ad6-0d6bceab5c95")
                        },
                        new
                        {
                            Id = new Guid("b1f1a87a-2726-4e61-80ab-abad8ee8a060"),
                            Language = "en",
                            Name = "building",
                            SkillId = new Guid("c83b89cb-9932-4534-9bb1-32a3023cf9e1")
                        },
                        new
                        {
                            Id = new Guid("1620f2f9-8bae-420d-b9b3-a0873503a68d"),
                            Language = "uk",
                            Name = "будівництво",
                            SkillId = new Guid("c83b89cb-9932-4534-9bb1-32a3023cf9e1")
                        },
                        new
                        {
                            Id = new Guid("9fc13af4-e774-495b-8daf-c27087d8e5d0"),
                            Language = "en",
                            Name = "psychology",
                            SkillId = new Guid("5c6e8ca1-9cba-4f37-adbe-4fe4db2820d4")
                        },
                        new
                        {
                            Id = new Guid("58ada3f5-8806-461b-af66-d398a17aaf78"),
                            Language = "uk",
                            Name = "психологія",
                            SkillId = new Guid("5c6e8ca1-9cba-4f37-adbe-4fe4db2820d4")
                        });
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1a82a9de-f112-495a-bd1a-a1130c580157"),
                            CityId = new Guid("7529a5e9-85ac-42e5-b9ca-a9239ac400a0"),
                            DateOfBirth = new DateTime(2023, 5, 24, 18, 41, 40, 614, DateTimeKind.Local).AddTicks(2598),
                            FirstName = "the first",
                            LastName = "admin",
                            Login = "ourfirstadmin",
                            Password = "Rk/ryiBNbnHx+s9i1IveCNNw4axYPQHm4T1eratfQlg=",
                            Phone = "+11111111111",
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Document")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DocumentFormat")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("NULL");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ApplicationId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.HasOne("DAL.Entities.Category", "Category")
                        .WithMany("Applications")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("Applications")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationSkill", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("ApplicationSkills")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("ApplicationSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DAL.Entities.CategoryTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Category", "Category")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("CityTranslations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("CountryTranslations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.Donate", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Donates")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.HasOne("DAL.Entities.Volunteer", "Volunteer")
                        .WithMany("Messages")
                        .HasForeignKey("VolunteerUserId", "VolunteerApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("DAL.Entities.Notification", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Notifications")
                        .HasForeignKey("ApplictionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "UserRecipient")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("UserRecipientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "UserSender")
                        .WithMany("SentNotifications")
                        .HasForeignKey("UserSenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("UserRecipient");

                    b.Navigation("UserSender");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithOne("ProfilePicture")
                        .HasForeignKey("DAL.Entities.ProfilePicture", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("SkillTranslations")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Volunteers")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Volunteers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Navigation("ApplicationSkills");

                    b.Navigation("Donates");

                    b.Navigation("Notifications");

                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("CategoryTranslations");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("CityTranslations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("CountryTranslations");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Navigation("ApplicationSkills");

                    b.Navigation("SkillTranslations");

                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ProfilePicture");

                    b.Navigation("ReceivedNotifications");

                    b.Navigation("SentNotifications");

                    b.Navigation("UserSkills");

                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
