// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(VolunteerNetServerDBContext))]
    [Migration("20230528112854_DonateApplicationIdSetNull")]
    partial class DonateApplicationIdSetNull
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("CurrentSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DateTimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimeStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<string>("OwnerCardName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequiredNumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<decimal?>("RequiredSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Document")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DocumentFormat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationDocuments");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationPicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationPictures");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationSkill", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("ApplicationSkills");
                });

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6cffd041-3f98-4cf9-a151-baa930b7b63c"),
                            Title = "health care"
                        },
                        new
                        {
                            Id = new Guid("a3c27e53-7a00-478d-b9d6-cb5d60d03062"),
                            Title = "education"
                        },
                        new
                        {
                            Id = new Guid("fabf934e-80e8-42d5-b878-98ec1dfe2ec9"),
                            Title = "sports and physical culture"
                        },
                        new
                        {
                            Id = new Guid("9cd4aa92-7723-460a-81d4-62a39469187a"),
                            Title = "culture and art"
                        },
                        new
                        {
                            Id = new Guid("5534bdcc-ae0b-4075-903f-504fecd26b47"),
                            Title = "social programs"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CategoryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DescriptionCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("acdcb2b2-02fb-4030-aacf-b9d3a86f93ee"),
                            CategoryId = new Guid("6cffd041-3f98-4cf9-a151-baa930b7b63c"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "health care"
                        },
                        new
                        {
                            Id = new Guid("be522fd5-cc6a-4165-b08d-d77fafb3f787"),
                            CategoryId = new Guid("6cffd041-3f98-4cf9-a151-baa930b7b63c"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "охорона здоров'я"
                        },
                        new
                        {
                            Id = new Guid("b3a88d68-09e6-4a16-9a2b-946caef064a0"),
                            CategoryId = new Guid("a3c27e53-7a00-478d-b9d6-cb5d60d03062"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "education"
                        },
                        new
                        {
                            Id = new Guid("e74af47d-3e3c-4629-bfc2-7204596c1d8c"),
                            CategoryId = new Guid("a3c27e53-7a00-478d-b9d6-cb5d60d03062"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "освіта"
                        },
                        new
                        {
                            Id = new Guid("07363ecb-71f3-4184-a711-cd473c3af550"),
                            CategoryId = new Guid("fabf934e-80e8-42d5-b878-98ec1dfe2ec9"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "sport and physical culture"
                        },
                        new
                        {
                            Id = new Guid("85453b53-0cd6-4fbe-8c17-187aa0ae21ba"),
                            CategoryId = new Guid("fabf934e-80e8-42d5-b878-98ec1dfe2ec9"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "спорт та фізична культура"
                        },
                        new
                        {
                            Id = new Guid("cf155cee-051e-4904-8553-e5f802d3c032"),
                            CategoryId = new Guid("9cd4aa92-7723-460a-81d4-62a39469187a"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "culture and art"
                        },
                        new
                        {
                            Id = new Guid("d58a7c01-e891-46db-9eff-8fffb40e2b90"),
                            CategoryId = new Guid("9cd4aa92-7723-460a-81d4-62a39469187a"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "культура та мистецтво"
                        },
                        new
                        {
                            Id = new Guid("cceb19d8-f1ef-4c4c-b4bd-26c5d0f155ee"),
                            CategoryId = new Guid("5534bdcc-ae0b-4075-903f-504fecd26b47"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "social programs"
                        },
                        new
                        {
                            Id = new Guid("34e8e3b4-3602-463c-ac0c-7267e37f6394"),
                            CategoryId = new Guid("5534bdcc-ae0b-4075-903f-504fecd26b47"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "соціальні програми"
                        });
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8b50725c-c16e-4f35-a136-047e9ec018f7"),
                            CountryId = new Guid("1b7b2dda-75a2-4b79-b846-b1bcafc695ca"),
                            ISO = "vi"
                        },
                        new
                        {
                            Id = new Guid("f561b6c5-de41-46b1-951c-5f87f3316b37"),
                            CountryId = new Guid("1b7b2dda-75a2-4b79-b846-b1bcafc695ca"),
                            ISO = "dn"
                        },
                        new
                        {
                            Id = new Guid("68f4a226-5e24-446a-a9fb-a8a86d7f939f"),
                            CountryId = new Guid("1b7b2dda-75a2-4b79-b846-b1bcafc695ca"),
                            ISO = "zhy"
                        },
                        new
                        {
                            Id = new Guid("c9237575-d028-406e-a7c7-9c5f5e53e87b"),
                            CountryId = new Guid("1b7b2dda-75a2-4b79-b846-b1bcafc695ca"),
                            ISO = "zp"
                        },
                        new
                        {
                            Id = new Guid("5a584759-29dc-48bd-91f4-7a7a1124f5b6"),
                            CountryId = new Guid("1b7b2dda-75a2-4b79-b846-b1bcafc695ca"),
                            ISO = "if"
                        },
                        new
                        {
                            Id = new Guid("293653a4-1773-4d54-9ffc-b8498df8d3f0"),
                            CountryId = new Guid("1b7b2dda-75a2-4b79-b846-b1bcafc695ca"),
                            ISO = "ky"
                        },
                        new
                        {
                            Id = new Guid("8db1b9a2-3e26-44b0-8a72-b8225190e8b3"),
                            CountryId = new Guid("1b7b2dda-75a2-4b79-b846-b1bcafc695ca"),
                            ISO = "kr"
                        },
                        new
                        {
                            Id = new Guid("157d6706-3c85-45e3-bb46-bdf2d44d0fb8"),
                            CountryId = new Guid("1b7b2dda-75a2-4b79-b846-b1bcafc695ca"),
                            ISO = "lut"
                        },
                        new
                        {
                            Id = new Guid("a6d477eb-a32f-4cdd-87a4-a850d4f92c79"),
                            CountryId = new Guid("1b7b2dda-75a2-4b79-b846-b1bcafc695ca"),
                            ISO = "lv"
                        },
                        new
                        {
                            Id = new Guid("fb2d6b2a-aa74-4332-8382-2c1814b799ee"),
                            CountryId = new Guid("1b7b2dda-75a2-4b79-b846-b1bcafc695ca"),
                            ISO = "my"
                        },
                        new
                        {
                            Id = new Guid("3583680e-2f34-4347-8d09-c362ee0e1bb2"),
                            CountryId = new Guid("1b7b2dda-75a2-4b79-b846-b1bcafc695ca"),
                            ISO = "od"
                        },
                        new
                        {
                            Id = new Guid("c4940670-f991-4968-985c-c3d517dcd114"),
                            CountryId = new Guid("1b7b2dda-75a2-4b79-b846-b1bcafc695ca"),
                            ISO = "pol"
                        },
                        new
                        {
                            Id = new Guid("2fbf8f05-d281-4dbc-852c-956dfaa66b61"),
                            CountryId = new Guid("1b7b2dda-75a2-4b79-b846-b1bcafc695ca"),
                            ISO = "ri"
                        },
                        new
                        {
                            Id = new Guid("7b18ce0f-fadb-43c6-b09d-24122562c055"),
                            CountryId = new Guid("1b7b2dda-75a2-4b79-b846-b1bcafc695ca"),
                            ISO = "su"
                        },
                        new
                        {
                            Id = new Guid("1c84b100-3762-46f3-957d-5aee7ef72372"),
                            CountryId = new Guid("1b7b2dda-75a2-4b79-b846-b1bcafc695ca"),
                            ISO = "ter"
                        },
                        new
                        {
                            Id = new Guid("a1a22884-d29a-4fbe-9e4f-0647535266e2"),
                            CountryId = new Guid("1b7b2dda-75a2-4b79-b846-b1bcafc695ca"),
                            ISO = "uzh"
                        },
                        new
                        {
                            Id = new Guid("a903e98b-d863-4595-a405-b4f263d1cdc4"),
                            CountryId = new Guid("1b7b2dda-75a2-4b79-b846-b1bcafc695ca"),
                            ISO = "khar"
                        },
                        new
                        {
                            Id = new Guid("f36abbad-e3e9-4e44-8287-9607f7bc13ce"),
                            CountryId = new Guid("1b7b2dda-75a2-4b79-b846-b1bcafc695ca"),
                            ISO = "kher"
                        },
                        new
                        {
                            Id = new Guid("c25f3c4a-2e13-4844-beb1-3b2a3b46c0a4"),
                            CountryId = new Guid("1b7b2dda-75a2-4b79-b846-b1bcafc695ca"),
                            ISO = "khm"
                        },
                        new
                        {
                            Id = new Guid("f6766f2b-0fc2-466b-b91f-9732af19dd97"),
                            CountryId = new Guid("1b7b2dda-75a2-4b79-b846-b1bcafc695ca"),
                            ISO = "chk"
                        },
                        new
                        {
                            Id = new Guid("827787c2-5977-4b65-87e6-736a252dc443"),
                            CountryId = new Guid("1b7b2dda-75a2-4b79-b846-b1bcafc695ca"),
                            ISO = "chv"
                        },
                        new
                        {
                            Id = new Guid("46177a57-7f0b-41e2-a08d-7bb64100968c"),
                            CountryId = new Guid("1b7b2dda-75a2-4b79-b846-b1bcafc695ca"),
                            ISO = "chh"
                        },
                        new
                        {
                            Id = new Guid("86493d1d-f4b7-43b3-984b-3c2228ece112"),
                            CountryId = new Guid("af84322e-59e1-4c58-8994-6d37914b0dc4"),
                            ISO = "var"
                        },
                        new
                        {
                            Id = new Guid("b683b76f-a05c-467c-98d6-f9b25bf46a97"),
                            CountryId = new Guid("af84322e-59e1-4c58-8994-6d37914b0dc4"),
                            ISO = "lub"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("CityTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f2e68e22-8fc0-40da-9d03-572d2ffd1909"),
                            CityId = new Guid("8b50725c-c16e-4f35-a136-047e9ec018f7"),
                            Language = "uk",
                            Name = "Вінниця"
                        },
                        new
                        {
                            Id = new Guid("cc35fe52-9fe3-405d-b72b-14c1a68c0945"),
                            CityId = new Guid("f561b6c5-de41-46b1-951c-5f87f3316b37"),
                            Language = "uk",
                            Name = "Дніпро"
                        },
                        new
                        {
                            Id = new Guid("a4a5daae-b54a-4a49-be50-c2408dae78b3"),
                            CityId = new Guid("68f4a226-5e24-446a-a9fb-a8a86d7f939f"),
                            Language = "uk",
                            Name = "Житомир"
                        },
                        new
                        {
                            Id = new Guid("bd7bf68b-0eef-4434-a3b4-123f113662b4"),
                            CityId = new Guid("c9237575-d028-406e-a7c7-9c5f5e53e87b"),
                            Language = "uk",
                            Name = "Запоріжжя"
                        },
                        new
                        {
                            Id = new Guid("e39a99a3-648f-42d5-a4d5-97152e7a97e7"),
                            CityId = new Guid("5a584759-29dc-48bd-91f4-7a7a1124f5b6"),
                            Language = "uk",
                            Name = "Івано-Франківськ"
                        },
                        new
                        {
                            Id = new Guid("0153a83f-ea71-42c3-b718-32e67e292145"),
                            CityId = new Guid("293653a4-1773-4d54-9ffc-b8498df8d3f0"),
                            Language = "uk",
                            Name = "Київ"
                        },
                        new
                        {
                            Id = new Guid("bdd3fd58-ae1b-4f8b-9de2-d365ceb6f0a5"),
                            CityId = new Guid("8db1b9a2-3e26-44b0-8a72-b8225190e8b3"),
                            Language = "uk",
                            Name = "Кропивницький"
                        },
                        new
                        {
                            Id = new Guid("a88dbdfe-04c9-41fe-90e6-be30b6063148"),
                            CityId = new Guid("157d6706-3c85-45e3-bb46-bdf2d44d0fb8"),
                            Language = "uk",
                            Name = "Луцьк"
                        },
                        new
                        {
                            Id = new Guid("8b80e892-4e3a-4821-9d8e-ee9f9cad4932"),
                            CityId = new Guid("a6d477eb-a32f-4cdd-87a4-a850d4f92c79"),
                            Language = "uk",
                            Name = "Львів"
                        },
                        new
                        {
                            Id = new Guid("52de48e9-1dc4-4e57-a94f-2e1fbb1499d9"),
                            CityId = new Guid("fb2d6b2a-aa74-4332-8382-2c1814b799ee"),
                            Language = "uk",
                            Name = "Миколаїв"
                        },
                        new
                        {
                            Id = new Guid("83050420-19e6-4dc6-84b4-8134ed3b8c58"),
                            CityId = new Guid("3583680e-2f34-4347-8d09-c362ee0e1bb2"),
                            Language = "uk",
                            Name = "Одеса"
                        },
                        new
                        {
                            Id = new Guid("6f8985b8-9a11-499c-b686-43c88285264a"),
                            CityId = new Guid("c4940670-f991-4968-985c-c3d517dcd114"),
                            Language = "uk",
                            Name = "Полтава"
                        },
                        new
                        {
                            Id = new Guid("f88cdce6-a6e0-48ae-9014-d8f2a475d954"),
                            CityId = new Guid("2fbf8f05-d281-4dbc-852c-956dfaa66b61"),
                            Language = "uk",
                            Name = "Рівне"
                        },
                        new
                        {
                            Id = new Guid("325d2207-d396-4c1e-849a-2d21a4f51281"),
                            CityId = new Guid("7b18ce0f-fadb-43c6-b09d-24122562c055"),
                            Language = "uk",
                            Name = "Суми"
                        },
                        new
                        {
                            Id = new Guid("0f07c8a4-a5e2-4d07-aba6-e63eeca97700"),
                            CityId = new Guid("1c84b100-3762-46f3-957d-5aee7ef72372"),
                            Language = "uk",
                            Name = "Тернопіль"
                        },
                        new
                        {
                            Id = new Guid("667b295f-cbf2-4c62-be6d-9f16441fc9e2"),
                            CityId = new Guid("a1a22884-d29a-4fbe-9e4f-0647535266e2"),
                            Language = "uk",
                            Name = "Ужгород"
                        },
                        new
                        {
                            Id = new Guid("dc2ac65d-429e-47d9-8ce8-6c79cfc88d7d"),
                            CityId = new Guid("a903e98b-d863-4595-a405-b4f263d1cdc4"),
                            Language = "uk",
                            Name = "Харків"
                        },
                        new
                        {
                            Id = new Guid("cf2d81ef-5b4e-4ea2-a693-31fd9269b0db"),
                            CityId = new Guid("f36abbad-e3e9-4e44-8287-9607f7bc13ce"),
                            Language = "uk",
                            Name = "Херсон"
                        },
                        new
                        {
                            Id = new Guid("b06216a0-e951-4f7a-8a95-d17d80b7f171"),
                            CityId = new Guid("c25f3c4a-2e13-4844-beb1-3b2a3b46c0a4"),
                            Language = "uk",
                            Name = "Хмельницький"
                        },
                        new
                        {
                            Id = new Guid("9dac26ff-01b4-45b9-a956-31386219b412"),
                            CityId = new Guid("f6766f2b-0fc2-466b-b91f-9732af19dd97"),
                            Language = "uk",
                            Name = "Черкаси"
                        },
                        new
                        {
                            Id = new Guid("af6017f8-03f0-44a6-b2f2-57b799e7351b"),
                            CityId = new Guid("827787c2-5977-4b65-87e6-736a252dc443"),
                            Language = "uk",
                            Name = "Чернівці"
                        },
                        new
                        {
                            Id = new Guid("6e3e8ee1-88da-4004-b396-5f6a3a637273"),
                            CityId = new Guid("46177a57-7f0b-41e2-a08d-7bb64100968c"),
                            Language = "uk",
                            Name = "Чернігів"
                        },
                        new
                        {
                            Id = new Guid("dd96ec21-1224-4d82-9dda-270b6bf0c2c3"),
                            CityId = new Guid("8b50725c-c16e-4f35-a136-047e9ec018f7"),
                            Language = "en",
                            Name = "Vinnytsia"
                        },
                        new
                        {
                            Id = new Guid("5acb26ff-8627-4177-a509-00c88040bce0"),
                            CityId = new Guid("f561b6c5-de41-46b1-951c-5f87f3316b37"),
                            Language = "en",
                            Name = "Dnipro"
                        },
                        new
                        {
                            Id = new Guid("993b293a-539c-4630-b032-cdef54bc6462"),
                            CityId = new Guid("68f4a226-5e24-446a-a9fb-a8a86d7f939f"),
                            Language = "en",
                            Name = "Zhytomyr"
                        },
                        new
                        {
                            Id = new Guid("744ba161-63af-4040-9baa-1eb28be34582"),
                            CityId = new Guid("c9237575-d028-406e-a7c7-9c5f5e53e87b"),
                            Language = "en",
                            Name = "Zaporizhzhia"
                        },
                        new
                        {
                            Id = new Guid("a4595e09-cb00-44ba-9d2c-2c5b512450b3"),
                            CityId = new Guid("5a584759-29dc-48bd-91f4-7a7a1124f5b6"),
                            Language = "en",
                            Name = "Ivano-Frankivsk"
                        },
                        new
                        {
                            Id = new Guid("6b021472-0cac-4c83-8105-e54d3cccd536"),
                            CityId = new Guid("293653a4-1773-4d54-9ffc-b8498df8d3f0"),
                            Language = "en",
                            Name = "Kyiv"
                        },
                        new
                        {
                            Id = new Guid("a2383d06-8504-42dd-8abb-a663a9e8dd0b"),
                            CityId = new Guid("8db1b9a2-3e26-44b0-8a72-b8225190e8b3"),
                            Language = "en",
                            Name = "Kropyvnytskyi"
                        },
                        new
                        {
                            Id = new Guid("9609685d-bae7-4a0e-9264-b3b2de8141bf"),
                            CityId = new Guid("157d6706-3c85-45e3-bb46-bdf2d44d0fb8"),
                            Language = "en",
                            Name = "Lutsk"
                        },
                        new
                        {
                            Id = new Guid("131ecd91-8a49-4a10-b0ba-e0f16c41eae5"),
                            CityId = new Guid("a6d477eb-a32f-4cdd-87a4-a850d4f92c79"),
                            Language = "en",
                            Name = "Lviv"
                        },
                        new
                        {
                            Id = new Guid("c89984f2-e162-4903-a52f-43caa5e610c9"),
                            CityId = new Guid("fb2d6b2a-aa74-4332-8382-2c1814b799ee"),
                            Language = "en",
                            Name = "Mykolaiv"
                        },
                        new
                        {
                            Id = new Guid("f81dd8b6-cff9-4f52-b18e-9861b256503d"),
                            CityId = new Guid("3583680e-2f34-4347-8d09-c362ee0e1bb2"),
                            Language = "en",
                            Name = "Odesa"
                        },
                        new
                        {
                            Id = new Guid("bccbd26e-2f68-4e07-876b-9c15a05a919a"),
                            CityId = new Guid("c4940670-f991-4968-985c-c3d517dcd114"),
                            Language = "en",
                            Name = "Poltava"
                        },
                        new
                        {
                            Id = new Guid("c7361daa-045e-4487-a8b0-de2c1f475b39"),
                            CityId = new Guid("2fbf8f05-d281-4dbc-852c-956dfaa66b61"),
                            Language = "en",
                            Name = "Rivne"
                        },
                        new
                        {
                            Id = new Guid("89c84fab-7553-472b-b806-7e760a253582"),
                            CityId = new Guid("7b18ce0f-fadb-43c6-b09d-24122562c055"),
                            Language = "en",
                            Name = "Sumy"
                        },
                        new
                        {
                            Id = new Guid("082df4ab-c559-4d08-8623-76538d859476"),
                            CityId = new Guid("1c84b100-3762-46f3-957d-5aee7ef72372"),
                            Language = "en",
                            Name = "Ternopil"
                        },
                        new
                        {
                            Id = new Guid("b8e66a80-7d20-4ce5-ae96-635ecb3755de"),
                            CityId = new Guid("a1a22884-d29a-4fbe-9e4f-0647535266e2"),
                            Language = "en",
                            Name = "Uzhhorod"
                        },
                        new
                        {
                            Id = new Guid("9ae00b3d-5eae-4376-98e2-39f65500b2aa"),
                            CityId = new Guid("a903e98b-d863-4595-a405-b4f263d1cdc4"),
                            Language = "en",
                            Name = "Kharkiv"
                        },
                        new
                        {
                            Id = new Guid("57ab02f0-7b54-4b81-a520-a43012a05085"),
                            CityId = new Guid("f36abbad-e3e9-4e44-8287-9607f7bc13ce"),
                            Language = "en",
                            Name = "Kherson"
                        },
                        new
                        {
                            Id = new Guid("66875fcd-8f63-4f38-bf39-1788be9cabba"),
                            CityId = new Guid("c25f3c4a-2e13-4844-beb1-3b2a3b46c0a4"),
                            Language = "en",
                            Name = "Khmelnytskyi"
                        },
                        new
                        {
                            Id = new Guid("3eda8853-5d61-4827-abaf-db97779ca4f0"),
                            CityId = new Guid("f6766f2b-0fc2-466b-b91f-9732af19dd97"),
                            Language = "en",
                            Name = "Cherkasy"
                        },
                        new
                        {
                            Id = new Guid("da2e0318-a079-4cb9-ae9d-01eb08dc30b5"),
                            CityId = new Guid("827787c2-5977-4b65-87e6-736a252dc443"),
                            Language = "en",
                            Name = "Chernivtsi"
                        },
                        new
                        {
                            Id = new Guid("f34103a2-519b-43ae-bdfd-dbb9ab923f90"),
                            CityId = new Guid("46177a57-7f0b-41e2-a08d-7bb64100968c"),
                            Language = "en",
                            Name = "Chernihiv"
                        },
                        new
                        {
                            Id = new Guid("0df0a6e5-2c61-496f-abf4-941f6e9c65a0"),
                            CityId = new Guid("86493d1d-f4b7-43b3-984b-3c2228ece112"),
                            Language = "uk",
                            Name = "Варшава"
                        },
                        new
                        {
                            Id = new Guid("f9af3577-031d-48bb-aa7c-cb4ac6b788b9"),
                            CityId = new Guid("b683b76f-a05c-467c-98d6-f9b25bf46a97"),
                            Language = "uk",
                            Name = "Люблін"
                        },
                        new
                        {
                            Id = new Guid("9756a4b8-8a8c-4dee-9f85-2490be3f92c6"),
                            CityId = new Guid("86493d1d-f4b7-43b3-984b-3c2228ece112"),
                            Language = "en",
                            Name = "Varshava"
                        },
                        new
                        {
                            Id = new Guid("d6016dcd-5c60-4c3e-ae28-85ae7b047a5b"),
                            CityId = new Guid("b683b76f-a05c-467c-98d6-f9b25bf46a97"),
                            Language = "en",
                            Name = "Lublin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1b7b2dda-75a2-4b79-b846-b1bcafc695ca"),
                            ISO = "uk"
                        },
                        new
                        {
                            Id = new Guid("af84322e-59e1-4c58-8994-6d37914b0dc4"),
                            ISO = "pl"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CountryTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("18b07008-ee87-42c1-8f45-6dd2be3e0824"),
                            CountryId = new Guid("1b7b2dda-75a2-4b79-b846-b1bcafc695ca"),
                            Language = "en",
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("88d6e487-f78c-46fb-a084-9678cb8efee5"),
                            CountryId = new Guid("1b7b2dda-75a2-4b79-b846-b1bcafc695ca"),
                            Language = "uk",
                            Name = "Україна"
                        },
                        new
                        {
                            Id = new Guid("e099b482-2aef-4f25-8f3f-6ef023f67dc7"),
                            CountryId = new Guid("af84322e-59e1-4c58-8994-6d37914b0dc4"),
                            Language = "en",
                            Name = "Poland"
                        },
                        new
                        {
                            Id = new Guid("3743aad5-fc25-4dba-95fd-f2dfa1c021ed"),
                            CountryId = new Guid("af84322e-59e1-4c58-8994-6d37914b0dc4"),
                            Language = "uk",
                            Name = "Польша"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Donate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTimeCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderCardBank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SenderCardCountry")
                        .HasColumnType("int");

                    b.Property<string>("SenderCardMask2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderCardType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SenderCommission")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Donates");
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VolunteerApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VolunteerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VolunteerUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VolunteerUserId", "VolunteerApplicationId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DAL.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplictionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserRecipientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserSenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplictionId");

                    b.HasIndex("UserRecipientId");

                    b.HasIndex("UserSenderId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ProfilePictures");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("83f1af7b-d18e-42d6-b15c-e2c929fb596c"),
                            Title = "medicine"
                        },
                        new
                        {
                            Id = new Guid("137647b7-f42a-46a0-984b-9cfd457e1aba"),
                            Title = "cooking"
                        },
                        new
                        {
                            Id = new Guid("bf83c741-70e5-4ddf-b597-2e4cd077c914"),
                            Title = "building"
                        },
                        new
                        {
                            Id = new Guid("0d280e1f-998f-49a7-9b4c-48cb1bbf5274"),
                            Title = "psychology"
                        });
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2276803c-4b1d-4a28-84c8-346d5365df66"),
                            Language = "en",
                            Name = "medicine",
                            SkillId = new Guid("83f1af7b-d18e-42d6-b15c-e2c929fb596c")
                        },
                        new
                        {
                            Id = new Guid("795d45a6-fe94-4681-bed9-51afd3e2c83d"),
                            Language = "uk",
                            Name = "медицина",
                            SkillId = new Guid("83f1af7b-d18e-42d6-b15c-e2c929fb596c")
                        },
                        new
                        {
                            Id = new Guid("c6d8e900-706f-4e91-9d7b-9cc812dadcea"),
                            Language = "en",
                            Name = "cooking",
                            SkillId = new Guid("137647b7-f42a-46a0-984b-9cfd457e1aba")
                        },
                        new
                        {
                            Id = new Guid("6f5cc9b9-2123-4d01-8b89-98765e3f51d0"),
                            Language = "uk",
                            Name = "кулінарія",
                            SkillId = new Guid("137647b7-f42a-46a0-984b-9cfd457e1aba")
                        },
                        new
                        {
                            Id = new Guid("9e5ee1b5-04d7-4e28-a122-36ce89f023fb"),
                            Language = "en",
                            Name = "building",
                            SkillId = new Guid("bf83c741-70e5-4ddf-b597-2e4cd077c914")
                        },
                        new
                        {
                            Id = new Guid("a6a15903-80cc-4bf6-89a9-b8b1bde22ca4"),
                            Language = "uk",
                            Name = "будівництво",
                            SkillId = new Guid("bf83c741-70e5-4ddf-b597-2e4cd077c914")
                        },
                        new
                        {
                            Id = new Guid("59dd2315-d166-457c-8cd3-4fd972012a88"),
                            Language = "en",
                            Name = "psychology",
                            SkillId = new Guid("0d280e1f-998f-49a7-9b4c-48cb1bbf5274")
                        },
                        new
                        {
                            Id = new Guid("ba131086-3287-4973-beb3-8a22606728cc"),
                            Language = "uk",
                            Name = "психологія",
                            SkillId = new Guid("0d280e1f-998f-49a7-9b4c-48cb1bbf5274")
                        });
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("941d7c0a-0dde-489e-9a2d-0100ecc7e130"),
                            CityId = new Guid("8b50725c-c16e-4f35-a136-047e9ec018f7"),
                            DateOfBirth = new DateTime(2023, 5, 28, 14, 26, 9, 869, DateTimeKind.Local).AddTicks(4737),
                            FirstName = "the first",
                            LastName = "admin",
                            Login = "ourfirstadmin",
                            Password = "Rk/ryiBNbnHx+s9i1IveCNNw4axYPQHm4T1eratfQlg=",
                            Phone = "+11111111111",
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Document")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DocumentFormat")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("NULL");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ApplicationId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.HasOne("DAL.Entities.Category", "Category")
                        .WithMany("Applications")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("Applications")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationDocument", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("ApplicationDocuments")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationPicture", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("ApplicationPictures")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationSkill", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("ApplicationSkills")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("ApplicationSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DAL.Entities.CategoryTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Category", "Category")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("CityTranslations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("CountryTranslations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.Donate", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Donates")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Application");
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.HasOne("DAL.Entities.Volunteer", "Volunteer")
                        .WithMany("Messages")
                        .HasForeignKey("VolunteerUserId", "VolunteerApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("DAL.Entities.Notification", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Notifications")
                        .HasForeignKey("ApplictionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "UserRecipient")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("UserRecipientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "UserSender")
                        .WithMany("SentNotifications")
                        .HasForeignKey("UserSenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("UserRecipient");

                    b.Navigation("UserSender");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithOne("ProfilePicture")
                        .HasForeignKey("DAL.Entities.ProfilePicture", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("SkillTranslations")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Volunteers")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Volunteers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Navigation("ApplicationDocuments");

                    b.Navigation("ApplicationPictures");

                    b.Navigation("ApplicationSkills");

                    b.Navigation("Donates");

                    b.Navigation("Notifications");

                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("CategoryTranslations");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("CityTranslations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("CountryTranslations");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Navigation("ApplicationSkills");

                    b.Navigation("SkillTranslations");

                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ProfilePicture");

                    b.Navigation("ReceivedNotifications");

                    b.Navigation("SentNotifications");

                    b.Navigation("UserSkills");

                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
