// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(VolunteerNetServerDBContext))]
    [Migration("20230502125152_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequiredNumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("084a5d4b-3d1e-4e99-933e-af2f327d90d3"),
                            CountryId = new Guid("fd109275-a02d-481d-ae88-0f0345760922"),
                            ISO = "vi"
                        },
                        new
                        {
                            Id = new Guid("4ac26f07-ee56-4e5d-ac5b-209c2d7be33f"),
                            CountryId = new Guid("fd109275-a02d-481d-ae88-0f0345760922"),
                            ISO = "dn"
                        },
                        new
                        {
                            Id = new Guid("91fcb14c-24eb-4dea-8212-657da3f6a9c8"),
                            CountryId = new Guid("fd109275-a02d-481d-ae88-0f0345760922"),
                            ISO = "zhy"
                        },
                        new
                        {
                            Id = new Guid("8029a730-a2aa-4e16-9513-eb21f6d00ed2"),
                            CountryId = new Guid("fd109275-a02d-481d-ae88-0f0345760922"),
                            ISO = "zp"
                        },
                        new
                        {
                            Id = new Guid("48ee6cbe-ab0b-43bd-8aeb-b412c8ac62a1"),
                            CountryId = new Guid("fd109275-a02d-481d-ae88-0f0345760922"),
                            ISO = "if"
                        },
                        new
                        {
                            Id = new Guid("541c7423-bb85-428f-a671-fa60de75b455"),
                            CountryId = new Guid("fd109275-a02d-481d-ae88-0f0345760922"),
                            ISO = "ky"
                        },
                        new
                        {
                            Id = new Guid("73a50d89-a2c4-41ae-8081-fe68d9c6775e"),
                            CountryId = new Guid("fd109275-a02d-481d-ae88-0f0345760922"),
                            ISO = "kr"
                        },
                        new
                        {
                            Id = new Guid("df31eb8a-3c9f-4a96-8468-ba9b050fab6d"),
                            CountryId = new Guid("fd109275-a02d-481d-ae88-0f0345760922"),
                            ISO = "lut"
                        },
                        new
                        {
                            Id = new Guid("d24c4f9d-bc53-446d-9740-54bc55fcbbfc"),
                            CountryId = new Guid("fd109275-a02d-481d-ae88-0f0345760922"),
                            ISO = "lv"
                        },
                        new
                        {
                            Id = new Guid("e1ed30e2-01f6-479b-afe8-536c169bb35b"),
                            CountryId = new Guid("fd109275-a02d-481d-ae88-0f0345760922"),
                            ISO = "my"
                        },
                        new
                        {
                            Id = new Guid("e6081aa1-0a4f-46e0-8d28-20cacc97bee5"),
                            CountryId = new Guid("fd109275-a02d-481d-ae88-0f0345760922"),
                            ISO = "od"
                        },
                        new
                        {
                            Id = new Guid("d454a0ff-a55a-47d0-8117-0518c4138c03"),
                            CountryId = new Guid("fd109275-a02d-481d-ae88-0f0345760922"),
                            ISO = "pol"
                        },
                        new
                        {
                            Id = new Guid("6311cbc0-e19d-4fc4-85ed-e9d56a0f28b7"),
                            CountryId = new Guid("fd109275-a02d-481d-ae88-0f0345760922"),
                            ISO = "ri"
                        },
                        new
                        {
                            Id = new Guid("d9c93333-c1b3-4948-ad78-a3da70e5a04d"),
                            CountryId = new Guid("fd109275-a02d-481d-ae88-0f0345760922"),
                            ISO = "su"
                        },
                        new
                        {
                            Id = new Guid("af53446f-14bd-48f0-a03e-50c9c78a4de5"),
                            CountryId = new Guid("fd109275-a02d-481d-ae88-0f0345760922"),
                            ISO = "ter"
                        },
                        new
                        {
                            Id = new Guid("1f6e3b35-2031-4f44-a28d-830e15d8fb66"),
                            CountryId = new Guid("fd109275-a02d-481d-ae88-0f0345760922"),
                            ISO = "uzh"
                        },
                        new
                        {
                            Id = new Guid("6c52291c-4a69-461b-a028-9eb46922db1c"),
                            CountryId = new Guid("fd109275-a02d-481d-ae88-0f0345760922"),
                            ISO = "khar"
                        },
                        new
                        {
                            Id = new Guid("6aba5a0a-8692-4008-a835-ccfeab512ccb"),
                            CountryId = new Guid("fd109275-a02d-481d-ae88-0f0345760922"),
                            ISO = "kher"
                        },
                        new
                        {
                            Id = new Guid("a08b134d-d7ba-43fa-849d-04bfb9129a41"),
                            CountryId = new Guid("fd109275-a02d-481d-ae88-0f0345760922"),
                            ISO = "khm"
                        },
                        new
                        {
                            Id = new Guid("c4170339-d69d-4277-a0ea-de8fe5181882"),
                            CountryId = new Guid("fd109275-a02d-481d-ae88-0f0345760922"),
                            ISO = "chk"
                        },
                        new
                        {
                            Id = new Guid("9f82d527-a4c9-4e89-a05a-26d628f75591"),
                            CountryId = new Guid("fd109275-a02d-481d-ae88-0f0345760922"),
                            ISO = "chv"
                        },
                        new
                        {
                            Id = new Guid("eae60ac4-527f-4cda-a041-7b5797410732"),
                            CountryId = new Guid("fd109275-a02d-481d-ae88-0f0345760922"),
                            ISO = "chh"
                        },
                        new
                        {
                            Id = new Guid("916e6dae-c443-48e5-a58e-a9a7b5f70c1f"),
                            CountryId = new Guid("70ed4402-7dc0-4465-958b-7bce58ec0b5a"),
                            ISO = "var"
                        },
                        new
                        {
                            Id = new Guid("627e5434-5e3d-4809-870b-42bf2896276c"),
                            CountryId = new Guid("70ed4402-7dc0-4465-958b-7bce58ec0b5a"),
                            ISO = "lub"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("CityTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0d97d483-0d58-4ce6-81f6-175380cde2fc"),
                            CityId = new Guid("084a5d4b-3d1e-4e99-933e-af2f327d90d3"),
                            Language = "uk",
                            Name = "Вінниця"
                        },
                        new
                        {
                            Id = new Guid("aa5b5a29-65c4-45dd-b468-463dc7af75a3"),
                            CityId = new Guid("4ac26f07-ee56-4e5d-ac5b-209c2d7be33f"),
                            Language = "uk",
                            Name = "Дніпро"
                        },
                        new
                        {
                            Id = new Guid("6db2c274-da42-4c07-a0c1-0c318a5903cf"),
                            CityId = new Guid("91fcb14c-24eb-4dea-8212-657da3f6a9c8"),
                            Language = "uk",
                            Name = "Житомир"
                        },
                        new
                        {
                            Id = new Guid("2613c2e4-eff1-46be-9f53-9555d3fe1370"),
                            CityId = new Guid("8029a730-a2aa-4e16-9513-eb21f6d00ed2"),
                            Language = "uk",
                            Name = "Запоріжжя"
                        },
                        new
                        {
                            Id = new Guid("5ed1a218-dde2-4b0a-88e6-2eca27422f32"),
                            CityId = new Guid("48ee6cbe-ab0b-43bd-8aeb-b412c8ac62a1"),
                            Language = "uk",
                            Name = "Івано-Франківськ"
                        },
                        new
                        {
                            Id = new Guid("afb547a6-1419-4912-90fd-ce5ce0c625d4"),
                            CityId = new Guid("541c7423-bb85-428f-a671-fa60de75b455"),
                            Language = "uk",
                            Name = "Київ"
                        },
                        new
                        {
                            Id = new Guid("45c12fb7-2212-493f-a110-e5af64d05d24"),
                            CityId = new Guid("73a50d89-a2c4-41ae-8081-fe68d9c6775e"),
                            Language = "uk",
                            Name = "Кропивницький"
                        },
                        new
                        {
                            Id = new Guid("73f5b847-0349-438c-965d-71b8aa01236a"),
                            CityId = new Guid("df31eb8a-3c9f-4a96-8468-ba9b050fab6d"),
                            Language = "uk",
                            Name = "Луцьк"
                        },
                        new
                        {
                            Id = new Guid("01e01659-50b5-42b9-bdae-14a5b9d4c6ed"),
                            CityId = new Guid("d24c4f9d-bc53-446d-9740-54bc55fcbbfc"),
                            Language = "uk",
                            Name = "Львів"
                        },
                        new
                        {
                            Id = new Guid("14478911-5782-4cf6-9dfb-f0e9ceb60ad5"),
                            CityId = new Guid("e1ed30e2-01f6-479b-afe8-536c169bb35b"),
                            Language = "uk",
                            Name = "Миколаїв"
                        },
                        new
                        {
                            Id = new Guid("abde2381-433d-4ecc-90bf-ba92346728ee"),
                            CityId = new Guid("e6081aa1-0a4f-46e0-8d28-20cacc97bee5"),
                            Language = "uk",
                            Name = "Одеса"
                        },
                        new
                        {
                            Id = new Guid("bb1de9d4-de19-4d05-bfcd-1a7f5ad5c882"),
                            CityId = new Guid("d454a0ff-a55a-47d0-8117-0518c4138c03"),
                            Language = "uk",
                            Name = "Полтава"
                        },
                        new
                        {
                            Id = new Guid("8b024fb6-50c8-444a-91a0-26584c07b8ea"),
                            CityId = new Guid("6311cbc0-e19d-4fc4-85ed-e9d56a0f28b7"),
                            Language = "uk",
                            Name = "Рівне"
                        },
                        new
                        {
                            Id = new Guid("6e6ad2a1-fbe6-41ab-af2c-95d90423d9e3"),
                            CityId = new Guid("d9c93333-c1b3-4948-ad78-a3da70e5a04d"),
                            Language = "uk",
                            Name = "Суми"
                        },
                        new
                        {
                            Id = new Guid("32c4b531-c278-4c81-9599-f8e2f0a15bb2"),
                            CityId = new Guid("af53446f-14bd-48f0-a03e-50c9c78a4de5"),
                            Language = "uk",
                            Name = "Тернопіль"
                        },
                        new
                        {
                            Id = new Guid("312f6d95-56fe-47c3-9b84-4b66d3af07a1"),
                            CityId = new Guid("1f6e3b35-2031-4f44-a28d-830e15d8fb66"),
                            Language = "uk",
                            Name = "Ужгород"
                        },
                        new
                        {
                            Id = new Guid("48763c49-b585-4c0b-8c21-cb5307af20f2"),
                            CityId = new Guid("6c52291c-4a69-461b-a028-9eb46922db1c"),
                            Language = "uk",
                            Name = "Харків"
                        },
                        new
                        {
                            Id = new Guid("5f22fd90-6acf-42a4-be3b-872664c2284c"),
                            CityId = new Guid("6aba5a0a-8692-4008-a835-ccfeab512ccb"),
                            Language = "uk",
                            Name = "Херсон"
                        },
                        new
                        {
                            Id = new Guid("26388514-108c-40f4-8e8a-3e196ddd1e68"),
                            CityId = new Guid("a08b134d-d7ba-43fa-849d-04bfb9129a41"),
                            Language = "uk",
                            Name = "Хмельницький"
                        },
                        new
                        {
                            Id = new Guid("84060f94-df4a-4c85-b29c-d1afe7457d8f"),
                            CityId = new Guid("c4170339-d69d-4277-a0ea-de8fe5181882"),
                            Language = "uk",
                            Name = "Черкаси"
                        },
                        new
                        {
                            Id = new Guid("7fb05809-5125-492d-bb6d-1a0f8d700a08"),
                            CityId = new Guid("9f82d527-a4c9-4e89-a05a-26d628f75591"),
                            Language = "uk",
                            Name = "Чернівці"
                        },
                        new
                        {
                            Id = new Guid("b7fd7b9b-5ff7-46c1-92d4-29133d86c5dc"),
                            CityId = new Guid("eae60ac4-527f-4cda-a041-7b5797410732"),
                            Language = "uk",
                            Name = "Чернігів"
                        },
                        new
                        {
                            Id = new Guid("89962108-8a1b-41ea-bd52-1d4999c69382"),
                            CityId = new Guid("084a5d4b-3d1e-4e99-933e-af2f327d90d3"),
                            Language = "en",
                            Name = "Vinnytsia"
                        },
                        new
                        {
                            Id = new Guid("461c0484-a37f-42cf-92bb-8a9ca2db5403"),
                            CityId = new Guid("4ac26f07-ee56-4e5d-ac5b-209c2d7be33f"),
                            Language = "en",
                            Name = "Dnipro"
                        },
                        new
                        {
                            Id = new Guid("f8cc63cf-7347-4c32-bc0a-8c975fc61e63"),
                            CityId = new Guid("91fcb14c-24eb-4dea-8212-657da3f6a9c8"),
                            Language = "en",
                            Name = "Zhytomyr"
                        },
                        new
                        {
                            Id = new Guid("6019e78c-e888-4128-ac43-2756a27d54d2"),
                            CityId = new Guid("8029a730-a2aa-4e16-9513-eb21f6d00ed2"),
                            Language = "en",
                            Name = "Zaporizhzhia"
                        },
                        new
                        {
                            Id = new Guid("d57fe152-094d-4776-969d-165e77a45dd2"),
                            CityId = new Guid("48ee6cbe-ab0b-43bd-8aeb-b412c8ac62a1"),
                            Language = "en",
                            Name = "Ivano-Frankivsk"
                        },
                        new
                        {
                            Id = new Guid("29995cd5-971b-473d-8cd5-1000dc13b189"),
                            CityId = new Guid("541c7423-bb85-428f-a671-fa60de75b455"),
                            Language = "en",
                            Name = "Kyiv"
                        },
                        new
                        {
                            Id = new Guid("f1c872c4-e760-4482-8241-5104ec249198"),
                            CityId = new Guid("73a50d89-a2c4-41ae-8081-fe68d9c6775e"),
                            Language = "en",
                            Name = "Kropyvnytskyi"
                        },
                        new
                        {
                            Id = new Guid("06f11f58-79b7-4d5a-87e5-f23ee5acccbe"),
                            CityId = new Guid("df31eb8a-3c9f-4a96-8468-ba9b050fab6d"),
                            Language = "en",
                            Name = "Lutsk"
                        },
                        new
                        {
                            Id = new Guid("2fde78aa-d9ab-41ad-a587-49d2702d1368"),
                            CityId = new Guid("d24c4f9d-bc53-446d-9740-54bc55fcbbfc"),
                            Language = "en",
                            Name = "Lviv"
                        },
                        new
                        {
                            Id = new Guid("0f59fde6-0f68-4f68-ac83-adf475b0fa46"),
                            CityId = new Guid("e1ed30e2-01f6-479b-afe8-536c169bb35b"),
                            Language = "en",
                            Name = "Mykolaiv"
                        },
                        new
                        {
                            Id = new Guid("666c5bfc-888a-498b-b7d3-10c2270e9c01"),
                            CityId = new Guid("e6081aa1-0a4f-46e0-8d28-20cacc97bee5"),
                            Language = "en",
                            Name = "Odesa"
                        },
                        new
                        {
                            Id = new Guid("63ef3ef7-0abc-4ad6-9a45-8cf26ef69b49"),
                            CityId = new Guid("d454a0ff-a55a-47d0-8117-0518c4138c03"),
                            Language = "en",
                            Name = "Poltava"
                        },
                        new
                        {
                            Id = new Guid("42cda36f-eb24-4efa-a3c7-2486bcd94e65"),
                            CityId = new Guid("6311cbc0-e19d-4fc4-85ed-e9d56a0f28b7"),
                            Language = "en",
                            Name = "Rivne"
                        },
                        new
                        {
                            Id = new Guid("b22ea3d6-750f-4266-b126-18443c2273bb"),
                            CityId = new Guid("d9c93333-c1b3-4948-ad78-a3da70e5a04d"),
                            Language = "en",
                            Name = "Sumy"
                        },
                        new
                        {
                            Id = new Guid("53be6c95-4298-490c-9cc7-03d326eb592f"),
                            CityId = new Guid("af53446f-14bd-48f0-a03e-50c9c78a4de5"),
                            Language = "en",
                            Name = "Ternopil"
                        },
                        new
                        {
                            Id = new Guid("34fde5d5-b770-4401-ac74-5403963fc5bb"),
                            CityId = new Guid("1f6e3b35-2031-4f44-a28d-830e15d8fb66"),
                            Language = "en",
                            Name = "Uzhhorod"
                        },
                        new
                        {
                            Id = new Guid("2da4d7aa-58f2-440f-8fdc-e0c805fa6b68"),
                            CityId = new Guid("6c52291c-4a69-461b-a028-9eb46922db1c"),
                            Language = "en",
                            Name = "Kharkiv"
                        },
                        new
                        {
                            Id = new Guid("c6a4ee5b-4ae9-42a5-8721-bb4672498140"),
                            CityId = new Guid("6aba5a0a-8692-4008-a835-ccfeab512ccb"),
                            Language = "en",
                            Name = "Kherson"
                        },
                        new
                        {
                            Id = new Guid("1a099818-1c90-4907-bc37-5e7653ddf461"),
                            CityId = new Guid("a08b134d-d7ba-43fa-849d-04bfb9129a41"),
                            Language = "en",
                            Name = "Khmelnytskyi"
                        },
                        new
                        {
                            Id = new Guid("8ed57b96-9feb-48a9-9ad2-dc2d14d62ae6"),
                            CityId = new Guid("c4170339-d69d-4277-a0ea-de8fe5181882"),
                            Language = "en",
                            Name = "Cherkasy"
                        },
                        new
                        {
                            Id = new Guid("ba1a2c76-00fe-49b8-af3c-cb0c637837c2"),
                            CityId = new Guid("9f82d527-a4c9-4e89-a05a-26d628f75591"),
                            Language = "en",
                            Name = "Chernivtsi"
                        },
                        new
                        {
                            Id = new Guid("2ba5d89a-67fe-4f7c-afbc-81e4968c5395"),
                            CityId = new Guid("eae60ac4-527f-4cda-a041-7b5797410732"),
                            Language = "en",
                            Name = "Chernihiv"
                        },
                        new
                        {
                            Id = new Guid("cbd5dbc0-de68-40f7-9d80-ff2c0affe671"),
                            CityId = new Guid("916e6dae-c443-48e5-a58e-a9a7b5f70c1f"),
                            Language = "uk",
                            Name = "Варшава"
                        },
                        new
                        {
                            Id = new Guid("c759cf50-af0b-413b-9a8c-6b092c016775"),
                            CityId = new Guid("627e5434-5e3d-4809-870b-42bf2896276c"),
                            Language = "uk",
                            Name = "Люблін"
                        },
                        new
                        {
                            Id = new Guid("61dc5944-c14d-4363-b7bc-aee221181032"),
                            CityId = new Guid("916e6dae-c443-48e5-a58e-a9a7b5f70c1f"),
                            Language = "en",
                            Name = "Varshava"
                        },
                        new
                        {
                            Id = new Guid("9cbca3d6-0353-42af-93e7-dd9744f67a2a"),
                            CityId = new Guid("627e5434-5e3d-4809-870b-42bf2896276c"),
                            Language = "en",
                            Name = "Lublin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fd109275-a02d-481d-ae88-0f0345760922"),
                            ISO = "uk"
                        },
                        new
                        {
                            Id = new Guid("70ed4402-7dc0-4465-958b-7bce58ec0b5a"),
                            ISO = "pl"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CountryTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("169fb195-2c56-435c-9b41-bf11e369c942"),
                            CountryId = new Guid("fd109275-a02d-481d-ae88-0f0345760922"),
                            Language = "en",
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("420a43c9-86c9-429e-bd3a-ff6509753211"),
                            CountryId = new Guid("fd109275-a02d-481d-ae88-0f0345760922"),
                            Language = "uk",
                            Name = "Україна"
                        },
                        new
                        {
                            Id = new Guid("55533d36-2907-45d8-95c4-7a51737023f0"),
                            CountryId = new Guid("70ed4402-7dc0-4465-958b-7bce58ec0b5a"),
                            Language = "en",
                            Name = "Poland"
                        },
                        new
                        {
                            Id = new Guid("9f5404c6-8f65-4d7d-a113-41001e40e386"),
                            CountryId = new Guid("70ed4402-7dc0-4465-958b-7bce58ec0b5a"),
                            Language = "uk",
                            Name = "Польша"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VolunteerApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VolunteerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VolunteerUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VolunteerUserId", "VolunteerApplicationId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ProfilePictures");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d16b6a31-5241-4c76-b197-ea73336fc66b"),
                            Title = "medicine"
                        },
                        new
                        {
                            Id = new Guid("62c7465a-a926-458c-8058-9d1ce7addc44"),
                            Title = "cooking"
                        },
                        new
                        {
                            Id = new Guid("9bf84605-630e-4e74-a15b-3c4ee6569d2d"),
                            Title = "building"
                        },
                        new
                        {
                            Id = new Guid("81f5bff9-a3a9-41f4-937d-f4f233620f38"),
                            Title = "psychology"
                        });
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cd1eaeb8-ba87-46c8-ac6e-49d973f856c6"),
                            Language = "en",
                            Name = "medicine",
                            SkillId = new Guid("d16b6a31-5241-4c76-b197-ea73336fc66b")
                        },
                        new
                        {
                            Id = new Guid("e3241c0f-d1f0-4278-86b3-a43d89e6dce5"),
                            Language = "uk",
                            Name = "медицина",
                            SkillId = new Guid("d16b6a31-5241-4c76-b197-ea73336fc66b")
                        },
                        new
                        {
                            Id = new Guid("9ee3e6b8-c6f4-4462-9524-45da3e30bf79"),
                            Language = "en",
                            Name = "cooking",
                            SkillId = new Guid("62c7465a-a926-458c-8058-9d1ce7addc44")
                        },
                        new
                        {
                            Id = new Guid("34ea0bff-a529-49df-895c-fc595279863a"),
                            Language = "uk",
                            Name = "кулінарія",
                            SkillId = new Guid("62c7465a-a926-458c-8058-9d1ce7addc44")
                        },
                        new
                        {
                            Id = new Guid("2f5d3a78-6400-4ed4-ad1a-8cfd57f0d4af"),
                            Language = "en",
                            Name = "building",
                            SkillId = new Guid("9bf84605-630e-4e74-a15b-3c4ee6569d2d")
                        },
                        new
                        {
                            Id = new Guid("ed2dff62-1356-46eb-8e7a-6fd67c84eec5"),
                            Language = "uk",
                            Name = "будівництво",
                            SkillId = new Guid("9bf84605-630e-4e74-a15b-3c4ee6569d2d")
                        },
                        new
                        {
                            Id = new Guid("536107f5-f48e-44ec-81ab-325d82e2d843"),
                            Language = "en",
                            Name = "psychology",
                            SkillId = new Guid("81f5bff9-a3a9-41f4-937d-f4f233620f38")
                        },
                        new
                        {
                            Id = new Guid("3b9d5509-d339-47c9-8662-8bd87c65c1cf"),
                            Language = "uk",
                            Name = "психологія",
                            SkillId = new Guid("81f5bff9-a3a9-41f4-937d-f4f233620f38")
                        });
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ff10d8df-2432-4f9c-84f7-21e57514142a"),
                            CityId = new Guid("084a5d4b-3d1e-4e99-933e-af2f327d90d3"),
                            DateOfBirth = new DateTime(2023, 5, 2, 15, 51, 51, 5, DateTimeKind.Local).AddTicks(4506),
                            FirstName = "the first",
                            LastName = "admin",
                            Login = "ourfirstadmin",
                            Password = "Rk/ryiBNbnHx+s9i1IveCNNw4axYPQHm4T1eratfQlg=",
                            Phone = "+11111111111",
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Document")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DocumentFormat")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("NULL");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ApplicationId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("Applications")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("CityTranslations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("CountryTranslations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.HasOne("DAL.Entities.Volunteer", "Volunteer")
                        .WithMany("Messages")
                        .HasForeignKey("VolunteerUserId", "VolunteerApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithOne("ProfilePicture")
                        .HasForeignKey("DAL.Entities.ProfilePicture", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("SkillTranslations")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Volunteers")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Volunteers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("CityTranslations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("CountryTranslations");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Navigation("SkillTranslations");

                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ProfilePicture");

                    b.Navigation("UserSkills");

                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
