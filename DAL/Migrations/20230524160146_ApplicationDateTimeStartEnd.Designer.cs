// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(VolunteerNetServerDBContext))]
    [Migration("20230524160146_ApplicationDateTimeStartEnd")]
    partial class ApplicationDateTimeStartEnd
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("CurrentSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DateTimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimeStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<string>("OwnerCardName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequiredNumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<decimal?>("RequiredSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationSkill", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("ApplicationSkills");
                });

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7e967f81-e48c-44c5-a053-d1faa2fcb95a"),
                            Title = "health care"
                        },
                        new
                        {
                            Id = new Guid("aa49074c-b11d-49e7-a7b9-758a29a32fc8"),
                            Title = "education"
                        },
                        new
                        {
                            Id = new Guid("a06d86ed-b806-4837-babd-11515d5d1a39"),
                            Title = "sports and physical culture"
                        },
                        new
                        {
                            Id = new Guid("92d450ec-5f60-45ef-82e0-3462b56c9e0d"),
                            Title = "culture and art"
                        },
                        new
                        {
                            Id = new Guid("ace35111-c407-4b0b-bbdc-ee62ed5c506c"),
                            Title = "social programs"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CategoryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DescriptionCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9bddbacb-6154-492d-9f46-f674de77f3e4"),
                            CategoryId = new Guid("7e967f81-e48c-44c5-a053-d1faa2fcb95a"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "health care"
                        },
                        new
                        {
                            Id = new Guid("027c0fa6-670f-418a-b61a-07d50b4e7a5e"),
                            CategoryId = new Guid("7e967f81-e48c-44c5-a053-d1faa2fcb95a"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "охорона здоров'я"
                        },
                        new
                        {
                            Id = new Guid("495341a7-843c-4d70-9953-2e21db881080"),
                            CategoryId = new Guid("aa49074c-b11d-49e7-a7b9-758a29a32fc8"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "education"
                        },
                        new
                        {
                            Id = new Guid("83627830-b70c-4035-b5c6-ae6210413ea2"),
                            CategoryId = new Guid("aa49074c-b11d-49e7-a7b9-758a29a32fc8"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "освіта"
                        },
                        new
                        {
                            Id = new Guid("a5047a70-5e6e-4ee9-8249-43be4ac33916"),
                            CategoryId = new Guid("a06d86ed-b806-4837-babd-11515d5d1a39"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "sport and physical culture"
                        },
                        new
                        {
                            Id = new Guid("84b7dd6b-ce3b-4a07-9b98-865a412600a8"),
                            CategoryId = new Guid("a06d86ed-b806-4837-babd-11515d5d1a39"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "спорт та фізична культура"
                        },
                        new
                        {
                            Id = new Guid("64c58803-d9df-42ce-a68c-fd94acd41227"),
                            CategoryId = new Guid("92d450ec-5f60-45ef-82e0-3462b56c9e0d"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "culture and art"
                        },
                        new
                        {
                            Id = new Guid("604c1384-02f5-433e-a358-eb296afa72e0"),
                            CategoryId = new Guid("92d450ec-5f60-45ef-82e0-3462b56c9e0d"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "культура та мистецтво"
                        },
                        new
                        {
                            Id = new Guid("7adea280-d783-453d-906f-462390aad1a9"),
                            CategoryId = new Guid("ace35111-c407-4b0b-bbdc-ee62ed5c506c"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "social programs"
                        },
                        new
                        {
                            Id = new Guid("a2f2a8b4-d647-40c4-bf6a-ab1fb86a4822"),
                            CategoryId = new Guid("ace35111-c407-4b0b-bbdc-ee62ed5c506c"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "соціальні програми"
                        });
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("88751df7-ccba-4ff3-bdf9-a197dac65bef"),
                            CountryId = new Guid("d9d4868e-a9cc-4203-9ace-18f2bf479549"),
                            ISO = "vi"
                        },
                        new
                        {
                            Id = new Guid("f148d892-77d3-4c54-9f63-c196b747c7a5"),
                            CountryId = new Guid("d9d4868e-a9cc-4203-9ace-18f2bf479549"),
                            ISO = "dn"
                        },
                        new
                        {
                            Id = new Guid("97d98310-f708-4320-ad3c-08338e53dab0"),
                            CountryId = new Guid("d9d4868e-a9cc-4203-9ace-18f2bf479549"),
                            ISO = "zhy"
                        },
                        new
                        {
                            Id = new Guid("df4c219a-a309-4fae-872b-40ce3893fbb5"),
                            CountryId = new Guid("d9d4868e-a9cc-4203-9ace-18f2bf479549"),
                            ISO = "zp"
                        },
                        new
                        {
                            Id = new Guid("c3e9729f-b748-4a61-b244-f4bfc7789ab1"),
                            CountryId = new Guid("d9d4868e-a9cc-4203-9ace-18f2bf479549"),
                            ISO = "if"
                        },
                        new
                        {
                            Id = new Guid("5264b335-7e65-429c-8780-5765ac0ffbba"),
                            CountryId = new Guid("d9d4868e-a9cc-4203-9ace-18f2bf479549"),
                            ISO = "ky"
                        },
                        new
                        {
                            Id = new Guid("3d36d5b3-de03-442c-88c7-781eb646aca6"),
                            CountryId = new Guid("d9d4868e-a9cc-4203-9ace-18f2bf479549"),
                            ISO = "kr"
                        },
                        new
                        {
                            Id = new Guid("61ff2e21-93cd-40ba-99fe-39aeaf5620cb"),
                            CountryId = new Guid("d9d4868e-a9cc-4203-9ace-18f2bf479549"),
                            ISO = "lut"
                        },
                        new
                        {
                            Id = new Guid("ee8a898f-7e5a-4a2a-bbbc-ebe916a4b003"),
                            CountryId = new Guid("d9d4868e-a9cc-4203-9ace-18f2bf479549"),
                            ISO = "lv"
                        },
                        new
                        {
                            Id = new Guid("cfbdbccd-62cc-45cf-bbf9-6d92ce8d9026"),
                            CountryId = new Guid("d9d4868e-a9cc-4203-9ace-18f2bf479549"),
                            ISO = "my"
                        },
                        new
                        {
                            Id = new Guid("3ad87ffd-c3f7-4912-b9f0-2b8bd55cebd3"),
                            CountryId = new Guid("d9d4868e-a9cc-4203-9ace-18f2bf479549"),
                            ISO = "od"
                        },
                        new
                        {
                            Id = new Guid("d528db91-62e0-4574-b404-1ce85e75d13e"),
                            CountryId = new Guid("d9d4868e-a9cc-4203-9ace-18f2bf479549"),
                            ISO = "pol"
                        },
                        new
                        {
                            Id = new Guid("cbabe425-d438-4685-a635-4985ad202761"),
                            CountryId = new Guid("d9d4868e-a9cc-4203-9ace-18f2bf479549"),
                            ISO = "ri"
                        },
                        new
                        {
                            Id = new Guid("84cc0d49-1f95-4b0c-903d-0f5aec5e0ba9"),
                            CountryId = new Guid("d9d4868e-a9cc-4203-9ace-18f2bf479549"),
                            ISO = "su"
                        },
                        new
                        {
                            Id = new Guid("03ee41c2-0adb-454f-9c19-080492182e06"),
                            CountryId = new Guid("d9d4868e-a9cc-4203-9ace-18f2bf479549"),
                            ISO = "ter"
                        },
                        new
                        {
                            Id = new Guid("0209b246-6c25-4453-b323-59c727b30bce"),
                            CountryId = new Guid("d9d4868e-a9cc-4203-9ace-18f2bf479549"),
                            ISO = "uzh"
                        },
                        new
                        {
                            Id = new Guid("1f9b8c4c-4d4c-4a0a-931e-1b44dfb9a8a9"),
                            CountryId = new Guid("d9d4868e-a9cc-4203-9ace-18f2bf479549"),
                            ISO = "khar"
                        },
                        new
                        {
                            Id = new Guid("8a7a4bbf-de21-48fb-b03d-4cadbe720754"),
                            CountryId = new Guid("d9d4868e-a9cc-4203-9ace-18f2bf479549"),
                            ISO = "kher"
                        },
                        new
                        {
                            Id = new Guid("09734dde-c615-4fc0-9c3c-16a1d0efd8af"),
                            CountryId = new Guid("d9d4868e-a9cc-4203-9ace-18f2bf479549"),
                            ISO = "khm"
                        },
                        new
                        {
                            Id = new Guid("f255a072-8730-498e-81e1-c1601478023f"),
                            CountryId = new Guid("d9d4868e-a9cc-4203-9ace-18f2bf479549"),
                            ISO = "chk"
                        },
                        new
                        {
                            Id = new Guid("ae24aa24-76d0-4730-b9b9-ecfe0a6d45a9"),
                            CountryId = new Guid("d9d4868e-a9cc-4203-9ace-18f2bf479549"),
                            ISO = "chv"
                        },
                        new
                        {
                            Id = new Guid("9829a6c6-b9c7-4981-9230-78587e34d502"),
                            CountryId = new Guid("d9d4868e-a9cc-4203-9ace-18f2bf479549"),
                            ISO = "chh"
                        },
                        new
                        {
                            Id = new Guid("29341f55-f019-4f64-8909-2f929b4f4b3e"),
                            CountryId = new Guid("7d3b42f0-fc9a-4665-8a76-b8752629a2ca"),
                            ISO = "var"
                        },
                        new
                        {
                            Id = new Guid("81f2868b-11cf-460a-89b1-122dfaa52f06"),
                            CountryId = new Guid("7d3b42f0-fc9a-4665-8a76-b8752629a2ca"),
                            ISO = "lub"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("CityTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("92159a25-a55f-4c7e-8e63-50b85ec6be96"),
                            CityId = new Guid("88751df7-ccba-4ff3-bdf9-a197dac65bef"),
                            Language = "uk",
                            Name = "Вінниця"
                        },
                        new
                        {
                            Id = new Guid("8bab70c4-1a1c-47c8-b9b2-cee44b9199b5"),
                            CityId = new Guid("f148d892-77d3-4c54-9f63-c196b747c7a5"),
                            Language = "uk",
                            Name = "Дніпро"
                        },
                        new
                        {
                            Id = new Guid("47ff6917-6331-4716-b08c-bf68815b0e57"),
                            CityId = new Guid("97d98310-f708-4320-ad3c-08338e53dab0"),
                            Language = "uk",
                            Name = "Житомир"
                        },
                        new
                        {
                            Id = new Guid("0ceece7d-21d2-4a8a-b9d0-13a495182fe7"),
                            CityId = new Guid("df4c219a-a309-4fae-872b-40ce3893fbb5"),
                            Language = "uk",
                            Name = "Запоріжжя"
                        },
                        new
                        {
                            Id = new Guid("3e63402e-ab02-4c98-91c1-06c633a38803"),
                            CityId = new Guid("c3e9729f-b748-4a61-b244-f4bfc7789ab1"),
                            Language = "uk",
                            Name = "Івано-Франківськ"
                        },
                        new
                        {
                            Id = new Guid("4f638ba4-2183-4515-bfe1-51ac764e435a"),
                            CityId = new Guid("5264b335-7e65-429c-8780-5765ac0ffbba"),
                            Language = "uk",
                            Name = "Київ"
                        },
                        new
                        {
                            Id = new Guid("cfb214ef-040f-460a-a190-99d795fa6dfd"),
                            CityId = new Guid("3d36d5b3-de03-442c-88c7-781eb646aca6"),
                            Language = "uk",
                            Name = "Кропивницький"
                        },
                        new
                        {
                            Id = new Guid("849320b8-a94d-4476-a31b-20c32e008ea8"),
                            CityId = new Guid("61ff2e21-93cd-40ba-99fe-39aeaf5620cb"),
                            Language = "uk",
                            Name = "Луцьк"
                        },
                        new
                        {
                            Id = new Guid("86449f68-942c-4636-88d3-0f5a5a767224"),
                            CityId = new Guid("ee8a898f-7e5a-4a2a-bbbc-ebe916a4b003"),
                            Language = "uk",
                            Name = "Львів"
                        },
                        new
                        {
                            Id = new Guid("05a5ce9c-297e-4556-b05c-f0c1ac5101b1"),
                            CityId = new Guid("cfbdbccd-62cc-45cf-bbf9-6d92ce8d9026"),
                            Language = "uk",
                            Name = "Миколаїв"
                        },
                        new
                        {
                            Id = new Guid("a19bd89d-596d-4b0e-990f-d5ea66c33e60"),
                            CityId = new Guid("3ad87ffd-c3f7-4912-b9f0-2b8bd55cebd3"),
                            Language = "uk",
                            Name = "Одеса"
                        },
                        new
                        {
                            Id = new Guid("5ced654c-d354-41fd-b4b9-6fcc6659a76c"),
                            CityId = new Guid("d528db91-62e0-4574-b404-1ce85e75d13e"),
                            Language = "uk",
                            Name = "Полтава"
                        },
                        new
                        {
                            Id = new Guid("f8ba0ca2-a59b-4392-83f3-18f14b11a13d"),
                            CityId = new Guid("cbabe425-d438-4685-a635-4985ad202761"),
                            Language = "uk",
                            Name = "Рівне"
                        },
                        new
                        {
                            Id = new Guid("10da480b-55a2-4e24-99fb-a5222441bbb7"),
                            CityId = new Guid("84cc0d49-1f95-4b0c-903d-0f5aec5e0ba9"),
                            Language = "uk",
                            Name = "Суми"
                        },
                        new
                        {
                            Id = new Guid("18a82a8e-97eb-43dd-bcb7-0ba7203ae0ef"),
                            CityId = new Guid("03ee41c2-0adb-454f-9c19-080492182e06"),
                            Language = "uk",
                            Name = "Тернопіль"
                        },
                        new
                        {
                            Id = new Guid("7ac67aab-ea9a-4a6c-9b08-7e86f4d648b7"),
                            CityId = new Guid("0209b246-6c25-4453-b323-59c727b30bce"),
                            Language = "uk",
                            Name = "Ужгород"
                        },
                        new
                        {
                            Id = new Guid("2d84b3c0-f40d-44e5-b442-76c0a669a189"),
                            CityId = new Guid("1f9b8c4c-4d4c-4a0a-931e-1b44dfb9a8a9"),
                            Language = "uk",
                            Name = "Харків"
                        },
                        new
                        {
                            Id = new Guid("0fdbbee2-c273-4c50-b6b2-08ac45af5bf0"),
                            CityId = new Guid("8a7a4bbf-de21-48fb-b03d-4cadbe720754"),
                            Language = "uk",
                            Name = "Херсон"
                        },
                        new
                        {
                            Id = new Guid("cd3f2681-438d-4677-9bab-816f24e9e82b"),
                            CityId = new Guid("09734dde-c615-4fc0-9c3c-16a1d0efd8af"),
                            Language = "uk",
                            Name = "Хмельницький"
                        },
                        new
                        {
                            Id = new Guid("24460d5e-2095-4c8a-b1c9-f92c54d99e26"),
                            CityId = new Guid("f255a072-8730-498e-81e1-c1601478023f"),
                            Language = "uk",
                            Name = "Черкаси"
                        },
                        new
                        {
                            Id = new Guid("5d87d763-9e35-45a9-95fa-a739a7874a68"),
                            CityId = new Guid("ae24aa24-76d0-4730-b9b9-ecfe0a6d45a9"),
                            Language = "uk",
                            Name = "Чернівці"
                        },
                        new
                        {
                            Id = new Guid("84ce2169-4498-478a-90f9-db366f1e3728"),
                            CityId = new Guid("9829a6c6-b9c7-4981-9230-78587e34d502"),
                            Language = "uk",
                            Name = "Чернігів"
                        },
                        new
                        {
                            Id = new Guid("091041b0-7f7e-46a1-8d79-2dda90bd863b"),
                            CityId = new Guid("88751df7-ccba-4ff3-bdf9-a197dac65bef"),
                            Language = "en",
                            Name = "Vinnytsia"
                        },
                        new
                        {
                            Id = new Guid("b1a7ed5f-6b9b-4383-a175-ce754a0cff6b"),
                            CityId = new Guid("f148d892-77d3-4c54-9f63-c196b747c7a5"),
                            Language = "en",
                            Name = "Dnipro"
                        },
                        new
                        {
                            Id = new Guid("94a45287-e876-490d-a75f-12d6a11d9c7b"),
                            CityId = new Guid("97d98310-f708-4320-ad3c-08338e53dab0"),
                            Language = "en",
                            Name = "Zhytomyr"
                        },
                        new
                        {
                            Id = new Guid("8327a043-1659-40b0-901b-18705499ee3f"),
                            CityId = new Guid("df4c219a-a309-4fae-872b-40ce3893fbb5"),
                            Language = "en",
                            Name = "Zaporizhzhia"
                        },
                        new
                        {
                            Id = new Guid("f8451e3f-da33-49ef-875e-6d0483fc9eb9"),
                            CityId = new Guid("c3e9729f-b748-4a61-b244-f4bfc7789ab1"),
                            Language = "en",
                            Name = "Ivano-Frankivsk"
                        },
                        new
                        {
                            Id = new Guid("9a2258fc-bb50-418f-b733-acf82677cc52"),
                            CityId = new Guid("5264b335-7e65-429c-8780-5765ac0ffbba"),
                            Language = "en",
                            Name = "Kyiv"
                        },
                        new
                        {
                            Id = new Guid("0c69bb7f-94c1-4dd1-acdb-6a3b4ac8d32a"),
                            CityId = new Guid("3d36d5b3-de03-442c-88c7-781eb646aca6"),
                            Language = "en",
                            Name = "Kropyvnytskyi"
                        },
                        new
                        {
                            Id = new Guid("63f40b77-9e3c-4c04-980b-c276c71ac04b"),
                            CityId = new Guid("61ff2e21-93cd-40ba-99fe-39aeaf5620cb"),
                            Language = "en",
                            Name = "Lutsk"
                        },
                        new
                        {
                            Id = new Guid("47f0f5f2-8b07-487b-9a98-804d6d8d0354"),
                            CityId = new Guid("ee8a898f-7e5a-4a2a-bbbc-ebe916a4b003"),
                            Language = "en",
                            Name = "Lviv"
                        },
                        new
                        {
                            Id = new Guid("a6d3c078-f5a7-4d48-addb-bd81154b3da6"),
                            CityId = new Guid("cfbdbccd-62cc-45cf-bbf9-6d92ce8d9026"),
                            Language = "en",
                            Name = "Mykolaiv"
                        },
                        new
                        {
                            Id = new Guid("3049e609-5a4d-4a12-8c7f-603e97e1ac04"),
                            CityId = new Guid("3ad87ffd-c3f7-4912-b9f0-2b8bd55cebd3"),
                            Language = "en",
                            Name = "Odesa"
                        },
                        new
                        {
                            Id = new Guid("2ccbf932-3378-4adf-b6f8-03f591428345"),
                            CityId = new Guid("d528db91-62e0-4574-b404-1ce85e75d13e"),
                            Language = "en",
                            Name = "Poltava"
                        },
                        new
                        {
                            Id = new Guid("99033d89-c5c8-4454-b11c-6567a0d2162d"),
                            CityId = new Guid("cbabe425-d438-4685-a635-4985ad202761"),
                            Language = "en",
                            Name = "Rivne"
                        },
                        new
                        {
                            Id = new Guid("c04e2dc9-399e-49c3-9d97-08b626ee13ec"),
                            CityId = new Guid("84cc0d49-1f95-4b0c-903d-0f5aec5e0ba9"),
                            Language = "en",
                            Name = "Sumy"
                        },
                        new
                        {
                            Id = new Guid("f682650d-3301-48ff-8b36-088f4eb7f778"),
                            CityId = new Guid("03ee41c2-0adb-454f-9c19-080492182e06"),
                            Language = "en",
                            Name = "Ternopil"
                        },
                        new
                        {
                            Id = new Guid("81fb66d9-707a-4a65-98cd-57c7da61c814"),
                            CityId = new Guid("0209b246-6c25-4453-b323-59c727b30bce"),
                            Language = "en",
                            Name = "Uzhhorod"
                        },
                        new
                        {
                            Id = new Guid("22520e0e-60fb-4243-974d-47c288ceff7f"),
                            CityId = new Guid("1f9b8c4c-4d4c-4a0a-931e-1b44dfb9a8a9"),
                            Language = "en",
                            Name = "Kharkiv"
                        },
                        new
                        {
                            Id = new Guid("bcb295b3-78ef-4234-a6c5-893a29a5d1a8"),
                            CityId = new Guid("8a7a4bbf-de21-48fb-b03d-4cadbe720754"),
                            Language = "en",
                            Name = "Kherson"
                        },
                        new
                        {
                            Id = new Guid("7bfb609a-b13a-4054-ad1d-e34c7614f426"),
                            CityId = new Guid("09734dde-c615-4fc0-9c3c-16a1d0efd8af"),
                            Language = "en",
                            Name = "Khmelnytskyi"
                        },
                        new
                        {
                            Id = new Guid("95cd587c-2e7c-4650-b044-92ad2765ee98"),
                            CityId = new Guid("f255a072-8730-498e-81e1-c1601478023f"),
                            Language = "en",
                            Name = "Cherkasy"
                        },
                        new
                        {
                            Id = new Guid("0e62629a-58c4-40b4-9cd9-a15b5c32922e"),
                            CityId = new Guid("ae24aa24-76d0-4730-b9b9-ecfe0a6d45a9"),
                            Language = "en",
                            Name = "Chernivtsi"
                        },
                        new
                        {
                            Id = new Guid("2c86db82-432d-40e6-a472-c95697a1f4d3"),
                            CityId = new Guid("9829a6c6-b9c7-4981-9230-78587e34d502"),
                            Language = "en",
                            Name = "Chernihiv"
                        },
                        new
                        {
                            Id = new Guid("cff5174b-f103-4a2b-8bb6-df0497924cc5"),
                            CityId = new Guid("29341f55-f019-4f64-8909-2f929b4f4b3e"),
                            Language = "uk",
                            Name = "Варшава"
                        },
                        new
                        {
                            Id = new Guid("f7c61d92-ebfc-4e98-9913-ac3fe265097f"),
                            CityId = new Guid("81f2868b-11cf-460a-89b1-122dfaa52f06"),
                            Language = "uk",
                            Name = "Люблін"
                        },
                        new
                        {
                            Id = new Guid("3621ad67-9c8e-42a2-a7ed-cbb6f1de0510"),
                            CityId = new Guid("29341f55-f019-4f64-8909-2f929b4f4b3e"),
                            Language = "en",
                            Name = "Varshava"
                        },
                        new
                        {
                            Id = new Guid("635c62c0-875b-43af-8ce5-9f6140ed610d"),
                            CityId = new Guid("81f2868b-11cf-460a-89b1-122dfaa52f06"),
                            Language = "en",
                            Name = "Lublin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d9d4868e-a9cc-4203-9ace-18f2bf479549"),
                            ISO = "uk"
                        },
                        new
                        {
                            Id = new Guid("7d3b42f0-fc9a-4665-8a76-b8752629a2ca"),
                            ISO = "pl"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CountryTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3bd4d8a2-1d92-48b4-8975-8fde02674b10"),
                            CountryId = new Guid("d9d4868e-a9cc-4203-9ace-18f2bf479549"),
                            Language = "en",
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("46206528-cd45-42ba-a8c2-2f1000a059d5"),
                            CountryId = new Guid("d9d4868e-a9cc-4203-9ace-18f2bf479549"),
                            Language = "uk",
                            Name = "Україна"
                        },
                        new
                        {
                            Id = new Guid("2360c727-215c-4856-b8ae-d5769c075a85"),
                            CountryId = new Guid("7d3b42f0-fc9a-4665-8a76-b8752629a2ca"),
                            Language = "en",
                            Name = "Poland"
                        },
                        new
                        {
                            Id = new Guid("3d71016a-ed03-4f0d-974b-8f66944e923f"),
                            CountryId = new Guid("7d3b42f0-fc9a-4665-8a76-b8752629a2ca"),
                            Language = "uk",
                            Name = "Польша"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Donate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTimeCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderCardBank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SenderCardCountry")
                        .HasColumnType("int");

                    b.Property<string>("SenderCardMask2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderCardType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SenderCommission")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Donates");
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VolunteerApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VolunteerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VolunteerUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VolunteerUserId", "VolunteerApplicationId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DAL.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplictionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserRecipientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserSenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplictionId");

                    b.HasIndex("UserRecipientId");

                    b.HasIndex("UserSenderId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ProfilePictures");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("93288774-f420-42ae-870a-76c74647d06e"),
                            Title = "medicine"
                        },
                        new
                        {
                            Id = new Guid("16e3139c-2174-49cb-bde7-320f2f520f38"),
                            Title = "cooking"
                        },
                        new
                        {
                            Id = new Guid("9de3dfd0-d5e3-40c9-a1e6-9e2f54c66037"),
                            Title = "building"
                        },
                        new
                        {
                            Id = new Guid("a7dd22a0-329b-433a-84d6-4b8ecaf84f33"),
                            Title = "psychology"
                        });
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("83109f57-89a1-4adc-9838-98ee6199265b"),
                            Language = "en",
                            Name = "medicine",
                            SkillId = new Guid("93288774-f420-42ae-870a-76c74647d06e")
                        },
                        new
                        {
                            Id = new Guid("8ac3339f-836f-450d-b190-62c262f2620b"),
                            Language = "uk",
                            Name = "медицина",
                            SkillId = new Guid("93288774-f420-42ae-870a-76c74647d06e")
                        },
                        new
                        {
                            Id = new Guid("325f2f10-c740-4559-ad8c-cdea528944b3"),
                            Language = "en",
                            Name = "cooking",
                            SkillId = new Guid("16e3139c-2174-49cb-bde7-320f2f520f38")
                        },
                        new
                        {
                            Id = new Guid("eae657c7-b075-40a8-a410-134ef4731e22"),
                            Language = "uk",
                            Name = "кулінарія",
                            SkillId = new Guid("16e3139c-2174-49cb-bde7-320f2f520f38")
                        },
                        new
                        {
                            Id = new Guid("83340463-e67b-446b-9178-8160855ff360"),
                            Language = "en",
                            Name = "building",
                            SkillId = new Guid("9de3dfd0-d5e3-40c9-a1e6-9e2f54c66037")
                        },
                        new
                        {
                            Id = new Guid("9b91d80a-d411-4f3d-b126-b94b9d53e243"),
                            Language = "uk",
                            Name = "будівництво",
                            SkillId = new Guid("9de3dfd0-d5e3-40c9-a1e6-9e2f54c66037")
                        },
                        new
                        {
                            Id = new Guid("11a73074-8673-4467-9555-28a24b8edb18"),
                            Language = "en",
                            Name = "psychology",
                            SkillId = new Guid("a7dd22a0-329b-433a-84d6-4b8ecaf84f33")
                        },
                        new
                        {
                            Id = new Guid("f38601f6-9165-41b5-b73c-a0f8d7baf623"),
                            Language = "uk",
                            Name = "психологія",
                            SkillId = new Guid("a7dd22a0-329b-433a-84d6-4b8ecaf84f33")
                        });
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2cd76fa5-1bbe-4a8b-a2b5-3187f3f05c22"),
                            CityId = new Guid("88751df7-ccba-4ff3-bdf9-a197dac65bef"),
                            DateOfBirth = new DateTime(2023, 5, 24, 19, 0, 43, 43, DateTimeKind.Local).AddTicks(9190),
                            FirstName = "the first",
                            LastName = "admin",
                            Login = "ourfirstadmin",
                            Password = "Rk/ryiBNbnHx+s9i1IveCNNw4axYPQHm4T1eratfQlg=",
                            Phone = "+11111111111",
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Document")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DocumentFormat")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("NULL");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ApplicationId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.HasOne("DAL.Entities.Category", "Category")
                        .WithMany("Applications")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("Applications")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationSkill", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("ApplicationSkills")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("ApplicationSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DAL.Entities.CategoryTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Category", "Category")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("CityTranslations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("CountryTranslations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.Donate", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Donates")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.HasOne("DAL.Entities.Volunteer", "Volunteer")
                        .WithMany("Messages")
                        .HasForeignKey("VolunteerUserId", "VolunteerApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("DAL.Entities.Notification", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Notifications")
                        .HasForeignKey("ApplictionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "UserRecipient")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("UserRecipientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "UserSender")
                        .WithMany("SentNotifications")
                        .HasForeignKey("UserSenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("UserRecipient");

                    b.Navigation("UserSender");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithOne("ProfilePicture")
                        .HasForeignKey("DAL.Entities.ProfilePicture", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("SkillTranslations")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Volunteers")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Volunteers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Navigation("ApplicationSkills");

                    b.Navigation("Donates");

                    b.Navigation("Notifications");

                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("CategoryTranslations");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("CityTranslations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("CountryTranslations");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Navigation("ApplicationSkills");

                    b.Navigation("SkillTranslations");

                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ProfilePicture");

                    b.Navigation("ReceivedNotifications");

                    b.Navigation("SentNotifications");

                    b.Navigation("UserSkills");

                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
