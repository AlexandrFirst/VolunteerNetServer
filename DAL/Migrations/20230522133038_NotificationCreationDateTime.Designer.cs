// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(VolunteerNetServerDBContext))]
    [Migration("20230522133038_NotificationCreationDateTime")]
    partial class NotificationCreationDateTime
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("CurrentSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<string>("OwnerCardName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequiredNumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<decimal?>("RequiredSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationSkill", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("ApplicationSkills");
                });

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7d8fda2a-22dd-4413-b746-32bc94833dfe"),
                            Title = "health care"
                        },
                        new
                        {
                            Id = new Guid("9254723d-251d-45eb-bdf9-5fe2a8e83808"),
                            Title = "education"
                        },
                        new
                        {
                            Id = new Guid("0a318728-aca4-451b-b214-8eb8ccd7afaf"),
                            Title = "sports and physical culture"
                        },
                        new
                        {
                            Id = new Guid("db65f846-82a1-4b37-891f-584686ce8233"),
                            Title = "culture and art"
                        },
                        new
                        {
                            Id = new Guid("4a375af9-c492-439c-bad4-5cfdbe19250c"),
                            Title = "social programs"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CategoryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DescriptionCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9014a5da-0a4c-44ac-a4ca-61e68c353317"),
                            CategoryId = new Guid("7d8fda2a-22dd-4413-b746-32bc94833dfe"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "health care"
                        },
                        new
                        {
                            Id = new Guid("31810edd-8f83-4018-b9e9-cdefe382286b"),
                            CategoryId = new Guid("7d8fda2a-22dd-4413-b746-32bc94833dfe"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "охорона здоров'я"
                        },
                        new
                        {
                            Id = new Guid("a21e8cc8-d173-4bc9-ad52-66e690da5ce2"),
                            CategoryId = new Guid("9254723d-251d-45eb-bdf9-5fe2a8e83808"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "education"
                        },
                        new
                        {
                            Id = new Guid("a08a081e-3624-48bd-a9e8-42711fe1017a"),
                            CategoryId = new Guid("9254723d-251d-45eb-bdf9-5fe2a8e83808"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "освіта"
                        },
                        new
                        {
                            Id = new Guid("0e3949cf-6bbd-4148-8a30-fa2b0b640452"),
                            CategoryId = new Guid("0a318728-aca4-451b-b214-8eb8ccd7afaf"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "sport and physical culture"
                        },
                        new
                        {
                            Id = new Guid("478fa208-0151-41e0-a534-1dc8edc7b560"),
                            CategoryId = new Guid("0a318728-aca4-451b-b214-8eb8ccd7afaf"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "спорт та фізична культура"
                        },
                        new
                        {
                            Id = new Guid("4f118f7d-159c-4a28-a1fb-094f43a2ba17"),
                            CategoryId = new Guid("db65f846-82a1-4b37-891f-584686ce8233"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "culture and art"
                        },
                        new
                        {
                            Id = new Guid("f232b54d-33fb-4800-bff3-c7e6ea8200af"),
                            CategoryId = new Guid("db65f846-82a1-4b37-891f-584686ce8233"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "культура та мистецтво"
                        },
                        new
                        {
                            Id = new Guid("d6c55793-6140-4f92-9ffe-31649e7022d3"),
                            CategoryId = new Guid("4a375af9-c492-439c-bad4-5cfdbe19250c"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "social programs"
                        },
                        new
                        {
                            Id = new Guid("aef2263e-e82d-41fa-9b19-aea81f8d8cfe"),
                            CategoryId = new Guid("4a375af9-c492-439c-bad4-5cfdbe19250c"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "соціальні програми"
                        });
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6dbeca0f-d1c2-456d-a6b6-a87903db2166"),
                            CountryId = new Guid("b9514f29-6c67-4789-b241-241ff8937424"),
                            ISO = "vi"
                        },
                        new
                        {
                            Id = new Guid("19626f4d-58db-4871-a59e-ae253aec608c"),
                            CountryId = new Guid("b9514f29-6c67-4789-b241-241ff8937424"),
                            ISO = "dn"
                        },
                        new
                        {
                            Id = new Guid("ad09045c-8a4a-45cc-8d8e-1be0077f50be"),
                            CountryId = new Guid("b9514f29-6c67-4789-b241-241ff8937424"),
                            ISO = "zhy"
                        },
                        new
                        {
                            Id = new Guid("c7343143-4a8d-4fe8-b0d6-505615edd73d"),
                            CountryId = new Guid("b9514f29-6c67-4789-b241-241ff8937424"),
                            ISO = "zp"
                        },
                        new
                        {
                            Id = new Guid("60d9b14a-c122-48f2-879e-10e2efbe07c9"),
                            CountryId = new Guid("b9514f29-6c67-4789-b241-241ff8937424"),
                            ISO = "if"
                        },
                        new
                        {
                            Id = new Guid("ac22738d-3784-488e-90ed-821a9b538beb"),
                            CountryId = new Guid("b9514f29-6c67-4789-b241-241ff8937424"),
                            ISO = "ky"
                        },
                        new
                        {
                            Id = new Guid("42cf1000-ef21-4aab-b711-dfb3c5a3a8c7"),
                            CountryId = new Guid("b9514f29-6c67-4789-b241-241ff8937424"),
                            ISO = "kr"
                        },
                        new
                        {
                            Id = new Guid("3504c2aa-34df-486c-af30-9dfd901a6224"),
                            CountryId = new Guid("b9514f29-6c67-4789-b241-241ff8937424"),
                            ISO = "lut"
                        },
                        new
                        {
                            Id = new Guid("27a0a107-e990-4882-8d00-977960e5f53f"),
                            CountryId = new Guid("b9514f29-6c67-4789-b241-241ff8937424"),
                            ISO = "lv"
                        },
                        new
                        {
                            Id = new Guid("3c33b6c5-650f-4e42-bfe6-2df6bb9fd2f0"),
                            CountryId = new Guid("b9514f29-6c67-4789-b241-241ff8937424"),
                            ISO = "my"
                        },
                        new
                        {
                            Id = new Guid("c55d6a62-a511-4390-b013-b812a70c2b9d"),
                            CountryId = new Guid("b9514f29-6c67-4789-b241-241ff8937424"),
                            ISO = "od"
                        },
                        new
                        {
                            Id = new Guid("d2812cf2-207d-47e7-9097-6466f0af7c91"),
                            CountryId = new Guid("b9514f29-6c67-4789-b241-241ff8937424"),
                            ISO = "pol"
                        },
                        new
                        {
                            Id = new Guid("8db7bb2e-ebd0-4813-9890-4d1628ab2d57"),
                            CountryId = new Guid("b9514f29-6c67-4789-b241-241ff8937424"),
                            ISO = "ri"
                        },
                        new
                        {
                            Id = new Guid("2d4837aa-93c2-4673-b55c-925f9ac996b7"),
                            CountryId = new Guid("b9514f29-6c67-4789-b241-241ff8937424"),
                            ISO = "su"
                        },
                        new
                        {
                            Id = new Guid("41f8ee35-2be2-494e-8cac-ddf5e41cb1d9"),
                            CountryId = new Guid("b9514f29-6c67-4789-b241-241ff8937424"),
                            ISO = "ter"
                        },
                        new
                        {
                            Id = new Guid("9b502b54-c150-4677-a428-739dd3911672"),
                            CountryId = new Guid("b9514f29-6c67-4789-b241-241ff8937424"),
                            ISO = "uzh"
                        },
                        new
                        {
                            Id = new Guid("9c48eb2d-7e02-43b6-8814-70059571a267"),
                            CountryId = new Guid("b9514f29-6c67-4789-b241-241ff8937424"),
                            ISO = "khar"
                        },
                        new
                        {
                            Id = new Guid("ff50dcc3-af03-4648-adf0-0e4a201200d8"),
                            CountryId = new Guid("b9514f29-6c67-4789-b241-241ff8937424"),
                            ISO = "kher"
                        },
                        new
                        {
                            Id = new Guid("651f20bd-8c55-4c9a-aa1d-7194411b8aae"),
                            CountryId = new Guid("b9514f29-6c67-4789-b241-241ff8937424"),
                            ISO = "khm"
                        },
                        new
                        {
                            Id = new Guid("62524ef2-61dd-43bc-8aad-6ed05bdf4107"),
                            CountryId = new Guid("b9514f29-6c67-4789-b241-241ff8937424"),
                            ISO = "chk"
                        },
                        new
                        {
                            Id = new Guid("33f23575-0597-4a69-aaf7-2ca22d7d459c"),
                            CountryId = new Guid("b9514f29-6c67-4789-b241-241ff8937424"),
                            ISO = "chv"
                        },
                        new
                        {
                            Id = new Guid("9cad1177-83be-4725-8708-904b5a7fe86e"),
                            CountryId = new Guid("b9514f29-6c67-4789-b241-241ff8937424"),
                            ISO = "chh"
                        },
                        new
                        {
                            Id = new Guid("24457f00-04a5-4a60-9a92-4d479b04854e"),
                            CountryId = new Guid("88fccf23-3e9d-4cec-b936-50f48a5f6591"),
                            ISO = "var"
                        },
                        new
                        {
                            Id = new Guid("98305c43-85b8-4bc6-9aa6-4011ace2b225"),
                            CountryId = new Guid("88fccf23-3e9d-4cec-b936-50f48a5f6591"),
                            ISO = "lub"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("CityTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5a972d7c-c71d-4d67-99a4-a957da4b7eb7"),
                            CityId = new Guid("6dbeca0f-d1c2-456d-a6b6-a87903db2166"),
                            Language = "uk",
                            Name = "Вінниця"
                        },
                        new
                        {
                            Id = new Guid("7664ef9a-a7f5-46f0-b658-8ac4597308b3"),
                            CityId = new Guid("19626f4d-58db-4871-a59e-ae253aec608c"),
                            Language = "uk",
                            Name = "Дніпро"
                        },
                        new
                        {
                            Id = new Guid("5e6d3277-429e-4eed-8b21-ae37ee2b5c5a"),
                            CityId = new Guid("ad09045c-8a4a-45cc-8d8e-1be0077f50be"),
                            Language = "uk",
                            Name = "Житомир"
                        },
                        new
                        {
                            Id = new Guid("82d87103-88f8-4a54-aebc-59b57797eaee"),
                            CityId = new Guid("c7343143-4a8d-4fe8-b0d6-505615edd73d"),
                            Language = "uk",
                            Name = "Запоріжжя"
                        },
                        new
                        {
                            Id = new Guid("a7ff426c-0fdd-477d-8246-248956032625"),
                            CityId = new Guid("60d9b14a-c122-48f2-879e-10e2efbe07c9"),
                            Language = "uk",
                            Name = "Івано-Франківськ"
                        },
                        new
                        {
                            Id = new Guid("f1e78705-d299-4b1b-b1b4-16519b37c923"),
                            CityId = new Guid("ac22738d-3784-488e-90ed-821a9b538beb"),
                            Language = "uk",
                            Name = "Київ"
                        },
                        new
                        {
                            Id = new Guid("49bf166a-e280-4513-ab06-05ab76e26203"),
                            CityId = new Guid("42cf1000-ef21-4aab-b711-dfb3c5a3a8c7"),
                            Language = "uk",
                            Name = "Кропивницький"
                        },
                        new
                        {
                            Id = new Guid("8637ea17-5652-4b09-875e-c6dce93be310"),
                            CityId = new Guid("3504c2aa-34df-486c-af30-9dfd901a6224"),
                            Language = "uk",
                            Name = "Луцьк"
                        },
                        new
                        {
                            Id = new Guid("cbed2a6c-389c-4e3f-90a1-3136e6090283"),
                            CityId = new Guid("27a0a107-e990-4882-8d00-977960e5f53f"),
                            Language = "uk",
                            Name = "Львів"
                        },
                        new
                        {
                            Id = new Guid("f54df255-db5f-400b-958f-1a5412171e18"),
                            CityId = new Guid("3c33b6c5-650f-4e42-bfe6-2df6bb9fd2f0"),
                            Language = "uk",
                            Name = "Миколаїв"
                        },
                        new
                        {
                            Id = new Guid("2f0bef12-d704-4e88-8501-36dcb995f8ac"),
                            CityId = new Guid("c55d6a62-a511-4390-b013-b812a70c2b9d"),
                            Language = "uk",
                            Name = "Одеса"
                        },
                        new
                        {
                            Id = new Guid("a007c443-3940-46ff-99c9-05394c2e670a"),
                            CityId = new Guid("d2812cf2-207d-47e7-9097-6466f0af7c91"),
                            Language = "uk",
                            Name = "Полтава"
                        },
                        new
                        {
                            Id = new Guid("1f59290a-c265-488c-8afe-114621fa2a27"),
                            CityId = new Guid("8db7bb2e-ebd0-4813-9890-4d1628ab2d57"),
                            Language = "uk",
                            Name = "Рівне"
                        },
                        new
                        {
                            Id = new Guid("ce6613bd-f8f0-4cc5-b26b-bd258221557a"),
                            CityId = new Guid("2d4837aa-93c2-4673-b55c-925f9ac996b7"),
                            Language = "uk",
                            Name = "Суми"
                        },
                        new
                        {
                            Id = new Guid("9f3f6efd-34f5-4a0c-a8e7-0e126fa88843"),
                            CityId = new Guid("41f8ee35-2be2-494e-8cac-ddf5e41cb1d9"),
                            Language = "uk",
                            Name = "Тернопіль"
                        },
                        new
                        {
                            Id = new Guid("8d2c6788-aa00-46e5-a385-05b8ceaa40cb"),
                            CityId = new Guid("9b502b54-c150-4677-a428-739dd3911672"),
                            Language = "uk",
                            Name = "Ужгород"
                        },
                        new
                        {
                            Id = new Guid("12359e1e-aa1a-4256-8a8e-1634dc1ebfb8"),
                            CityId = new Guid("9c48eb2d-7e02-43b6-8814-70059571a267"),
                            Language = "uk",
                            Name = "Харків"
                        },
                        new
                        {
                            Id = new Guid("58a58a0b-26e4-4806-8816-fc4f866239a8"),
                            CityId = new Guid("ff50dcc3-af03-4648-adf0-0e4a201200d8"),
                            Language = "uk",
                            Name = "Херсон"
                        },
                        new
                        {
                            Id = new Guid("eba1fb02-0cfe-49f6-97b9-2dd61c55907c"),
                            CityId = new Guid("651f20bd-8c55-4c9a-aa1d-7194411b8aae"),
                            Language = "uk",
                            Name = "Хмельницький"
                        },
                        new
                        {
                            Id = new Guid("2fdd8689-0f0c-4c97-b217-9637b615b4a0"),
                            CityId = new Guid("62524ef2-61dd-43bc-8aad-6ed05bdf4107"),
                            Language = "uk",
                            Name = "Черкаси"
                        },
                        new
                        {
                            Id = new Guid("3b76b026-3676-4a27-b7bd-68cbeac04983"),
                            CityId = new Guid("33f23575-0597-4a69-aaf7-2ca22d7d459c"),
                            Language = "uk",
                            Name = "Чернівці"
                        },
                        new
                        {
                            Id = new Guid("8083e2cd-6685-4e29-9869-aa6cc2f137e5"),
                            CityId = new Guid("9cad1177-83be-4725-8708-904b5a7fe86e"),
                            Language = "uk",
                            Name = "Чернігів"
                        },
                        new
                        {
                            Id = new Guid("ecff4b53-e76b-48b8-aa60-49db57f0a21a"),
                            CityId = new Guid("6dbeca0f-d1c2-456d-a6b6-a87903db2166"),
                            Language = "en",
                            Name = "Vinnytsia"
                        },
                        new
                        {
                            Id = new Guid("512c0b51-1112-4ace-bc43-2d569b286b24"),
                            CityId = new Guid("19626f4d-58db-4871-a59e-ae253aec608c"),
                            Language = "en",
                            Name = "Dnipro"
                        },
                        new
                        {
                            Id = new Guid("9d358f70-99cf-4d00-82e8-c25408c06d93"),
                            CityId = new Guid("ad09045c-8a4a-45cc-8d8e-1be0077f50be"),
                            Language = "en",
                            Name = "Zhytomyr"
                        },
                        new
                        {
                            Id = new Guid("f2f2ace8-7878-4f58-a642-64131c9862e7"),
                            CityId = new Guid("c7343143-4a8d-4fe8-b0d6-505615edd73d"),
                            Language = "en",
                            Name = "Zaporizhzhia"
                        },
                        new
                        {
                            Id = new Guid("b393a779-9483-4469-a8e3-f86ae79ad865"),
                            CityId = new Guid("60d9b14a-c122-48f2-879e-10e2efbe07c9"),
                            Language = "en",
                            Name = "Ivano-Frankivsk"
                        },
                        new
                        {
                            Id = new Guid("7a60f88e-b2d9-4e8d-be7c-18ca70a7b098"),
                            CityId = new Guid("ac22738d-3784-488e-90ed-821a9b538beb"),
                            Language = "en",
                            Name = "Kyiv"
                        },
                        new
                        {
                            Id = new Guid("04a5343d-0d2a-451c-b6d2-b9357eb19d7f"),
                            CityId = new Guid("42cf1000-ef21-4aab-b711-dfb3c5a3a8c7"),
                            Language = "en",
                            Name = "Kropyvnytskyi"
                        },
                        new
                        {
                            Id = new Guid("819b2e2c-14ea-4f14-9f8a-f1b5ec51a416"),
                            CityId = new Guid("3504c2aa-34df-486c-af30-9dfd901a6224"),
                            Language = "en",
                            Name = "Lutsk"
                        },
                        new
                        {
                            Id = new Guid("6def80fe-bbf4-492d-8e64-a938d5d86080"),
                            CityId = new Guid("27a0a107-e990-4882-8d00-977960e5f53f"),
                            Language = "en",
                            Name = "Lviv"
                        },
                        new
                        {
                            Id = new Guid("9f9a4ac4-ed49-4d1a-93d2-832f2779eea7"),
                            CityId = new Guid("3c33b6c5-650f-4e42-bfe6-2df6bb9fd2f0"),
                            Language = "en",
                            Name = "Mykolaiv"
                        },
                        new
                        {
                            Id = new Guid("2305f186-060f-457f-b424-a80228e22cde"),
                            CityId = new Guid("c55d6a62-a511-4390-b013-b812a70c2b9d"),
                            Language = "en",
                            Name = "Odesa"
                        },
                        new
                        {
                            Id = new Guid("11819d14-ce6f-4a28-ba77-41d1549d24f1"),
                            CityId = new Guid("d2812cf2-207d-47e7-9097-6466f0af7c91"),
                            Language = "en",
                            Name = "Poltava"
                        },
                        new
                        {
                            Id = new Guid("efc31b09-9f5a-456c-8226-953358abd7a7"),
                            CityId = new Guid("8db7bb2e-ebd0-4813-9890-4d1628ab2d57"),
                            Language = "en",
                            Name = "Rivne"
                        },
                        new
                        {
                            Id = new Guid("e2e50eed-33a6-45b1-aa35-783f82acdf7f"),
                            CityId = new Guid("2d4837aa-93c2-4673-b55c-925f9ac996b7"),
                            Language = "en",
                            Name = "Sumy"
                        },
                        new
                        {
                            Id = new Guid("bd162e59-2a76-42f4-8a98-4eb4b9d7d1a5"),
                            CityId = new Guid("41f8ee35-2be2-494e-8cac-ddf5e41cb1d9"),
                            Language = "en",
                            Name = "Ternopil"
                        },
                        new
                        {
                            Id = new Guid("a959c9e2-2ad7-4be3-bced-8bf416e5e233"),
                            CityId = new Guid("9b502b54-c150-4677-a428-739dd3911672"),
                            Language = "en",
                            Name = "Uzhhorod"
                        },
                        new
                        {
                            Id = new Guid("878ac760-ef52-499c-9edb-8674c88d06ce"),
                            CityId = new Guid("9c48eb2d-7e02-43b6-8814-70059571a267"),
                            Language = "en",
                            Name = "Kharkiv"
                        },
                        new
                        {
                            Id = new Guid("c2eded93-41c2-431c-b727-d109dd48f3aa"),
                            CityId = new Guid("ff50dcc3-af03-4648-adf0-0e4a201200d8"),
                            Language = "en",
                            Name = "Kherson"
                        },
                        new
                        {
                            Id = new Guid("28df97ef-4fc5-4440-a51f-01d0511377ba"),
                            CityId = new Guid("651f20bd-8c55-4c9a-aa1d-7194411b8aae"),
                            Language = "en",
                            Name = "Khmelnytskyi"
                        },
                        new
                        {
                            Id = new Guid("527c72c6-0034-4e34-a4fa-28b47bd7e9d4"),
                            CityId = new Guid("62524ef2-61dd-43bc-8aad-6ed05bdf4107"),
                            Language = "en",
                            Name = "Cherkasy"
                        },
                        new
                        {
                            Id = new Guid("6ed75758-49c5-4b85-b520-f9aa78d9511c"),
                            CityId = new Guid("33f23575-0597-4a69-aaf7-2ca22d7d459c"),
                            Language = "en",
                            Name = "Chernivtsi"
                        },
                        new
                        {
                            Id = new Guid("897cd6dd-b968-4b98-a854-ba06f0b02307"),
                            CityId = new Guid("9cad1177-83be-4725-8708-904b5a7fe86e"),
                            Language = "en",
                            Name = "Chernihiv"
                        },
                        new
                        {
                            Id = new Guid("e44a2adf-f232-4fd2-be45-7c31cf330389"),
                            CityId = new Guid("24457f00-04a5-4a60-9a92-4d479b04854e"),
                            Language = "uk",
                            Name = "Варшава"
                        },
                        new
                        {
                            Id = new Guid("91752b1f-b987-4ff8-b8b3-ef20a8154501"),
                            CityId = new Guid("98305c43-85b8-4bc6-9aa6-4011ace2b225"),
                            Language = "uk",
                            Name = "Люблін"
                        },
                        new
                        {
                            Id = new Guid("f0fa985f-09ab-46d3-9c3c-234e9c692ea5"),
                            CityId = new Guid("24457f00-04a5-4a60-9a92-4d479b04854e"),
                            Language = "en",
                            Name = "Varshava"
                        },
                        new
                        {
                            Id = new Guid("95d5ffbb-3eea-4d8c-9a65-cf0439db11b8"),
                            CityId = new Guid("98305c43-85b8-4bc6-9aa6-4011ace2b225"),
                            Language = "en",
                            Name = "Lublin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b9514f29-6c67-4789-b241-241ff8937424"),
                            ISO = "uk"
                        },
                        new
                        {
                            Id = new Guid("88fccf23-3e9d-4cec-b936-50f48a5f6591"),
                            ISO = "pl"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CountryTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a6562151-db32-4276-b0a8-85e9951e892d"),
                            CountryId = new Guid("b9514f29-6c67-4789-b241-241ff8937424"),
                            Language = "en",
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("a3b3dd2d-448a-4f88-8487-bf4fbc513b38"),
                            CountryId = new Guid("b9514f29-6c67-4789-b241-241ff8937424"),
                            Language = "uk",
                            Name = "Україна"
                        },
                        new
                        {
                            Id = new Guid("8bfbb619-de9e-4907-8be7-3a9ca7c2fdc7"),
                            CountryId = new Guid("88fccf23-3e9d-4cec-b936-50f48a5f6591"),
                            Language = "en",
                            Name = "Poland"
                        },
                        new
                        {
                            Id = new Guid("92c8acf6-ad0c-49fc-83b1-1296a48fcde6"),
                            CountryId = new Guid("88fccf23-3e9d-4cec-b936-50f48a5f6591"),
                            Language = "uk",
                            Name = "Польша"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VolunteerApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VolunteerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VolunteerUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VolunteerUserId", "VolunteerApplicationId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DAL.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplictionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserRecipientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserSenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplictionId");

                    b.HasIndex("UserRecipientId");

                    b.HasIndex("UserSenderId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ProfilePictures");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("15d98c9b-c959-4fc3-a56f-4da9847f24da"),
                            Title = "medicine"
                        },
                        new
                        {
                            Id = new Guid("7d1422e3-8351-4cbc-846d-ade652002c60"),
                            Title = "cooking"
                        },
                        new
                        {
                            Id = new Guid("fdb9d8c0-3d59-412b-a1d2-c7aafe27cf57"),
                            Title = "building"
                        },
                        new
                        {
                            Id = new Guid("d10f2bdc-8c50-4129-a37b-6b75c504fe13"),
                            Title = "psychology"
                        });
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6d24a860-9aa7-4770-a714-17d4d30e54e9"),
                            Language = "en",
                            Name = "medicine",
                            SkillId = new Guid("15d98c9b-c959-4fc3-a56f-4da9847f24da")
                        },
                        new
                        {
                            Id = new Guid("6a13cdd8-4397-4542-842e-80330b51e15a"),
                            Language = "uk",
                            Name = "медицина",
                            SkillId = new Guid("15d98c9b-c959-4fc3-a56f-4da9847f24da")
                        },
                        new
                        {
                            Id = new Guid("d91c6fc1-750d-480e-b837-d10c4b299815"),
                            Language = "en",
                            Name = "cooking",
                            SkillId = new Guid("7d1422e3-8351-4cbc-846d-ade652002c60")
                        },
                        new
                        {
                            Id = new Guid("ae9ad3df-4b37-497f-8572-0bcf6a782041"),
                            Language = "uk",
                            Name = "кулінарія",
                            SkillId = new Guid("7d1422e3-8351-4cbc-846d-ade652002c60")
                        },
                        new
                        {
                            Id = new Guid("452112ef-c1de-4f59-a6eb-ac1dcce7e34c"),
                            Language = "en",
                            Name = "building",
                            SkillId = new Guid("fdb9d8c0-3d59-412b-a1d2-c7aafe27cf57")
                        },
                        new
                        {
                            Id = new Guid("c8800ea5-c900-4800-ab99-3e0d23184c3b"),
                            Language = "uk",
                            Name = "будівництво",
                            SkillId = new Guid("fdb9d8c0-3d59-412b-a1d2-c7aafe27cf57")
                        },
                        new
                        {
                            Id = new Guid("9ed0ec73-5028-479e-acda-f7bbb75e68a3"),
                            Language = "en",
                            Name = "psychology",
                            SkillId = new Guid("d10f2bdc-8c50-4129-a37b-6b75c504fe13")
                        },
                        new
                        {
                            Id = new Guid("c4e03b48-87db-4f9d-9a09-798d47292011"),
                            Language = "uk",
                            Name = "психологія",
                            SkillId = new Guid("d10f2bdc-8c50-4129-a37b-6b75c504fe13")
                        });
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("de343126-cff5-455f-b7e6-8bf42e7d0ad9"),
                            CityId = new Guid("6dbeca0f-d1c2-456d-a6b6-a87903db2166"),
                            DateOfBirth = new DateTime(2023, 5, 22, 16, 30, 38, 107, DateTimeKind.Local).AddTicks(3631),
                            FirstName = "the first",
                            LastName = "admin",
                            Login = "ourfirstadmin",
                            Password = "Rk/ryiBNbnHx+s9i1IveCNNw4axYPQHm4T1eratfQlg=",
                            Phone = "+11111111111",
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Document")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DocumentFormat")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("NULL");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ApplicationId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.HasOne("DAL.Entities.Category", "Category")
                        .WithMany("Applications")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("Applications")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationSkill", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("ApplicationSkills")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("ApplicationSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DAL.Entities.CategoryTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Category", "Category")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("CityTranslations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("CountryTranslations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.HasOne("DAL.Entities.Volunteer", "Volunteer")
                        .WithMany("Messages")
                        .HasForeignKey("VolunteerUserId", "VolunteerApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("DAL.Entities.Notification", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Notifications")
                        .HasForeignKey("ApplictionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "UserRecipient")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("UserRecipientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "UserSender")
                        .WithMany("SentNotifications")
                        .HasForeignKey("UserSenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("UserRecipient");

                    b.Navigation("UserSender");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithOne("ProfilePicture")
                        .HasForeignKey("DAL.Entities.ProfilePicture", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("SkillTranslations")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Volunteers")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Volunteers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Navigation("ApplicationSkills");

                    b.Navigation("Notifications");

                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("CategoryTranslations");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("CityTranslations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("CountryTranslations");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Navigation("ApplicationSkills");

                    b.Navigation("SkillTranslations");

                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ProfilePicture");

                    b.Navigation("ReceivedNotifications");

                    b.Navigation("SentNotifications");

                    b.Navigation("UserSkills");

                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
