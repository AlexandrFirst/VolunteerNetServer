// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(VolunteerNetServerDBContext))]
    [Migration("20230529125239_NotificationApplication")]
    partial class NotificationApplication
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("CurrentSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DateTimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimeStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<string>("OwnerCardName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequiredNumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<decimal?>("RequiredSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Document")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DocumentFormat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationDocuments");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationPicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationPictures");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationSkill", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("ApplicationSkills");
                });

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("06ccc6d8-2231-4f2b-9011-04c7e2615a91"),
                            Title = "health care"
                        },
                        new
                        {
                            Id = new Guid("312f3eb0-dc6e-4b40-ab6d-527b7b920eab"),
                            Title = "education"
                        },
                        new
                        {
                            Id = new Guid("6f0d8f5a-9681-418b-b8de-9dd672e66846"),
                            Title = "sports and physical culture"
                        },
                        new
                        {
                            Id = new Guid("b66617aa-e976-403c-85de-0de9186db520"),
                            Title = "culture and art"
                        },
                        new
                        {
                            Id = new Guid("a377d76f-fdec-4773-bca5-2ccf962e381b"),
                            Title = "social programs"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CategoryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DescriptionCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ca0c10f0-03c4-4d7a-9f9b-762e2c703505"),
                            CategoryId = new Guid("06ccc6d8-2231-4f2b-9011-04c7e2615a91"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "health care"
                        },
                        new
                        {
                            Id = new Guid("0b134863-efc7-40e1-ab46-c56f83647c97"),
                            CategoryId = new Guid("06ccc6d8-2231-4f2b-9011-04c7e2615a91"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "охорона здоров'я"
                        },
                        new
                        {
                            Id = new Guid("abd2a79c-82b8-4f98-b3d7-676070c85e3f"),
                            CategoryId = new Guid("312f3eb0-dc6e-4b40-ab6d-527b7b920eab"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "education"
                        },
                        new
                        {
                            Id = new Guid("bcc9a5cd-a2df-4ba8-86c0-a890b2cc6016"),
                            CategoryId = new Guid("312f3eb0-dc6e-4b40-ab6d-527b7b920eab"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "освіта"
                        },
                        new
                        {
                            Id = new Guid("10c85744-904a-4e86-b31a-bcbb083ccb43"),
                            CategoryId = new Guid("6f0d8f5a-9681-418b-b8de-9dd672e66846"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "sport and physical culture"
                        },
                        new
                        {
                            Id = new Guid("211eab82-641d-47f2-9d33-d49fbc7fa01b"),
                            CategoryId = new Guid("6f0d8f5a-9681-418b-b8de-9dd672e66846"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "спорт та фізична культура"
                        },
                        new
                        {
                            Id = new Guid("7831e600-24f5-4e4c-b83a-0030656b1c62"),
                            CategoryId = new Guid("b66617aa-e976-403c-85de-0de9186db520"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "culture and art"
                        },
                        new
                        {
                            Id = new Guid("6a30587a-7908-4ba5-be57-6b892674503d"),
                            CategoryId = new Guid("b66617aa-e976-403c-85de-0de9186db520"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "культура та мистецтво"
                        },
                        new
                        {
                            Id = new Guid("b58a5c04-8572-4fc9-a722-c03be96aa423"),
                            CategoryId = new Guid("a377d76f-fdec-4773-bca5-2ccf962e381b"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "social programs"
                        },
                        new
                        {
                            Id = new Guid("f148a7d6-8684-49b7-ab26-f8dea5270f3c"),
                            CategoryId = new Guid("a377d76f-fdec-4773-bca5-2ccf962e381b"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "соціальні програми"
                        });
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e7e3631e-f0b1-46e6-95c4-d60f9e1d7c60"),
                            CountryId = new Guid("d99d635c-eb38-4b65-b497-e7a7b4dfb188"),
                            ISO = "vi"
                        },
                        new
                        {
                            Id = new Guid("28e2b69e-35a9-46dc-ac99-9e18ba4942a6"),
                            CountryId = new Guid("d99d635c-eb38-4b65-b497-e7a7b4dfb188"),
                            ISO = "dn"
                        },
                        new
                        {
                            Id = new Guid("f0ece814-8032-48ba-8235-a30559c5c96c"),
                            CountryId = new Guid("d99d635c-eb38-4b65-b497-e7a7b4dfb188"),
                            ISO = "zhy"
                        },
                        new
                        {
                            Id = new Guid("f8acfc6c-a2bb-4a1a-9c42-136166abbf0b"),
                            CountryId = new Guid("d99d635c-eb38-4b65-b497-e7a7b4dfb188"),
                            ISO = "zp"
                        },
                        new
                        {
                            Id = new Guid("f9cba761-8d89-4221-b92a-ee07093183e4"),
                            CountryId = new Guid("d99d635c-eb38-4b65-b497-e7a7b4dfb188"),
                            ISO = "if"
                        },
                        new
                        {
                            Id = new Guid("9f2440ae-3d00-4c2e-bad9-c9e305654479"),
                            CountryId = new Guid("d99d635c-eb38-4b65-b497-e7a7b4dfb188"),
                            ISO = "ky"
                        },
                        new
                        {
                            Id = new Guid("faa708b1-9398-4765-9619-c85290d3986c"),
                            CountryId = new Guid("d99d635c-eb38-4b65-b497-e7a7b4dfb188"),
                            ISO = "kr"
                        },
                        new
                        {
                            Id = new Guid("37111337-f97c-4d2c-bafe-262679e2a7e6"),
                            CountryId = new Guid("d99d635c-eb38-4b65-b497-e7a7b4dfb188"),
                            ISO = "lut"
                        },
                        new
                        {
                            Id = new Guid("a2caf3d4-9929-4ecd-9992-ef5a7ecf34a2"),
                            CountryId = new Guid("d99d635c-eb38-4b65-b497-e7a7b4dfb188"),
                            ISO = "lv"
                        },
                        new
                        {
                            Id = new Guid("11deb5b8-eb2a-484b-bb59-451b715fcb3b"),
                            CountryId = new Guid("d99d635c-eb38-4b65-b497-e7a7b4dfb188"),
                            ISO = "my"
                        },
                        new
                        {
                            Id = new Guid("7a4d4585-0f6f-46d1-99ac-09d2ccd15b50"),
                            CountryId = new Guid("d99d635c-eb38-4b65-b497-e7a7b4dfb188"),
                            ISO = "od"
                        },
                        new
                        {
                            Id = new Guid("c97b74de-ab70-46f5-9816-28a4a337d748"),
                            CountryId = new Guid("d99d635c-eb38-4b65-b497-e7a7b4dfb188"),
                            ISO = "pol"
                        },
                        new
                        {
                            Id = new Guid("612a022f-1610-4e42-a536-fb6615998019"),
                            CountryId = new Guid("d99d635c-eb38-4b65-b497-e7a7b4dfb188"),
                            ISO = "ri"
                        },
                        new
                        {
                            Id = new Guid("a092a8b6-73b4-4b8f-a978-1df618565712"),
                            CountryId = new Guid("d99d635c-eb38-4b65-b497-e7a7b4dfb188"),
                            ISO = "su"
                        },
                        new
                        {
                            Id = new Guid("b85a9581-6bd0-40dd-886e-803fc42c2197"),
                            CountryId = new Guid("d99d635c-eb38-4b65-b497-e7a7b4dfb188"),
                            ISO = "ter"
                        },
                        new
                        {
                            Id = new Guid("25987824-91b8-4414-92de-2eb6a9482d9b"),
                            CountryId = new Guid("d99d635c-eb38-4b65-b497-e7a7b4dfb188"),
                            ISO = "uzh"
                        },
                        new
                        {
                            Id = new Guid("cfc5789a-16b4-4ba7-acce-7fa9818f5d83"),
                            CountryId = new Guid("d99d635c-eb38-4b65-b497-e7a7b4dfb188"),
                            ISO = "khar"
                        },
                        new
                        {
                            Id = new Guid("ac98da5a-0ee6-483d-96ed-70ffa3991de3"),
                            CountryId = new Guid("d99d635c-eb38-4b65-b497-e7a7b4dfb188"),
                            ISO = "kher"
                        },
                        new
                        {
                            Id = new Guid("1ce87682-8b30-4090-8729-8bbcbb41e56c"),
                            CountryId = new Guid("d99d635c-eb38-4b65-b497-e7a7b4dfb188"),
                            ISO = "khm"
                        },
                        new
                        {
                            Id = new Guid("5d0e378d-fb90-4e6d-ba92-c9a3ac3f4141"),
                            CountryId = new Guid("d99d635c-eb38-4b65-b497-e7a7b4dfb188"),
                            ISO = "chk"
                        },
                        new
                        {
                            Id = new Guid("1aac0f99-1ce5-444f-95e0-5acaf395f81d"),
                            CountryId = new Guid("d99d635c-eb38-4b65-b497-e7a7b4dfb188"),
                            ISO = "chv"
                        },
                        new
                        {
                            Id = new Guid("efe91988-79be-4dd9-8133-754dfe5bd919"),
                            CountryId = new Guid("d99d635c-eb38-4b65-b497-e7a7b4dfb188"),
                            ISO = "chh"
                        },
                        new
                        {
                            Id = new Guid("2e37d60a-06fc-452b-a1a5-d741c5d46d05"),
                            CountryId = new Guid("3a7ab796-9c2b-4745-a2d2-53338e37fe15"),
                            ISO = "var"
                        },
                        new
                        {
                            Id = new Guid("c7bba13d-abb8-496a-a3db-ec451cb8b088"),
                            CountryId = new Guid("3a7ab796-9c2b-4745-a2d2-53338e37fe15"),
                            ISO = "lub"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("CityTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f62629c3-aa2f-45c9-8473-5239d7e2285c"),
                            CityId = new Guid("e7e3631e-f0b1-46e6-95c4-d60f9e1d7c60"),
                            Language = "uk",
                            Name = "Вінниця"
                        },
                        new
                        {
                            Id = new Guid("e481e06f-9692-4c67-b864-0dbf7d0e2640"),
                            CityId = new Guid("28e2b69e-35a9-46dc-ac99-9e18ba4942a6"),
                            Language = "uk",
                            Name = "Дніпро"
                        },
                        new
                        {
                            Id = new Guid("2c6b5c21-5abb-48c0-8188-7fe171da2ea2"),
                            CityId = new Guid("f0ece814-8032-48ba-8235-a30559c5c96c"),
                            Language = "uk",
                            Name = "Житомир"
                        },
                        new
                        {
                            Id = new Guid("555fd123-754e-436d-b1b8-21283bcb3261"),
                            CityId = new Guid("f8acfc6c-a2bb-4a1a-9c42-136166abbf0b"),
                            Language = "uk",
                            Name = "Запоріжжя"
                        },
                        new
                        {
                            Id = new Guid("ff94cd9e-09a5-459e-93f2-9956900f1532"),
                            CityId = new Guid("f9cba761-8d89-4221-b92a-ee07093183e4"),
                            Language = "uk",
                            Name = "Івано-Франківськ"
                        },
                        new
                        {
                            Id = new Guid("d493e4c8-3cc7-44e7-8775-4dde1cd68c55"),
                            CityId = new Guid("9f2440ae-3d00-4c2e-bad9-c9e305654479"),
                            Language = "uk",
                            Name = "Київ"
                        },
                        new
                        {
                            Id = new Guid("e6893a76-754a-447b-8fc0-9a050b67c588"),
                            CityId = new Guid("faa708b1-9398-4765-9619-c85290d3986c"),
                            Language = "uk",
                            Name = "Кропивницький"
                        },
                        new
                        {
                            Id = new Guid("c3e4100f-1ff8-4b06-9abb-51263ec53872"),
                            CityId = new Guid("37111337-f97c-4d2c-bafe-262679e2a7e6"),
                            Language = "uk",
                            Name = "Луцьк"
                        },
                        new
                        {
                            Id = new Guid("6fa67e98-9d8f-4e6b-a768-cd388df71bf7"),
                            CityId = new Guid("a2caf3d4-9929-4ecd-9992-ef5a7ecf34a2"),
                            Language = "uk",
                            Name = "Львів"
                        },
                        new
                        {
                            Id = new Guid("fedd6570-9cd1-401c-b7e9-591beb375f0a"),
                            CityId = new Guid("11deb5b8-eb2a-484b-bb59-451b715fcb3b"),
                            Language = "uk",
                            Name = "Миколаїв"
                        },
                        new
                        {
                            Id = new Guid("7ab138be-f7fd-4c79-b06b-19b24a9e9a13"),
                            CityId = new Guid("7a4d4585-0f6f-46d1-99ac-09d2ccd15b50"),
                            Language = "uk",
                            Name = "Одеса"
                        },
                        new
                        {
                            Id = new Guid("e335781d-3d98-4577-9a78-ba4952e1d2ff"),
                            CityId = new Guid("c97b74de-ab70-46f5-9816-28a4a337d748"),
                            Language = "uk",
                            Name = "Полтава"
                        },
                        new
                        {
                            Id = new Guid("e4c95640-8cec-4bce-a466-d4909de827e0"),
                            CityId = new Guid("612a022f-1610-4e42-a536-fb6615998019"),
                            Language = "uk",
                            Name = "Рівне"
                        },
                        new
                        {
                            Id = new Guid("be5f1a9e-647b-417f-a16f-cf00ec866edb"),
                            CityId = new Guid("a092a8b6-73b4-4b8f-a978-1df618565712"),
                            Language = "uk",
                            Name = "Суми"
                        },
                        new
                        {
                            Id = new Guid("a6e8740b-ee5c-43db-a17c-e986a93afdd1"),
                            CityId = new Guid("b85a9581-6bd0-40dd-886e-803fc42c2197"),
                            Language = "uk",
                            Name = "Тернопіль"
                        },
                        new
                        {
                            Id = new Guid("51d77f9e-baf4-4c13-b3aa-3852fe278c16"),
                            CityId = new Guid("25987824-91b8-4414-92de-2eb6a9482d9b"),
                            Language = "uk",
                            Name = "Ужгород"
                        },
                        new
                        {
                            Id = new Guid("d39f1c6e-4ce0-4e6f-a36f-7e0226edb032"),
                            CityId = new Guid("cfc5789a-16b4-4ba7-acce-7fa9818f5d83"),
                            Language = "uk",
                            Name = "Харків"
                        },
                        new
                        {
                            Id = new Guid("f1b07cf5-9063-42b1-a94f-aebb541b1b27"),
                            CityId = new Guid("ac98da5a-0ee6-483d-96ed-70ffa3991de3"),
                            Language = "uk",
                            Name = "Херсон"
                        },
                        new
                        {
                            Id = new Guid("ba681b1f-2c37-453f-9abe-c8f538a78791"),
                            CityId = new Guid("1ce87682-8b30-4090-8729-8bbcbb41e56c"),
                            Language = "uk",
                            Name = "Хмельницький"
                        },
                        new
                        {
                            Id = new Guid("15ab84be-8ba5-4a9a-9079-9089525d478a"),
                            CityId = new Guid("5d0e378d-fb90-4e6d-ba92-c9a3ac3f4141"),
                            Language = "uk",
                            Name = "Черкаси"
                        },
                        new
                        {
                            Id = new Guid("8f08fa29-0f94-43db-98ab-ad67c2ef907b"),
                            CityId = new Guid("1aac0f99-1ce5-444f-95e0-5acaf395f81d"),
                            Language = "uk",
                            Name = "Чернівці"
                        },
                        new
                        {
                            Id = new Guid("f9baa551-e9dc-4ab8-81b1-48dcf79be026"),
                            CityId = new Guid("efe91988-79be-4dd9-8133-754dfe5bd919"),
                            Language = "uk",
                            Name = "Чернігів"
                        },
                        new
                        {
                            Id = new Guid("01385e8b-6fed-4312-bbc3-28c769bb0411"),
                            CityId = new Guid("e7e3631e-f0b1-46e6-95c4-d60f9e1d7c60"),
                            Language = "en",
                            Name = "Vinnytsia"
                        },
                        new
                        {
                            Id = new Guid("2dbeddea-c46e-4e3d-88af-43541e3c9837"),
                            CityId = new Guid("28e2b69e-35a9-46dc-ac99-9e18ba4942a6"),
                            Language = "en",
                            Name = "Dnipro"
                        },
                        new
                        {
                            Id = new Guid("798704ad-536b-45b1-b73c-418515bd2cfb"),
                            CityId = new Guid("f0ece814-8032-48ba-8235-a30559c5c96c"),
                            Language = "en",
                            Name = "Zhytomyr"
                        },
                        new
                        {
                            Id = new Guid("beba94c7-accd-4676-ad7b-4d4530791e3d"),
                            CityId = new Guid("f8acfc6c-a2bb-4a1a-9c42-136166abbf0b"),
                            Language = "en",
                            Name = "Zaporizhzhia"
                        },
                        new
                        {
                            Id = new Guid("8cb208d8-ffab-411a-8f4b-235b183a285f"),
                            CityId = new Guid("f9cba761-8d89-4221-b92a-ee07093183e4"),
                            Language = "en",
                            Name = "Ivano-Frankivsk"
                        },
                        new
                        {
                            Id = new Guid("2d73b98f-04cd-4df3-ae80-582e99b566a1"),
                            CityId = new Guid("9f2440ae-3d00-4c2e-bad9-c9e305654479"),
                            Language = "en",
                            Name = "Kyiv"
                        },
                        new
                        {
                            Id = new Guid("23fe8e28-10e0-489f-8eb5-0a906086c223"),
                            CityId = new Guid("faa708b1-9398-4765-9619-c85290d3986c"),
                            Language = "en",
                            Name = "Kropyvnytskyi"
                        },
                        new
                        {
                            Id = new Guid("78544b7c-d1a1-4f57-9685-f40412819850"),
                            CityId = new Guid("37111337-f97c-4d2c-bafe-262679e2a7e6"),
                            Language = "en",
                            Name = "Lutsk"
                        },
                        new
                        {
                            Id = new Guid("9dd19c6b-2573-4b4a-a5ab-9d760ef84585"),
                            CityId = new Guid("a2caf3d4-9929-4ecd-9992-ef5a7ecf34a2"),
                            Language = "en",
                            Name = "Lviv"
                        },
                        new
                        {
                            Id = new Guid("9fe87a66-8750-4db9-836e-2ad2a29cb91a"),
                            CityId = new Guid("11deb5b8-eb2a-484b-bb59-451b715fcb3b"),
                            Language = "en",
                            Name = "Mykolaiv"
                        },
                        new
                        {
                            Id = new Guid("6d010887-3ff9-45cd-bfce-0699d22e7d86"),
                            CityId = new Guid("7a4d4585-0f6f-46d1-99ac-09d2ccd15b50"),
                            Language = "en",
                            Name = "Odesa"
                        },
                        new
                        {
                            Id = new Guid("a4ba0a26-d6ff-4777-80d5-41534c50a8f8"),
                            CityId = new Guid("c97b74de-ab70-46f5-9816-28a4a337d748"),
                            Language = "en",
                            Name = "Poltava"
                        },
                        new
                        {
                            Id = new Guid("abb61188-0312-48fb-9e36-1460c699b65c"),
                            CityId = new Guid("612a022f-1610-4e42-a536-fb6615998019"),
                            Language = "en",
                            Name = "Rivne"
                        },
                        new
                        {
                            Id = new Guid("33e7174c-8840-4e50-b306-5fb67602e144"),
                            CityId = new Guid("a092a8b6-73b4-4b8f-a978-1df618565712"),
                            Language = "en",
                            Name = "Sumy"
                        },
                        new
                        {
                            Id = new Guid("f62d5095-58b5-4178-a99e-fc342bf73a59"),
                            CityId = new Guid("b85a9581-6bd0-40dd-886e-803fc42c2197"),
                            Language = "en",
                            Name = "Ternopil"
                        },
                        new
                        {
                            Id = new Guid("660990e8-47d0-49ee-a37a-40a58cc0092b"),
                            CityId = new Guid("25987824-91b8-4414-92de-2eb6a9482d9b"),
                            Language = "en",
                            Name = "Uzhhorod"
                        },
                        new
                        {
                            Id = new Guid("649bbcd1-a53a-4bac-b68a-4ab6ab7e34b6"),
                            CityId = new Guid("cfc5789a-16b4-4ba7-acce-7fa9818f5d83"),
                            Language = "en",
                            Name = "Kharkiv"
                        },
                        new
                        {
                            Id = new Guid("819f2fd3-31bb-474f-880c-c797ccf9fc29"),
                            CityId = new Guid("ac98da5a-0ee6-483d-96ed-70ffa3991de3"),
                            Language = "en",
                            Name = "Kherson"
                        },
                        new
                        {
                            Id = new Guid("d7cdc200-3f40-4673-a76c-5dda9e10508f"),
                            CityId = new Guid("1ce87682-8b30-4090-8729-8bbcbb41e56c"),
                            Language = "en",
                            Name = "Khmelnytskyi"
                        },
                        new
                        {
                            Id = new Guid("1701022e-170a-423c-8aaf-2c934902dd4a"),
                            CityId = new Guid("5d0e378d-fb90-4e6d-ba92-c9a3ac3f4141"),
                            Language = "en",
                            Name = "Cherkasy"
                        },
                        new
                        {
                            Id = new Guid("cee904a6-963d-4aaf-b70b-3a7cb256a6e9"),
                            CityId = new Guid("1aac0f99-1ce5-444f-95e0-5acaf395f81d"),
                            Language = "en",
                            Name = "Chernivtsi"
                        },
                        new
                        {
                            Id = new Guid("6d4cf59c-3f4a-4706-bad3-321bd8a8102d"),
                            CityId = new Guid("efe91988-79be-4dd9-8133-754dfe5bd919"),
                            Language = "en",
                            Name = "Chernihiv"
                        },
                        new
                        {
                            Id = new Guid("2dcdd04f-8c96-422b-bbea-f0fe721214dd"),
                            CityId = new Guid("2e37d60a-06fc-452b-a1a5-d741c5d46d05"),
                            Language = "uk",
                            Name = "Варшава"
                        },
                        new
                        {
                            Id = new Guid("8199fc84-5c23-4fe2-9ab0-2fa7980ba976"),
                            CityId = new Guid("c7bba13d-abb8-496a-a3db-ec451cb8b088"),
                            Language = "uk",
                            Name = "Люблін"
                        },
                        new
                        {
                            Id = new Guid("ae593b35-d8d1-46e2-9331-cd0c4d70aabf"),
                            CityId = new Guid("2e37d60a-06fc-452b-a1a5-d741c5d46d05"),
                            Language = "en",
                            Name = "Varshava"
                        },
                        new
                        {
                            Id = new Guid("c5661748-f67d-4f9e-8a67-c7871e4b8607"),
                            CityId = new Guid("c7bba13d-abb8-496a-a3db-ec451cb8b088"),
                            Language = "en",
                            Name = "Lublin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d99d635c-eb38-4b65-b497-e7a7b4dfb188"),
                            ISO = "uk"
                        },
                        new
                        {
                            Id = new Guid("3a7ab796-9c2b-4745-a2d2-53338e37fe15"),
                            ISO = "pl"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CountryTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0e895b69-1ae5-4ce5-afba-8bc33bc5e572"),
                            CountryId = new Guid("d99d635c-eb38-4b65-b497-e7a7b4dfb188"),
                            Language = "en",
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("c0d0f22b-67aa-4e2a-b375-960e74b90107"),
                            CountryId = new Guid("d99d635c-eb38-4b65-b497-e7a7b4dfb188"),
                            Language = "uk",
                            Name = "Україна"
                        },
                        new
                        {
                            Id = new Guid("bc67e79f-c131-45be-a23a-3f4037fcf2c5"),
                            CountryId = new Guid("3a7ab796-9c2b-4745-a2d2-53338e37fe15"),
                            Language = "en",
                            Name = "Poland"
                        },
                        new
                        {
                            Id = new Guid("a4bc6a20-0795-47b5-9c91-1c81fd2de0ea"),
                            CountryId = new Guid("3a7ab796-9c2b-4745-a2d2-53338e37fe15"),
                            Language = "uk",
                            Name = "Польша"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Donate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTimeCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderCardBank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SenderCardCountry")
                        .HasColumnType("int");

                    b.Property<string>("SenderCardMask2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderCardType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SenderCommission")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Donates");
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VolunteerApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VolunteerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VolunteerUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VolunteerUserId", "VolunteerApplicationId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DAL.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplictionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserRecipientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserSenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplictionId");

                    b.HasIndex("UserRecipientId");

                    b.HasIndex("UserSenderId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ProfilePictures");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2b4f9c84-9cdb-40af-bd24-43e0573f83d5"),
                            Title = "medicine"
                        },
                        new
                        {
                            Id = new Guid("6aa93408-1d81-494f-a492-d0c905066f23"),
                            Title = "cooking"
                        },
                        new
                        {
                            Id = new Guid("5a1256c8-653e-420a-8c04-da7d839fc400"),
                            Title = "building"
                        },
                        new
                        {
                            Id = new Guid("8edde1d7-dfad-4f81-ac0c-806865f3a614"),
                            Title = "psychology"
                        });
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("208e9584-27bb-43e9-ba9c-77802afa67ab"),
                            Language = "en",
                            Name = "medicine",
                            SkillId = new Guid("2b4f9c84-9cdb-40af-bd24-43e0573f83d5")
                        },
                        new
                        {
                            Id = new Guid("01b0f8e3-de97-424e-a73e-bdd2b25b7201"),
                            Language = "uk",
                            Name = "медицина",
                            SkillId = new Guid("2b4f9c84-9cdb-40af-bd24-43e0573f83d5")
                        },
                        new
                        {
                            Id = new Guid("621c1b51-e86a-4c80-9d36-1b552f0b12fb"),
                            Language = "en",
                            Name = "cooking",
                            SkillId = new Guid("6aa93408-1d81-494f-a492-d0c905066f23")
                        },
                        new
                        {
                            Id = new Guid("3493f444-c606-4cf8-b536-241c6bf69e34"),
                            Language = "uk",
                            Name = "кулінарія",
                            SkillId = new Guid("6aa93408-1d81-494f-a492-d0c905066f23")
                        },
                        new
                        {
                            Id = new Guid("636d468d-f263-4525-9045-51c7ff05a01b"),
                            Language = "en",
                            Name = "building",
                            SkillId = new Guid("5a1256c8-653e-420a-8c04-da7d839fc400")
                        },
                        new
                        {
                            Id = new Guid("04ce8f48-fdee-4068-a9b3-c030ca86a9dc"),
                            Language = "uk",
                            Name = "будівництво",
                            SkillId = new Guid("5a1256c8-653e-420a-8c04-da7d839fc400")
                        },
                        new
                        {
                            Id = new Guid("30b22389-0aa5-4a45-a8f7-fce4613899ab"),
                            Language = "en",
                            Name = "psychology",
                            SkillId = new Guid("8edde1d7-dfad-4f81-ac0c-806865f3a614")
                        },
                        new
                        {
                            Id = new Guid("8a2420d2-4a0e-4118-ba65-65d73b9f7860"),
                            Language = "uk",
                            Name = "психологія",
                            SkillId = new Guid("8edde1d7-dfad-4f81-ac0c-806865f3a614")
                        });
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("de872647-5897-4410-bc96-3138c65890b6"),
                            CityId = new Guid("e7e3631e-f0b1-46e6-95c4-d60f9e1d7c60"),
                            DateOfBirth = new DateTime(2023, 5, 29, 15, 49, 30, 964, DateTimeKind.Local).AddTicks(8436),
                            FirstName = "the first",
                            LastName = "admin",
                            Login = "ourfirstadmin",
                            Password = "Rk/ryiBNbnHx+s9i1IveCNNw4axYPQHm4T1eratfQlg=",
                            Phone = "+11111111111",
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Document")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DocumentFormat")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("NULL");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ApplicationId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.HasOne("DAL.Entities.Category", "Category")
                        .WithMany("Applications")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("Applications")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationDocument", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("ApplicationDocuments")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationPicture", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("ApplicationPictures")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationSkill", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("ApplicationSkills")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("ApplicationSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DAL.Entities.CategoryTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Category", "Category")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("CityTranslations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("CountryTranslations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.Donate", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Donates")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Application");
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.HasOne("DAL.Entities.Volunteer", "Volunteer")
                        .WithMany("Messages")
                        .HasForeignKey("VolunteerUserId", "VolunteerApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("DAL.Entities.Notification", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Notifications")
                        .HasForeignKey("ApplictionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.User", "UserRecipient")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("UserRecipientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "UserSender")
                        .WithMany("SentNotifications")
                        .HasForeignKey("UserSenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("UserRecipient");

                    b.Navigation("UserSender");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithOne("ProfilePicture")
                        .HasForeignKey("DAL.Entities.ProfilePicture", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("SkillTranslations")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Volunteers")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Volunteers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Navigation("ApplicationDocuments");

                    b.Navigation("ApplicationPictures");

                    b.Navigation("ApplicationSkills");

                    b.Navigation("Donates");

                    b.Navigation("Notifications");

                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("CategoryTranslations");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("CityTranslations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("CountryTranslations");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Navigation("ApplicationSkills");

                    b.Navigation("SkillTranslations");

                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ProfilePicture");

                    b.Navigation("ReceivedNotifications");

                    b.Navigation("SentNotifications");

                    b.Navigation("UserSkills");

                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
