// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(VolunteerNetServerDBContext))]
    [Migration("20230524155033_TableDonate4")]
    partial class TableDonate4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("CurrentSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<string>("OwnerCardName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequiredNumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<decimal?>("RequiredSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationSkill", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("ApplicationSkills");
                });

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b7b8460d-21a2-4dfa-8985-0b6585b9584a"),
                            Title = "health care"
                        },
                        new
                        {
                            Id = new Guid("2993aa64-b50c-4b2d-aa53-fbf60698845a"),
                            Title = "education"
                        },
                        new
                        {
                            Id = new Guid("89de9610-c84e-4a40-8a02-ceef7e0aa144"),
                            Title = "sports and physical culture"
                        },
                        new
                        {
                            Id = new Guid("604f2902-f8c4-4185-a034-745d85b62b03"),
                            Title = "culture and art"
                        },
                        new
                        {
                            Id = new Guid("905860ef-20ae-426c-a7bc-1178afe9763b"),
                            Title = "social programs"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CategoryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DescriptionCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2100a516-bd88-43f0-a9ec-a9aa91793bdc"),
                            CategoryId = new Guid("b7b8460d-21a2-4dfa-8985-0b6585b9584a"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "health care"
                        },
                        new
                        {
                            Id = new Guid("f781adda-6d57-4b39-9082-e7575dbe9ce8"),
                            CategoryId = new Guid("b7b8460d-21a2-4dfa-8985-0b6585b9584a"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "охорона здоров'я"
                        },
                        new
                        {
                            Id = new Guid("1f535c36-b4fd-4402-bf48-31601147e8be"),
                            CategoryId = new Guid("2993aa64-b50c-4b2d-aa53-fbf60698845a"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "education"
                        },
                        new
                        {
                            Id = new Guid("157909bc-84ae-4bf9-be9d-af8adceb918d"),
                            CategoryId = new Guid("2993aa64-b50c-4b2d-aa53-fbf60698845a"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "освіта"
                        },
                        new
                        {
                            Id = new Guid("b3969420-e4b5-43a1-b918-c78c8eba307e"),
                            CategoryId = new Guid("89de9610-c84e-4a40-8a02-ceef7e0aa144"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "sport and physical culture"
                        },
                        new
                        {
                            Id = new Guid("c064731b-a7dd-4a84-a4af-2f9058e7b8b9"),
                            CategoryId = new Guid("89de9610-c84e-4a40-8a02-ceef7e0aa144"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "спорт та фізична культура"
                        },
                        new
                        {
                            Id = new Guid("557d1eaf-e776-45aa-8a35-692e8af48ac6"),
                            CategoryId = new Guid("604f2902-f8c4-4185-a034-745d85b62b03"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "culture and art"
                        },
                        new
                        {
                            Id = new Guid("21e8a9d5-3356-4574-8870-734982e13768"),
                            CategoryId = new Guid("604f2902-f8c4-4185-a034-745d85b62b03"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "культура та мистецтво"
                        },
                        new
                        {
                            Id = new Guid("8a378742-e933-4e7b-a70d-3b84b72c6a16"),
                            CategoryId = new Guid("905860ef-20ae-426c-a7bc-1178afe9763b"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "social programs"
                        },
                        new
                        {
                            Id = new Guid("696381ad-175f-4daf-8af7-946a248fccd3"),
                            CategoryId = new Guid("905860ef-20ae-426c-a7bc-1178afe9763b"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "соціальні програми"
                        });
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1a81e2aa-08c2-4992-ae34-2aa6f4eeed0b"),
                            CountryId = new Guid("c33fbfc4-81a0-4408-9e41-69f69c25283c"),
                            ISO = "vi"
                        },
                        new
                        {
                            Id = new Guid("87c0e2a2-8d0e-4ec8-a68f-24d1fa837709"),
                            CountryId = new Guid("c33fbfc4-81a0-4408-9e41-69f69c25283c"),
                            ISO = "dn"
                        },
                        new
                        {
                            Id = new Guid("f9cc40bb-9d69-4a2e-8ff4-817820adfbb2"),
                            CountryId = new Guid("c33fbfc4-81a0-4408-9e41-69f69c25283c"),
                            ISO = "zhy"
                        },
                        new
                        {
                            Id = new Guid("beaea866-7050-4e55-a0e0-3de7353562a1"),
                            CountryId = new Guid("c33fbfc4-81a0-4408-9e41-69f69c25283c"),
                            ISO = "zp"
                        },
                        new
                        {
                            Id = new Guid("23677c45-ff8b-487b-8cbe-9908bac67a0c"),
                            CountryId = new Guid("c33fbfc4-81a0-4408-9e41-69f69c25283c"),
                            ISO = "if"
                        },
                        new
                        {
                            Id = new Guid("22c6320d-8ee2-4042-a224-993a6f7fb6bc"),
                            CountryId = new Guid("c33fbfc4-81a0-4408-9e41-69f69c25283c"),
                            ISO = "ky"
                        },
                        new
                        {
                            Id = new Guid("8dfdc479-1ea3-49d9-81fa-09f32b9fd932"),
                            CountryId = new Guid("c33fbfc4-81a0-4408-9e41-69f69c25283c"),
                            ISO = "kr"
                        },
                        new
                        {
                            Id = new Guid("ba7afcf0-65ae-49b0-8590-183c0ee834d3"),
                            CountryId = new Guid("c33fbfc4-81a0-4408-9e41-69f69c25283c"),
                            ISO = "lut"
                        },
                        new
                        {
                            Id = new Guid("110cde0e-785f-4e3d-b809-fe407f9aa73d"),
                            CountryId = new Guid("c33fbfc4-81a0-4408-9e41-69f69c25283c"),
                            ISO = "lv"
                        },
                        new
                        {
                            Id = new Guid("367d5030-ed14-46e0-a9cd-0b269cbb5ceb"),
                            CountryId = new Guid("c33fbfc4-81a0-4408-9e41-69f69c25283c"),
                            ISO = "my"
                        },
                        new
                        {
                            Id = new Guid("df0daa00-a8fa-457b-a283-a33025373f76"),
                            CountryId = new Guid("c33fbfc4-81a0-4408-9e41-69f69c25283c"),
                            ISO = "od"
                        },
                        new
                        {
                            Id = new Guid("5a34d6d7-e5c1-4f21-ad8a-3c2b8ea1962a"),
                            CountryId = new Guid("c33fbfc4-81a0-4408-9e41-69f69c25283c"),
                            ISO = "pol"
                        },
                        new
                        {
                            Id = new Guid("2c8af7c5-8078-4de3-8170-55ecd999b344"),
                            CountryId = new Guid("c33fbfc4-81a0-4408-9e41-69f69c25283c"),
                            ISO = "ri"
                        },
                        new
                        {
                            Id = new Guid("7367d2ea-c9ec-4b79-a65c-de408c18417a"),
                            CountryId = new Guid("c33fbfc4-81a0-4408-9e41-69f69c25283c"),
                            ISO = "su"
                        },
                        new
                        {
                            Id = new Guid("ff87c533-0b0c-4da1-9141-abba14c01e45"),
                            CountryId = new Guid("c33fbfc4-81a0-4408-9e41-69f69c25283c"),
                            ISO = "ter"
                        },
                        new
                        {
                            Id = new Guid("f4eb8ca1-7b48-49d1-9abe-f6175a1e66fa"),
                            CountryId = new Guid("c33fbfc4-81a0-4408-9e41-69f69c25283c"),
                            ISO = "uzh"
                        },
                        new
                        {
                            Id = new Guid("a1c6802e-2703-4bbb-8928-dce775cb4000"),
                            CountryId = new Guid("c33fbfc4-81a0-4408-9e41-69f69c25283c"),
                            ISO = "khar"
                        },
                        new
                        {
                            Id = new Guid("48071ea6-9bca-4716-b263-2b0937b174eb"),
                            CountryId = new Guid("c33fbfc4-81a0-4408-9e41-69f69c25283c"),
                            ISO = "kher"
                        },
                        new
                        {
                            Id = new Guid("e4be989f-509b-4094-86be-ccae5534b5a7"),
                            CountryId = new Guid("c33fbfc4-81a0-4408-9e41-69f69c25283c"),
                            ISO = "khm"
                        },
                        new
                        {
                            Id = new Guid("adbf6b11-5f76-4121-a9ef-182b59667745"),
                            CountryId = new Guid("c33fbfc4-81a0-4408-9e41-69f69c25283c"),
                            ISO = "chk"
                        },
                        new
                        {
                            Id = new Guid("7b385e52-2cbe-4579-86af-d8ae79c9ca31"),
                            CountryId = new Guid("c33fbfc4-81a0-4408-9e41-69f69c25283c"),
                            ISO = "chv"
                        },
                        new
                        {
                            Id = new Guid("cfce4ca8-f772-4e3c-8605-35efc365943a"),
                            CountryId = new Guid("c33fbfc4-81a0-4408-9e41-69f69c25283c"),
                            ISO = "chh"
                        },
                        new
                        {
                            Id = new Guid("9dcb09e3-8bca-482e-a96a-0e15fa8dbaba"),
                            CountryId = new Guid("4a9d3d61-cb58-4b3d-bc72-01fa77ecfb9a"),
                            ISO = "var"
                        },
                        new
                        {
                            Id = new Guid("c28e1429-7a6f-4e86-b021-1597c617f2d7"),
                            CountryId = new Guid("4a9d3d61-cb58-4b3d-bc72-01fa77ecfb9a"),
                            ISO = "lub"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("CityTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e04d7cb4-e843-47f5-a9e3-7bbe0187938b"),
                            CityId = new Guid("1a81e2aa-08c2-4992-ae34-2aa6f4eeed0b"),
                            Language = "uk",
                            Name = "Вінниця"
                        },
                        new
                        {
                            Id = new Guid("c7ec64cd-48d7-4265-8fce-fb6dcdf65ac2"),
                            CityId = new Guid("87c0e2a2-8d0e-4ec8-a68f-24d1fa837709"),
                            Language = "uk",
                            Name = "Дніпро"
                        },
                        new
                        {
                            Id = new Guid("61137bc0-e383-4b5a-8737-fcadcbc58efb"),
                            CityId = new Guid("f9cc40bb-9d69-4a2e-8ff4-817820adfbb2"),
                            Language = "uk",
                            Name = "Житомир"
                        },
                        new
                        {
                            Id = new Guid("9dccba2f-a533-46bb-9dac-9976868ef1ac"),
                            CityId = new Guid("beaea866-7050-4e55-a0e0-3de7353562a1"),
                            Language = "uk",
                            Name = "Запоріжжя"
                        },
                        new
                        {
                            Id = new Guid("98c40e86-4f02-4b52-9a31-a4a9e3d6f015"),
                            CityId = new Guid("23677c45-ff8b-487b-8cbe-9908bac67a0c"),
                            Language = "uk",
                            Name = "Івано-Франківськ"
                        },
                        new
                        {
                            Id = new Guid("6981f448-e2f8-434f-b029-532f6c499145"),
                            CityId = new Guid("22c6320d-8ee2-4042-a224-993a6f7fb6bc"),
                            Language = "uk",
                            Name = "Київ"
                        },
                        new
                        {
                            Id = new Guid("ba4a95be-dd12-47d6-9531-75f6892daeef"),
                            CityId = new Guid("8dfdc479-1ea3-49d9-81fa-09f32b9fd932"),
                            Language = "uk",
                            Name = "Кропивницький"
                        },
                        new
                        {
                            Id = new Guid("aedc482b-b51a-4af7-9911-42d7f2972a9c"),
                            CityId = new Guid("ba7afcf0-65ae-49b0-8590-183c0ee834d3"),
                            Language = "uk",
                            Name = "Луцьк"
                        },
                        new
                        {
                            Id = new Guid("6e270348-4b2d-4236-9b0e-7faf6c00f216"),
                            CityId = new Guid("110cde0e-785f-4e3d-b809-fe407f9aa73d"),
                            Language = "uk",
                            Name = "Львів"
                        },
                        new
                        {
                            Id = new Guid("b9903818-1b1c-467e-b0b0-271e17b527e2"),
                            CityId = new Guid("367d5030-ed14-46e0-a9cd-0b269cbb5ceb"),
                            Language = "uk",
                            Name = "Миколаїв"
                        },
                        new
                        {
                            Id = new Guid("261bb362-4a9c-44c7-853c-052cdb7af13b"),
                            CityId = new Guid("df0daa00-a8fa-457b-a283-a33025373f76"),
                            Language = "uk",
                            Name = "Одеса"
                        },
                        new
                        {
                            Id = new Guid("e49074f4-c042-41cf-81fc-33ba963d3cfd"),
                            CityId = new Guid("5a34d6d7-e5c1-4f21-ad8a-3c2b8ea1962a"),
                            Language = "uk",
                            Name = "Полтава"
                        },
                        new
                        {
                            Id = new Guid("c1390ba4-c87d-4140-b033-91f9a2b0083b"),
                            CityId = new Guid("2c8af7c5-8078-4de3-8170-55ecd999b344"),
                            Language = "uk",
                            Name = "Рівне"
                        },
                        new
                        {
                            Id = new Guid("8e985d72-5a92-4111-af02-0f344a78116a"),
                            CityId = new Guid("7367d2ea-c9ec-4b79-a65c-de408c18417a"),
                            Language = "uk",
                            Name = "Суми"
                        },
                        new
                        {
                            Id = new Guid("06759a7d-7190-441e-9230-5271a081519e"),
                            CityId = new Guid("ff87c533-0b0c-4da1-9141-abba14c01e45"),
                            Language = "uk",
                            Name = "Тернопіль"
                        },
                        new
                        {
                            Id = new Guid("c99a188a-0807-47c7-9ba0-7d2bcc308a39"),
                            CityId = new Guid("f4eb8ca1-7b48-49d1-9abe-f6175a1e66fa"),
                            Language = "uk",
                            Name = "Ужгород"
                        },
                        new
                        {
                            Id = new Guid("cc3ce5f3-8d1f-4338-8452-19d2b619f9be"),
                            CityId = new Guid("a1c6802e-2703-4bbb-8928-dce775cb4000"),
                            Language = "uk",
                            Name = "Харків"
                        },
                        new
                        {
                            Id = new Guid("2bef0145-0845-45da-86e2-a0303699feac"),
                            CityId = new Guid("48071ea6-9bca-4716-b263-2b0937b174eb"),
                            Language = "uk",
                            Name = "Херсон"
                        },
                        new
                        {
                            Id = new Guid("736e97d1-f3d7-449c-9fae-0f6c6644f8d1"),
                            CityId = new Guid("e4be989f-509b-4094-86be-ccae5534b5a7"),
                            Language = "uk",
                            Name = "Хмельницький"
                        },
                        new
                        {
                            Id = new Guid("ca3d50db-ba91-45ee-94ac-f65857303f80"),
                            CityId = new Guid("adbf6b11-5f76-4121-a9ef-182b59667745"),
                            Language = "uk",
                            Name = "Черкаси"
                        },
                        new
                        {
                            Id = new Guid("1c001708-9c34-4495-ba17-527c0614dd6a"),
                            CityId = new Guid("7b385e52-2cbe-4579-86af-d8ae79c9ca31"),
                            Language = "uk",
                            Name = "Чернівці"
                        },
                        new
                        {
                            Id = new Guid("0adc55b5-6aa6-4d67-b44b-dee3497b5973"),
                            CityId = new Guid("cfce4ca8-f772-4e3c-8605-35efc365943a"),
                            Language = "uk",
                            Name = "Чернігів"
                        },
                        new
                        {
                            Id = new Guid("cfbdda40-d746-4db7-821f-1859aa507732"),
                            CityId = new Guid("1a81e2aa-08c2-4992-ae34-2aa6f4eeed0b"),
                            Language = "en",
                            Name = "Vinnytsia"
                        },
                        new
                        {
                            Id = new Guid("122727a9-0d50-4dfd-86a9-5220fc68d469"),
                            CityId = new Guid("87c0e2a2-8d0e-4ec8-a68f-24d1fa837709"),
                            Language = "en",
                            Name = "Dnipro"
                        },
                        new
                        {
                            Id = new Guid("cd2a91e6-22aa-449a-ac03-38a51dee78e1"),
                            CityId = new Guid("f9cc40bb-9d69-4a2e-8ff4-817820adfbb2"),
                            Language = "en",
                            Name = "Zhytomyr"
                        },
                        new
                        {
                            Id = new Guid("ceddc5de-fb2e-4838-a64b-c5c24b03d8bb"),
                            CityId = new Guid("beaea866-7050-4e55-a0e0-3de7353562a1"),
                            Language = "en",
                            Name = "Zaporizhzhia"
                        },
                        new
                        {
                            Id = new Guid("af88a94b-be9b-4185-83d3-9bc0ccaf9aee"),
                            CityId = new Guid("23677c45-ff8b-487b-8cbe-9908bac67a0c"),
                            Language = "en",
                            Name = "Ivano-Frankivsk"
                        },
                        new
                        {
                            Id = new Guid("4acaadd5-093a-477b-a7fb-3c4fd87e3021"),
                            CityId = new Guid("22c6320d-8ee2-4042-a224-993a6f7fb6bc"),
                            Language = "en",
                            Name = "Kyiv"
                        },
                        new
                        {
                            Id = new Guid("afb93ff9-5def-479e-8291-1442ba4d9b13"),
                            CityId = new Guid("8dfdc479-1ea3-49d9-81fa-09f32b9fd932"),
                            Language = "en",
                            Name = "Kropyvnytskyi"
                        },
                        new
                        {
                            Id = new Guid("1e781afc-3b2e-4498-82c7-edf247900856"),
                            CityId = new Guid("ba7afcf0-65ae-49b0-8590-183c0ee834d3"),
                            Language = "en",
                            Name = "Lutsk"
                        },
                        new
                        {
                            Id = new Guid("79370897-dbd0-4250-a754-f6a664e9cbf7"),
                            CityId = new Guid("110cde0e-785f-4e3d-b809-fe407f9aa73d"),
                            Language = "en",
                            Name = "Lviv"
                        },
                        new
                        {
                            Id = new Guid("db510866-fec8-41c7-bc7f-625602c90c1f"),
                            CityId = new Guid("367d5030-ed14-46e0-a9cd-0b269cbb5ceb"),
                            Language = "en",
                            Name = "Mykolaiv"
                        },
                        new
                        {
                            Id = new Guid("4d3ba94b-897a-4796-8761-18d2f3bbe2fa"),
                            CityId = new Guid("df0daa00-a8fa-457b-a283-a33025373f76"),
                            Language = "en",
                            Name = "Odesa"
                        },
                        new
                        {
                            Id = new Guid("d6ee28c9-5e8f-44c3-83ee-cc58ed6f0bd4"),
                            CityId = new Guid("5a34d6d7-e5c1-4f21-ad8a-3c2b8ea1962a"),
                            Language = "en",
                            Name = "Poltava"
                        },
                        new
                        {
                            Id = new Guid("18dfd40f-28fe-4aae-b379-ebe748f8026f"),
                            CityId = new Guid("2c8af7c5-8078-4de3-8170-55ecd999b344"),
                            Language = "en",
                            Name = "Rivne"
                        },
                        new
                        {
                            Id = new Guid("647b9867-df23-4d4a-98cd-5db51c56220a"),
                            CityId = new Guid("7367d2ea-c9ec-4b79-a65c-de408c18417a"),
                            Language = "en",
                            Name = "Sumy"
                        },
                        new
                        {
                            Id = new Guid("e027c280-7d42-4ff2-b073-6b02b1300753"),
                            CityId = new Guid("ff87c533-0b0c-4da1-9141-abba14c01e45"),
                            Language = "en",
                            Name = "Ternopil"
                        },
                        new
                        {
                            Id = new Guid("ba456dc6-47c6-47a2-8c52-8ce334b928ba"),
                            CityId = new Guid("f4eb8ca1-7b48-49d1-9abe-f6175a1e66fa"),
                            Language = "en",
                            Name = "Uzhhorod"
                        },
                        new
                        {
                            Id = new Guid("59588d92-c35d-4860-b950-a7cf2928329e"),
                            CityId = new Guid("a1c6802e-2703-4bbb-8928-dce775cb4000"),
                            Language = "en",
                            Name = "Kharkiv"
                        },
                        new
                        {
                            Id = new Guid("4ba2d40f-ecb7-4ad0-be96-05ac96771c26"),
                            CityId = new Guid("48071ea6-9bca-4716-b263-2b0937b174eb"),
                            Language = "en",
                            Name = "Kherson"
                        },
                        new
                        {
                            Id = new Guid("a4ef3355-6aea-42f7-9b7a-bfb42b7c3bc1"),
                            CityId = new Guid("e4be989f-509b-4094-86be-ccae5534b5a7"),
                            Language = "en",
                            Name = "Khmelnytskyi"
                        },
                        new
                        {
                            Id = new Guid("d5015241-7b5d-4885-9ef0-1c0636706f12"),
                            CityId = new Guid("adbf6b11-5f76-4121-a9ef-182b59667745"),
                            Language = "en",
                            Name = "Cherkasy"
                        },
                        new
                        {
                            Id = new Guid("494242a0-8c17-42d1-a4a1-0749f0e868ab"),
                            CityId = new Guid("7b385e52-2cbe-4579-86af-d8ae79c9ca31"),
                            Language = "en",
                            Name = "Chernivtsi"
                        },
                        new
                        {
                            Id = new Guid("536508b8-d407-4db4-9e16-2017b7b18aa6"),
                            CityId = new Guid("cfce4ca8-f772-4e3c-8605-35efc365943a"),
                            Language = "en",
                            Name = "Chernihiv"
                        },
                        new
                        {
                            Id = new Guid("e6ec5732-ddda-420e-8e0f-77845b2a0ed2"),
                            CityId = new Guid("9dcb09e3-8bca-482e-a96a-0e15fa8dbaba"),
                            Language = "uk",
                            Name = "Варшава"
                        },
                        new
                        {
                            Id = new Guid("1bc428ee-c013-4a5f-91cb-c4e59c2bf468"),
                            CityId = new Guid("c28e1429-7a6f-4e86-b021-1597c617f2d7"),
                            Language = "uk",
                            Name = "Люблін"
                        },
                        new
                        {
                            Id = new Guid("b24eefcc-3b7a-4f0e-8be2-516753abd400"),
                            CityId = new Guid("9dcb09e3-8bca-482e-a96a-0e15fa8dbaba"),
                            Language = "en",
                            Name = "Varshava"
                        },
                        new
                        {
                            Id = new Guid("fb66a890-0976-401a-9580-9ac3c2cf0d64"),
                            CityId = new Guid("c28e1429-7a6f-4e86-b021-1597c617f2d7"),
                            Language = "en",
                            Name = "Lublin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c33fbfc4-81a0-4408-9e41-69f69c25283c"),
                            ISO = "uk"
                        },
                        new
                        {
                            Id = new Guid("4a9d3d61-cb58-4b3d-bc72-01fa77ecfb9a"),
                            ISO = "pl"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CountryTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f603d569-fe01-4b44-9e28-1a9b99894820"),
                            CountryId = new Guid("c33fbfc4-81a0-4408-9e41-69f69c25283c"),
                            Language = "en",
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("421bd36f-5ad6-41d9-8951-a5fe783c412b"),
                            CountryId = new Guid("c33fbfc4-81a0-4408-9e41-69f69c25283c"),
                            Language = "uk",
                            Name = "Україна"
                        },
                        new
                        {
                            Id = new Guid("c0255969-cbe6-4c83-9ba3-954ff95488ba"),
                            CountryId = new Guid("4a9d3d61-cb58-4b3d-bc72-01fa77ecfb9a"),
                            Language = "en",
                            Name = "Poland"
                        },
                        new
                        {
                            Id = new Guid("c87db484-8a81-494b-bfb7-1914c54a3636"),
                            CountryId = new Guid("4a9d3d61-cb58-4b3d-bc72-01fa77ecfb9a"),
                            Language = "uk",
                            Name = "Польша"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Donate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTimeCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderCardBank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SenderCardCountry")
                        .HasColumnType("int");

                    b.Property<string>("SenderCardMask2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderCardType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SenderCommission")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Donates");
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VolunteerApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VolunteerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VolunteerUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VolunteerUserId", "VolunteerApplicationId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DAL.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplictionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserRecipientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserSenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplictionId");

                    b.HasIndex("UserRecipientId");

                    b.HasIndex("UserSenderId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ProfilePictures");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8dfdab28-06fd-46f5-83ad-1e561e2b6bf2"),
                            Title = "medicine"
                        },
                        new
                        {
                            Id = new Guid("07655ac2-39c3-4a62-b532-2e0537de3a67"),
                            Title = "cooking"
                        },
                        new
                        {
                            Id = new Guid("fc65caae-877f-4e1d-bdc9-3505efa85d7d"),
                            Title = "building"
                        },
                        new
                        {
                            Id = new Guid("fd24d72c-7d88-4d59-947e-dbce7e849282"),
                            Title = "psychology"
                        });
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c6329374-b566-453b-8b01-958f5b2af61a"),
                            Language = "en",
                            Name = "medicine",
                            SkillId = new Guid("8dfdab28-06fd-46f5-83ad-1e561e2b6bf2")
                        },
                        new
                        {
                            Id = new Guid("7dd7b342-e6b0-42e9-bd88-5d8c81623142"),
                            Language = "uk",
                            Name = "медицина",
                            SkillId = new Guid("8dfdab28-06fd-46f5-83ad-1e561e2b6bf2")
                        },
                        new
                        {
                            Id = new Guid("f55d9148-a73c-481a-8374-8b6e1c078a84"),
                            Language = "en",
                            Name = "cooking",
                            SkillId = new Guid("07655ac2-39c3-4a62-b532-2e0537de3a67")
                        },
                        new
                        {
                            Id = new Guid("d61525e6-82f5-4cbc-a892-178d70e328fc"),
                            Language = "uk",
                            Name = "кулінарія",
                            SkillId = new Guid("07655ac2-39c3-4a62-b532-2e0537de3a67")
                        },
                        new
                        {
                            Id = new Guid("6b77461c-94d1-4998-9f41-8a4101248932"),
                            Language = "en",
                            Name = "building",
                            SkillId = new Guid("fc65caae-877f-4e1d-bdc9-3505efa85d7d")
                        },
                        new
                        {
                            Id = new Guid("8178bb16-ce22-47ec-8a12-26efbc769d30"),
                            Language = "uk",
                            Name = "будівництво",
                            SkillId = new Guid("fc65caae-877f-4e1d-bdc9-3505efa85d7d")
                        },
                        new
                        {
                            Id = new Guid("464a5641-f411-47e8-8811-0b08d6a0b893"),
                            Language = "en",
                            Name = "psychology",
                            SkillId = new Guid("fd24d72c-7d88-4d59-947e-dbce7e849282")
                        },
                        new
                        {
                            Id = new Guid("b8cb3da6-ec3a-4976-9119-958ee2b52ccd"),
                            Language = "uk",
                            Name = "психологія",
                            SkillId = new Guid("fd24d72c-7d88-4d59-947e-dbce7e849282")
                        });
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8ea22fd7-77e9-4caa-8317-0d0d43be4cb3"),
                            CityId = new Guid("1a81e2aa-08c2-4992-ae34-2aa6f4eeed0b"),
                            DateOfBirth = new DateTime(2023, 5, 24, 18, 50, 0, 347, DateTimeKind.Local).AddTicks(8218),
                            FirstName = "the first",
                            LastName = "admin",
                            Login = "ourfirstadmin",
                            Password = "Rk/ryiBNbnHx+s9i1IveCNNw4axYPQHm4T1eratfQlg=",
                            Phone = "+11111111111",
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Document")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DocumentFormat")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("NULL");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ApplicationId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.HasOne("DAL.Entities.Category", "Category")
                        .WithMany("Applications")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("Applications")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationSkill", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("ApplicationSkills")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("ApplicationSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DAL.Entities.CategoryTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Category", "Category")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("CityTranslations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("CountryTranslations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.Donate", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Donates")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.HasOne("DAL.Entities.Volunteer", "Volunteer")
                        .WithMany("Messages")
                        .HasForeignKey("VolunteerUserId", "VolunteerApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("DAL.Entities.Notification", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Notifications")
                        .HasForeignKey("ApplictionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "UserRecipient")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("UserRecipientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "UserSender")
                        .WithMany("SentNotifications")
                        .HasForeignKey("UserSenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("UserRecipient");

                    b.Navigation("UserSender");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithOne("ProfilePicture")
                        .HasForeignKey("DAL.Entities.ProfilePicture", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("SkillTranslations")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Volunteers")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Volunteers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Navigation("ApplicationSkills");

                    b.Navigation("Donates");

                    b.Navigation("Notifications");

                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("CategoryTranslations");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("CityTranslations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("CountryTranslations");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Navigation("ApplicationSkills");

                    b.Navigation("SkillTranslations");

                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ProfilePicture");

                    b.Navigation("ReceivedNotifications");

                    b.Navigation("SentNotifications");

                    b.Navigation("UserSkills");

                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
