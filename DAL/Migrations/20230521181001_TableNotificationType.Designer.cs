// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(VolunteerNetServerDBContext))]
    [Migration("20230521181001_TableNotificationType")]
    partial class TableNotificationType
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("CurrentSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<string>("OwnerCardName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequiredNumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<decimal?>("RequiredSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationSkill", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("ApplicationSkills");
                });

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b098ffb3-2fe4-47d3-8c75-9a46ae2b8474"),
                            Title = "health care"
                        },
                        new
                        {
                            Id = new Guid("e57aed51-0f91-4350-a0b4-c818046c719e"),
                            Title = "education"
                        },
                        new
                        {
                            Id = new Guid("718743f5-c9f3-4b84-9a7f-d74f360c311a"),
                            Title = "sports and physical culture"
                        },
                        new
                        {
                            Id = new Guid("c91e7f40-18e3-4ef4-8e91-1cb276fe111f"),
                            Title = "culture and art"
                        },
                        new
                        {
                            Id = new Guid("d2e812af-57c2-4240-bb8b-fbc7789b3e1f"),
                            Title = "social programs"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CategoryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DescriptionCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0b171f85-a508-4961-a8d3-324822036614"),
                            CategoryId = new Guid("b098ffb3-2fe4-47d3-8c75-9a46ae2b8474"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "health care"
                        },
                        new
                        {
                            Id = new Guid("bba43445-2f2a-4e8e-8f0b-3bf09835ba9c"),
                            CategoryId = new Guid("b098ffb3-2fe4-47d3-8c75-9a46ae2b8474"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "охорона здоров'я"
                        },
                        new
                        {
                            Id = new Guid("2e637433-f238-4a7e-97e6-a87afdf6d744"),
                            CategoryId = new Guid("e57aed51-0f91-4350-a0b4-c818046c719e"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "education"
                        },
                        new
                        {
                            Id = new Guid("c089a324-0d33-412c-811b-8bad0c815e4b"),
                            CategoryId = new Guid("e57aed51-0f91-4350-a0b4-c818046c719e"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "освіта"
                        },
                        new
                        {
                            Id = new Guid("1a15ce19-8b01-4ce9-a9f9-7484aee3d17f"),
                            CategoryId = new Guid("718743f5-c9f3-4b84-9a7f-d74f360c311a"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "sport and physical culture"
                        },
                        new
                        {
                            Id = new Guid("2b41e20f-af53-4ac6-9470-e5aac3f2f794"),
                            CategoryId = new Guid("718743f5-c9f3-4b84-9a7f-d74f360c311a"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "спорт та фізична культура"
                        },
                        new
                        {
                            Id = new Guid("d4235921-4744-44e2-9626-fbc0ee17aad5"),
                            CategoryId = new Guid("c91e7f40-18e3-4ef4-8e91-1cb276fe111f"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "culture and art"
                        },
                        new
                        {
                            Id = new Guid("3d1d36e3-8672-4c7d-a541-097f9f338cf4"),
                            CategoryId = new Guid("c91e7f40-18e3-4ef4-8e91-1cb276fe111f"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "культура та мистецтво"
                        },
                        new
                        {
                            Id = new Guid("fe21553b-f481-4f39-b63f-a1f9f8d95a2c"),
                            CategoryId = new Guid("d2e812af-57c2-4240-bb8b-fbc7789b3e1f"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "social programs"
                        },
                        new
                        {
                            Id = new Guid("1a47fe6a-07b8-44c9-9db8-1eada78a9540"),
                            CategoryId = new Guid("d2e812af-57c2-4240-bb8b-fbc7789b3e1f"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "соціальні програми"
                        });
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9c4b2bcd-e41b-48de-93e9-23656c5003ff"),
                            CountryId = new Guid("5365a921-3b8c-4274-9327-0a28a242373e"),
                            ISO = "vi"
                        },
                        new
                        {
                            Id = new Guid("e3615cf9-d87d-4cbe-a67a-1e8c614078d3"),
                            CountryId = new Guid("5365a921-3b8c-4274-9327-0a28a242373e"),
                            ISO = "dn"
                        },
                        new
                        {
                            Id = new Guid("b9227b1a-ca56-4b36-a1d0-f03aa7fb3c20"),
                            CountryId = new Guid("5365a921-3b8c-4274-9327-0a28a242373e"),
                            ISO = "zhy"
                        },
                        new
                        {
                            Id = new Guid("160580a0-3e02-4db8-9fd0-bc8764c0bad7"),
                            CountryId = new Guid("5365a921-3b8c-4274-9327-0a28a242373e"),
                            ISO = "zp"
                        },
                        new
                        {
                            Id = new Guid("9675373a-a8de-411b-afb9-ab4cead56d95"),
                            CountryId = new Guid("5365a921-3b8c-4274-9327-0a28a242373e"),
                            ISO = "if"
                        },
                        new
                        {
                            Id = new Guid("026470bd-9702-4558-a48a-2297131088cb"),
                            CountryId = new Guid("5365a921-3b8c-4274-9327-0a28a242373e"),
                            ISO = "ky"
                        },
                        new
                        {
                            Id = new Guid("440b782e-edd4-453d-a928-4910bf76e85b"),
                            CountryId = new Guid("5365a921-3b8c-4274-9327-0a28a242373e"),
                            ISO = "kr"
                        },
                        new
                        {
                            Id = new Guid("4110cedf-7c7b-4384-88bf-9eab6dcd5640"),
                            CountryId = new Guid("5365a921-3b8c-4274-9327-0a28a242373e"),
                            ISO = "lut"
                        },
                        new
                        {
                            Id = new Guid("2fb4b2a5-8b76-470b-97a9-91ba63ce31fe"),
                            CountryId = new Guid("5365a921-3b8c-4274-9327-0a28a242373e"),
                            ISO = "lv"
                        },
                        new
                        {
                            Id = new Guid("ca875f6b-24d1-4786-befc-59a434392e14"),
                            CountryId = new Guid("5365a921-3b8c-4274-9327-0a28a242373e"),
                            ISO = "my"
                        },
                        new
                        {
                            Id = new Guid("846c346d-ad01-4788-949c-b7f59e751c5c"),
                            CountryId = new Guid("5365a921-3b8c-4274-9327-0a28a242373e"),
                            ISO = "od"
                        },
                        new
                        {
                            Id = new Guid("380cf2cf-7be3-4d93-aa91-ce6908f2cebf"),
                            CountryId = new Guid("5365a921-3b8c-4274-9327-0a28a242373e"),
                            ISO = "pol"
                        },
                        new
                        {
                            Id = new Guid("a774466f-c868-403e-877b-4ba3a464183a"),
                            CountryId = new Guid("5365a921-3b8c-4274-9327-0a28a242373e"),
                            ISO = "ri"
                        },
                        new
                        {
                            Id = new Guid("1a9b3b73-7f42-4616-98e2-91f1be1e6f88"),
                            CountryId = new Guid("5365a921-3b8c-4274-9327-0a28a242373e"),
                            ISO = "su"
                        },
                        new
                        {
                            Id = new Guid("3cde9192-5660-4241-b64a-aa9f54f45f1d"),
                            CountryId = new Guid("5365a921-3b8c-4274-9327-0a28a242373e"),
                            ISO = "ter"
                        },
                        new
                        {
                            Id = new Guid("6bbe724f-e651-4c61-bcac-ad7d1d3bac07"),
                            CountryId = new Guid("5365a921-3b8c-4274-9327-0a28a242373e"),
                            ISO = "uzh"
                        },
                        new
                        {
                            Id = new Guid("9c557de6-a9db-4c9a-a7dd-c1b204a523b7"),
                            CountryId = new Guid("5365a921-3b8c-4274-9327-0a28a242373e"),
                            ISO = "khar"
                        },
                        new
                        {
                            Id = new Guid("49e349e3-85cf-44ad-9f4d-3d1e801ad24f"),
                            CountryId = new Guid("5365a921-3b8c-4274-9327-0a28a242373e"),
                            ISO = "kher"
                        },
                        new
                        {
                            Id = new Guid("d9d787c2-2bf9-4bd3-a30f-9f1710a471b2"),
                            CountryId = new Guid("5365a921-3b8c-4274-9327-0a28a242373e"),
                            ISO = "khm"
                        },
                        new
                        {
                            Id = new Guid("b828c5a1-74b4-48ab-b4e4-ce4c9be9bd7a"),
                            CountryId = new Guid("5365a921-3b8c-4274-9327-0a28a242373e"),
                            ISO = "chk"
                        },
                        new
                        {
                            Id = new Guid("f80517df-5353-435c-bfca-43bf2eab6847"),
                            CountryId = new Guid("5365a921-3b8c-4274-9327-0a28a242373e"),
                            ISO = "chv"
                        },
                        new
                        {
                            Id = new Guid("13ee8b9f-0467-46dc-a5a1-4bf9265af1e4"),
                            CountryId = new Guid("5365a921-3b8c-4274-9327-0a28a242373e"),
                            ISO = "chh"
                        },
                        new
                        {
                            Id = new Guid("7e499857-9447-420b-85b8-f34fd55a001f"),
                            CountryId = new Guid("57c7a5b5-2567-4c19-85db-e612caaf5df9"),
                            ISO = "var"
                        },
                        new
                        {
                            Id = new Guid("384b4a32-8e7c-49c8-95eb-300eb93593e3"),
                            CountryId = new Guid("57c7a5b5-2567-4c19-85db-e612caaf5df9"),
                            ISO = "lub"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("CityTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4de97c6d-d16b-49ab-a747-fc2ce8c56e57"),
                            CityId = new Guid("9c4b2bcd-e41b-48de-93e9-23656c5003ff"),
                            Language = "uk",
                            Name = "Вінниця"
                        },
                        new
                        {
                            Id = new Guid("98384bf5-c52a-4214-83f4-9e1f0b21a62d"),
                            CityId = new Guid("e3615cf9-d87d-4cbe-a67a-1e8c614078d3"),
                            Language = "uk",
                            Name = "Дніпро"
                        },
                        new
                        {
                            Id = new Guid("36856bf5-c4f0-4df3-950a-76ed7424da73"),
                            CityId = new Guid("b9227b1a-ca56-4b36-a1d0-f03aa7fb3c20"),
                            Language = "uk",
                            Name = "Житомир"
                        },
                        new
                        {
                            Id = new Guid("c8466c03-ee4a-4d14-975b-0b30bfc104af"),
                            CityId = new Guid("160580a0-3e02-4db8-9fd0-bc8764c0bad7"),
                            Language = "uk",
                            Name = "Запоріжжя"
                        },
                        new
                        {
                            Id = new Guid("28ffe554-7442-4bc2-b791-953c13af882f"),
                            CityId = new Guid("9675373a-a8de-411b-afb9-ab4cead56d95"),
                            Language = "uk",
                            Name = "Івано-Франківськ"
                        },
                        new
                        {
                            Id = new Guid("9879d2f0-2559-4773-b926-73947de4f3c5"),
                            CityId = new Guid("026470bd-9702-4558-a48a-2297131088cb"),
                            Language = "uk",
                            Name = "Київ"
                        },
                        new
                        {
                            Id = new Guid("eeb8589c-3713-452c-a7c6-9d57edc2e69b"),
                            CityId = new Guid("440b782e-edd4-453d-a928-4910bf76e85b"),
                            Language = "uk",
                            Name = "Кропивницький"
                        },
                        new
                        {
                            Id = new Guid("4ff35201-6e21-4a09-873b-d85db7521018"),
                            CityId = new Guid("4110cedf-7c7b-4384-88bf-9eab6dcd5640"),
                            Language = "uk",
                            Name = "Луцьк"
                        },
                        new
                        {
                            Id = new Guid("f7d896a7-f44b-4410-983e-9b5ae2efa2d5"),
                            CityId = new Guid("2fb4b2a5-8b76-470b-97a9-91ba63ce31fe"),
                            Language = "uk",
                            Name = "Львів"
                        },
                        new
                        {
                            Id = new Guid("a2f050a9-9af6-4da1-848c-8d3092ac6716"),
                            CityId = new Guid("ca875f6b-24d1-4786-befc-59a434392e14"),
                            Language = "uk",
                            Name = "Миколаїв"
                        },
                        new
                        {
                            Id = new Guid("109a6421-5fdc-40cc-b744-6ae0d74f41c5"),
                            CityId = new Guid("846c346d-ad01-4788-949c-b7f59e751c5c"),
                            Language = "uk",
                            Name = "Одеса"
                        },
                        new
                        {
                            Id = new Guid("108bed70-ae76-4ed1-87b8-1b225dc81779"),
                            CityId = new Guid("380cf2cf-7be3-4d93-aa91-ce6908f2cebf"),
                            Language = "uk",
                            Name = "Полтава"
                        },
                        new
                        {
                            Id = new Guid("8d7aee44-c2bb-4430-af2f-1246200a76c6"),
                            CityId = new Guid("a774466f-c868-403e-877b-4ba3a464183a"),
                            Language = "uk",
                            Name = "Рівне"
                        },
                        new
                        {
                            Id = new Guid("0ecf107e-ade4-465b-99ad-ab2e386b7216"),
                            CityId = new Guid("1a9b3b73-7f42-4616-98e2-91f1be1e6f88"),
                            Language = "uk",
                            Name = "Суми"
                        },
                        new
                        {
                            Id = new Guid("9fc98f2d-8f48-48f0-97f6-2872446455e4"),
                            CityId = new Guid("3cde9192-5660-4241-b64a-aa9f54f45f1d"),
                            Language = "uk",
                            Name = "Тернопіль"
                        },
                        new
                        {
                            Id = new Guid("052c024b-2eb6-4fc0-adcf-39887be30453"),
                            CityId = new Guid("6bbe724f-e651-4c61-bcac-ad7d1d3bac07"),
                            Language = "uk",
                            Name = "Ужгород"
                        },
                        new
                        {
                            Id = new Guid("5019d435-1427-40bb-aaf0-4c5e67fd36ae"),
                            CityId = new Guid("9c557de6-a9db-4c9a-a7dd-c1b204a523b7"),
                            Language = "uk",
                            Name = "Харків"
                        },
                        new
                        {
                            Id = new Guid("46170db3-2f4c-419e-a2bc-3e61eac2fe05"),
                            CityId = new Guid("49e349e3-85cf-44ad-9f4d-3d1e801ad24f"),
                            Language = "uk",
                            Name = "Херсон"
                        },
                        new
                        {
                            Id = new Guid("7a5e197a-1b02-42a2-8268-8bd5630a1088"),
                            CityId = new Guid("d9d787c2-2bf9-4bd3-a30f-9f1710a471b2"),
                            Language = "uk",
                            Name = "Хмельницький"
                        },
                        new
                        {
                            Id = new Guid("a0ddc1b8-2b58-497b-9a76-85342a1777c4"),
                            CityId = new Guid("b828c5a1-74b4-48ab-b4e4-ce4c9be9bd7a"),
                            Language = "uk",
                            Name = "Черкаси"
                        },
                        new
                        {
                            Id = new Guid("b9f8e1bf-265d-4b00-bcba-2a91119df80a"),
                            CityId = new Guid("f80517df-5353-435c-bfca-43bf2eab6847"),
                            Language = "uk",
                            Name = "Чернівці"
                        },
                        new
                        {
                            Id = new Guid("390fdb98-5194-4ec8-8aee-22beb6d21d24"),
                            CityId = new Guid("13ee8b9f-0467-46dc-a5a1-4bf9265af1e4"),
                            Language = "uk",
                            Name = "Чернігів"
                        },
                        new
                        {
                            Id = new Guid("63e6a732-0d42-401a-87cc-f8b38a683359"),
                            CityId = new Guid("9c4b2bcd-e41b-48de-93e9-23656c5003ff"),
                            Language = "en",
                            Name = "Vinnytsia"
                        },
                        new
                        {
                            Id = new Guid("2d3bcfb0-402a-4004-b118-c1916d9536fa"),
                            CityId = new Guid("e3615cf9-d87d-4cbe-a67a-1e8c614078d3"),
                            Language = "en",
                            Name = "Dnipro"
                        },
                        new
                        {
                            Id = new Guid("3bed3694-856e-494d-94a2-c84b2d0196d9"),
                            CityId = new Guid("b9227b1a-ca56-4b36-a1d0-f03aa7fb3c20"),
                            Language = "en",
                            Name = "Zhytomyr"
                        },
                        new
                        {
                            Id = new Guid("a7c1d1f7-15e8-42ab-b000-7c174f80674d"),
                            CityId = new Guid("160580a0-3e02-4db8-9fd0-bc8764c0bad7"),
                            Language = "en",
                            Name = "Zaporizhzhia"
                        },
                        new
                        {
                            Id = new Guid("bf793b60-c693-4eb7-bff8-69b372f953ab"),
                            CityId = new Guid("9675373a-a8de-411b-afb9-ab4cead56d95"),
                            Language = "en",
                            Name = "Ivano-Frankivsk"
                        },
                        new
                        {
                            Id = new Guid("261ff251-c995-4cde-ba09-76b0a8a54afa"),
                            CityId = new Guid("026470bd-9702-4558-a48a-2297131088cb"),
                            Language = "en",
                            Name = "Kyiv"
                        },
                        new
                        {
                            Id = new Guid("718bb4bc-55ac-400f-bafa-a8b125d32cf6"),
                            CityId = new Guid("440b782e-edd4-453d-a928-4910bf76e85b"),
                            Language = "en",
                            Name = "Kropyvnytskyi"
                        },
                        new
                        {
                            Id = new Guid("0477f8f3-166d-4b8f-81d0-59f5cb98709c"),
                            CityId = new Guid("4110cedf-7c7b-4384-88bf-9eab6dcd5640"),
                            Language = "en",
                            Name = "Lutsk"
                        },
                        new
                        {
                            Id = new Guid("c7ca1e84-cbbf-4e6d-acbf-a505e12e78ef"),
                            CityId = new Guid("2fb4b2a5-8b76-470b-97a9-91ba63ce31fe"),
                            Language = "en",
                            Name = "Lviv"
                        },
                        new
                        {
                            Id = new Guid("f560d4b8-be52-46cf-a3fa-e97f6b0d43a8"),
                            CityId = new Guid("ca875f6b-24d1-4786-befc-59a434392e14"),
                            Language = "en",
                            Name = "Mykolaiv"
                        },
                        new
                        {
                            Id = new Guid("b6503eda-3fa3-4be9-8ef0-6a2debc4cae3"),
                            CityId = new Guid("846c346d-ad01-4788-949c-b7f59e751c5c"),
                            Language = "en",
                            Name = "Odesa"
                        },
                        new
                        {
                            Id = new Guid("eba50ed3-53ca-4a73-b2b8-dab802bb6afb"),
                            CityId = new Guid("380cf2cf-7be3-4d93-aa91-ce6908f2cebf"),
                            Language = "en",
                            Name = "Poltava"
                        },
                        new
                        {
                            Id = new Guid("39c8292e-5b55-4da8-93e7-d03f1b4c76cf"),
                            CityId = new Guid("a774466f-c868-403e-877b-4ba3a464183a"),
                            Language = "en",
                            Name = "Rivne"
                        },
                        new
                        {
                            Id = new Guid("fc23f5ae-2bbd-43cb-af4d-adf69bfc3771"),
                            CityId = new Guid("1a9b3b73-7f42-4616-98e2-91f1be1e6f88"),
                            Language = "en",
                            Name = "Sumy"
                        },
                        new
                        {
                            Id = new Guid("450d9305-1286-4c5b-8a9e-a7021c1641b2"),
                            CityId = new Guid("3cde9192-5660-4241-b64a-aa9f54f45f1d"),
                            Language = "en",
                            Name = "Ternopil"
                        },
                        new
                        {
                            Id = new Guid("249d255f-2fc3-4b72-bab7-e91dad94eaa3"),
                            CityId = new Guid("6bbe724f-e651-4c61-bcac-ad7d1d3bac07"),
                            Language = "en",
                            Name = "Uzhhorod"
                        },
                        new
                        {
                            Id = new Guid("b7921ee1-796b-4021-b0e4-8ec45fd47554"),
                            CityId = new Guid("9c557de6-a9db-4c9a-a7dd-c1b204a523b7"),
                            Language = "en",
                            Name = "Kharkiv"
                        },
                        new
                        {
                            Id = new Guid("b452675e-5172-444e-890c-01d6be5ae932"),
                            CityId = new Guid("49e349e3-85cf-44ad-9f4d-3d1e801ad24f"),
                            Language = "en",
                            Name = "Kherson"
                        },
                        new
                        {
                            Id = new Guid("bbc493ba-03a9-4309-a74d-225a1da79a9f"),
                            CityId = new Guid("d9d787c2-2bf9-4bd3-a30f-9f1710a471b2"),
                            Language = "en",
                            Name = "Khmelnytskyi"
                        },
                        new
                        {
                            Id = new Guid("7441bfab-8ab8-4eba-b274-091e25a11c91"),
                            CityId = new Guid("b828c5a1-74b4-48ab-b4e4-ce4c9be9bd7a"),
                            Language = "en",
                            Name = "Cherkasy"
                        },
                        new
                        {
                            Id = new Guid("84637871-44f2-4cd7-a7c8-96d4d9643710"),
                            CityId = new Guid("f80517df-5353-435c-bfca-43bf2eab6847"),
                            Language = "en",
                            Name = "Chernivtsi"
                        },
                        new
                        {
                            Id = new Guid("5dcc259d-d12c-4c73-ab12-85b0ea51ac97"),
                            CityId = new Guid("13ee8b9f-0467-46dc-a5a1-4bf9265af1e4"),
                            Language = "en",
                            Name = "Chernihiv"
                        },
                        new
                        {
                            Id = new Guid("3819f494-e545-4a60-8498-0ee1d38f9d8b"),
                            CityId = new Guid("7e499857-9447-420b-85b8-f34fd55a001f"),
                            Language = "uk",
                            Name = "Варшава"
                        },
                        new
                        {
                            Id = new Guid("03d7171e-a2d8-4e15-9d4b-da8dfa305ea6"),
                            CityId = new Guid("384b4a32-8e7c-49c8-95eb-300eb93593e3"),
                            Language = "uk",
                            Name = "Люблін"
                        },
                        new
                        {
                            Id = new Guid("7f77bd1a-4797-4a2b-8ddf-76f075953023"),
                            CityId = new Guid("7e499857-9447-420b-85b8-f34fd55a001f"),
                            Language = "en",
                            Name = "Varshava"
                        },
                        new
                        {
                            Id = new Guid("7870ffb4-44d7-4ac0-a6fd-91fb0f1af5a9"),
                            CityId = new Guid("384b4a32-8e7c-49c8-95eb-300eb93593e3"),
                            Language = "en",
                            Name = "Lublin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5365a921-3b8c-4274-9327-0a28a242373e"),
                            ISO = "uk"
                        },
                        new
                        {
                            Id = new Guid("57c7a5b5-2567-4c19-85db-e612caaf5df9"),
                            ISO = "pl"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CountryTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2448b4ea-272a-46ff-9eab-423fe3b7c6df"),
                            CountryId = new Guid("5365a921-3b8c-4274-9327-0a28a242373e"),
                            Language = "en",
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("9e2e69f2-c93f-4c2a-b342-b74680bb84cb"),
                            CountryId = new Guid("5365a921-3b8c-4274-9327-0a28a242373e"),
                            Language = "uk",
                            Name = "Україна"
                        },
                        new
                        {
                            Id = new Guid("6449c3ad-92c1-4dfc-b241-d22d12032a25"),
                            CountryId = new Guid("57c7a5b5-2567-4c19-85db-e612caaf5df9"),
                            Language = "en",
                            Name = "Poland"
                        },
                        new
                        {
                            Id = new Guid("e3af7c26-78ea-4444-a811-7a963068a136"),
                            CountryId = new Guid("57c7a5b5-2567-4c19-85db-e612caaf5df9"),
                            Language = "uk",
                            Name = "Польша"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VolunteerApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VolunteerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VolunteerUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VolunteerUserId", "VolunteerApplicationId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DAL.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplictionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserRecipientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserSenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplictionId");

                    b.HasIndex("UserRecipientId");

                    b.HasIndex("UserSenderId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ProfilePictures");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2a6f3574-c66d-4334-8a7e-5e080d18e24c"),
                            Title = "medicine"
                        },
                        new
                        {
                            Id = new Guid("9dee8ae6-0d57-4b1d-aca1-38560c031166"),
                            Title = "cooking"
                        },
                        new
                        {
                            Id = new Guid("637aa438-716d-4bb9-a043-bea94441a145"),
                            Title = "building"
                        },
                        new
                        {
                            Id = new Guid("034f2999-3a09-489b-83f2-f70b854c0064"),
                            Title = "psychology"
                        });
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0b0a1b1e-b6e1-411c-a261-e081fbffa9c2"),
                            Language = "en",
                            Name = "medicine",
                            SkillId = new Guid("2a6f3574-c66d-4334-8a7e-5e080d18e24c")
                        },
                        new
                        {
                            Id = new Guid("a2b03c1e-7587-46ac-a5e5-c56dd5e8163f"),
                            Language = "uk",
                            Name = "медицина",
                            SkillId = new Guid("2a6f3574-c66d-4334-8a7e-5e080d18e24c")
                        },
                        new
                        {
                            Id = new Guid("e5cb1d4f-8c9d-45e9-a936-9e305ce504b3"),
                            Language = "en",
                            Name = "cooking",
                            SkillId = new Guid("9dee8ae6-0d57-4b1d-aca1-38560c031166")
                        },
                        new
                        {
                            Id = new Guid("ea4c3e41-fced-439d-bf0e-faaafeadad21"),
                            Language = "uk",
                            Name = "кулінарія",
                            SkillId = new Guid("9dee8ae6-0d57-4b1d-aca1-38560c031166")
                        },
                        new
                        {
                            Id = new Guid("81f60f73-b66d-46f5-aecd-44e0e2e5c551"),
                            Language = "en",
                            Name = "building",
                            SkillId = new Guid("637aa438-716d-4bb9-a043-bea94441a145")
                        },
                        new
                        {
                            Id = new Guid("ac4946cd-6574-4d91-9d6b-2e0326d09b92"),
                            Language = "uk",
                            Name = "будівництво",
                            SkillId = new Guid("637aa438-716d-4bb9-a043-bea94441a145")
                        },
                        new
                        {
                            Id = new Guid("20efae64-e2f4-4039-b49c-90384ec3cb89"),
                            Language = "en",
                            Name = "psychology",
                            SkillId = new Guid("034f2999-3a09-489b-83f2-f70b854c0064")
                        },
                        new
                        {
                            Id = new Guid("59941d27-4e5e-4280-9f23-fb70c7ff29e1"),
                            Language = "uk",
                            Name = "психологія",
                            SkillId = new Guid("034f2999-3a09-489b-83f2-f70b854c0064")
                        });
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b7eb8a53-00b8-4589-b449-df67b6602b8a"),
                            CityId = new Guid("9c4b2bcd-e41b-48de-93e9-23656c5003ff"),
                            DateOfBirth = new DateTime(2023, 5, 21, 21, 10, 0, 792, DateTimeKind.Local).AddTicks(7037),
                            FirstName = "the first",
                            LastName = "admin",
                            Login = "ourfirstadmin",
                            Password = "Rk/ryiBNbnHx+s9i1IveCNNw4axYPQHm4T1eratfQlg=",
                            Phone = "+11111111111",
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Document")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DocumentFormat")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("NULL");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ApplicationId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.HasOne("DAL.Entities.Category", "Category")
                        .WithMany("Applications")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("Applications")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationSkill", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("ApplicationSkills")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("ApplicationSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DAL.Entities.CategoryTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Category", "Category")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("CityTranslations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("CountryTranslations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.HasOne("DAL.Entities.Volunteer", "Volunteer")
                        .WithMany("Messages")
                        .HasForeignKey("VolunteerUserId", "VolunteerApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("DAL.Entities.Notification", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Notifications")
                        .HasForeignKey("ApplictionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "UserRecipient")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("UserRecipientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "UserSender")
                        .WithMany("SentNotifications")
                        .HasForeignKey("UserSenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("UserRecipient");

                    b.Navigation("UserSender");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithOne("ProfilePicture")
                        .HasForeignKey("DAL.Entities.ProfilePicture", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("SkillTranslations")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Volunteers")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Volunteers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Navigation("ApplicationSkills");

                    b.Navigation("Notifications");

                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("CategoryTranslations");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("CityTranslations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("CountryTranslations");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Navigation("ApplicationSkills");

                    b.Navigation("SkillTranslations");

                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ProfilePicture");

                    b.Navigation("ReceivedNotifications");

                    b.Navigation("SentNotifications");

                    b.Navigation("UserSkills");

                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
