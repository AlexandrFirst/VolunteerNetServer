// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(VolunteerNetServerDBContext))]
    [Migration("20230523153530_VolunteerCreationDateTime")]
    partial class VolunteerCreationDateTime
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("CurrentSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<string>("OwnerCardName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequiredNumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<decimal?>("RequiredSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationSkill", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("ApplicationSkills");
                });

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("233b7db7-8dd5-4825-8d89-0523dbc3013e"),
                            Title = "health care"
                        },
                        new
                        {
                            Id = new Guid("15f776d9-3625-4fd4-a099-2a5413760f84"),
                            Title = "education"
                        },
                        new
                        {
                            Id = new Guid("286f7723-33d0-496b-ab84-9da57c9a15d3"),
                            Title = "sports and physical culture"
                        },
                        new
                        {
                            Id = new Guid("699e1ad4-1b56-4bb3-bc17-e78fff5008e4"),
                            Title = "culture and art"
                        },
                        new
                        {
                            Id = new Guid("d5147bb1-2005-47ee-8b0c-dde59e760599"),
                            Title = "social programs"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CategoryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DescriptionCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f2564b07-244f-454a-9c2a-7135f48c8794"),
                            CategoryId = new Guid("233b7db7-8dd5-4825-8d89-0523dbc3013e"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "health care"
                        },
                        new
                        {
                            Id = new Guid("8cb075d5-e250-4690-b364-e75270e3a87f"),
                            CategoryId = new Guid("233b7db7-8dd5-4825-8d89-0523dbc3013e"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "охорона здоров'я"
                        },
                        new
                        {
                            Id = new Guid("9c035f68-52f6-4ed0-9e92-bda299c969e5"),
                            CategoryId = new Guid("15f776d9-3625-4fd4-a099-2a5413760f84"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "education"
                        },
                        new
                        {
                            Id = new Guid("7989d8bf-23f5-4e2b-a5d9-a3169ddd1018"),
                            CategoryId = new Guid("15f776d9-3625-4fd4-a099-2a5413760f84"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "освіта"
                        },
                        new
                        {
                            Id = new Guid("fa80b307-c5f1-4a8e-a20a-b5753356cc77"),
                            CategoryId = new Guid("286f7723-33d0-496b-ab84-9da57c9a15d3"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "sport and physical culture"
                        },
                        new
                        {
                            Id = new Guid("68407dd2-1cfa-43d1-9704-bea51c2cb7dd"),
                            CategoryId = new Guid("286f7723-33d0-496b-ab84-9da57c9a15d3"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "спорт та фізична культура"
                        },
                        new
                        {
                            Id = new Guid("d59832aa-837f-41bf-a50f-d0bbdb2a6afc"),
                            CategoryId = new Guid("699e1ad4-1b56-4bb3-bc17-e78fff5008e4"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "culture and art"
                        },
                        new
                        {
                            Id = new Guid("65c67353-5364-4fbc-88e5-d199588f49b4"),
                            CategoryId = new Guid("699e1ad4-1b56-4bb3-bc17-e78fff5008e4"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "культура та мистецтво"
                        },
                        new
                        {
                            Id = new Guid("25904a1a-1509-48ee-8573-3499de0789b2"),
                            CategoryId = new Guid("d5147bb1-2005-47ee-8b0c-dde59e760599"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "social programs"
                        },
                        new
                        {
                            Id = new Guid("7c82f480-60c2-4e89-adea-21b257d3c894"),
                            CategoryId = new Guid("d5147bb1-2005-47ee-8b0c-dde59e760599"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "соціальні програми"
                        });
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("10f0ba36-fcea-4359-b49d-69900b7e3f80"),
                            CountryId = new Guid("c78c923f-a368-447d-aef5-f1197af4fb75"),
                            ISO = "vi"
                        },
                        new
                        {
                            Id = new Guid("98848d76-5a47-40c7-ab6f-c003d755b07e"),
                            CountryId = new Guid("c78c923f-a368-447d-aef5-f1197af4fb75"),
                            ISO = "dn"
                        },
                        new
                        {
                            Id = new Guid("759b33ee-eedb-456b-9b57-769ecaf89738"),
                            CountryId = new Guid("c78c923f-a368-447d-aef5-f1197af4fb75"),
                            ISO = "zhy"
                        },
                        new
                        {
                            Id = new Guid("9e180847-83e1-4a31-8c53-3f05438242d4"),
                            CountryId = new Guid("c78c923f-a368-447d-aef5-f1197af4fb75"),
                            ISO = "zp"
                        },
                        new
                        {
                            Id = new Guid("a3c09b48-58b6-450d-9458-d3d919bdd5b2"),
                            CountryId = new Guid("c78c923f-a368-447d-aef5-f1197af4fb75"),
                            ISO = "if"
                        },
                        new
                        {
                            Id = new Guid("961dc045-b91a-4c6f-8485-0da83bd7b342"),
                            CountryId = new Guid("c78c923f-a368-447d-aef5-f1197af4fb75"),
                            ISO = "ky"
                        },
                        new
                        {
                            Id = new Guid("f1690b4c-fe5e-4b50-9685-29773a9a2bf4"),
                            CountryId = new Guid("c78c923f-a368-447d-aef5-f1197af4fb75"),
                            ISO = "kr"
                        },
                        new
                        {
                            Id = new Guid("119060c5-1c09-4f9a-931d-cc25c2f4769a"),
                            CountryId = new Guid("c78c923f-a368-447d-aef5-f1197af4fb75"),
                            ISO = "lut"
                        },
                        new
                        {
                            Id = new Guid("ba4f22d6-874c-4ee8-ae1c-6bd3905549a0"),
                            CountryId = new Guid("c78c923f-a368-447d-aef5-f1197af4fb75"),
                            ISO = "lv"
                        },
                        new
                        {
                            Id = new Guid("c9318328-bd93-4a0c-a28e-80b00a34b274"),
                            CountryId = new Guid("c78c923f-a368-447d-aef5-f1197af4fb75"),
                            ISO = "my"
                        },
                        new
                        {
                            Id = new Guid("b0d17220-bbb8-4ecb-a463-e6647ab0032c"),
                            CountryId = new Guid("c78c923f-a368-447d-aef5-f1197af4fb75"),
                            ISO = "od"
                        },
                        new
                        {
                            Id = new Guid("ba6ec775-4016-4ffb-bc3a-1560b981ceb1"),
                            CountryId = new Guid("c78c923f-a368-447d-aef5-f1197af4fb75"),
                            ISO = "pol"
                        },
                        new
                        {
                            Id = new Guid("e1b12f74-f0d2-4291-8114-8b8f2aa90b3d"),
                            CountryId = new Guid("c78c923f-a368-447d-aef5-f1197af4fb75"),
                            ISO = "ri"
                        },
                        new
                        {
                            Id = new Guid("b8fe6200-527e-4535-b230-df50aca56bcf"),
                            CountryId = new Guid("c78c923f-a368-447d-aef5-f1197af4fb75"),
                            ISO = "su"
                        },
                        new
                        {
                            Id = new Guid("d4170404-8600-40b7-9951-464d6f1fffa3"),
                            CountryId = new Guid("c78c923f-a368-447d-aef5-f1197af4fb75"),
                            ISO = "ter"
                        },
                        new
                        {
                            Id = new Guid("33601ed1-545b-41e0-b4ab-51290df06eb8"),
                            CountryId = new Guid("c78c923f-a368-447d-aef5-f1197af4fb75"),
                            ISO = "uzh"
                        },
                        new
                        {
                            Id = new Guid("9365875b-ecda-446e-82c9-4988acf8c701"),
                            CountryId = new Guid("c78c923f-a368-447d-aef5-f1197af4fb75"),
                            ISO = "khar"
                        },
                        new
                        {
                            Id = new Guid("f7c8c60b-7c48-4974-988c-cc0909ac6cd7"),
                            CountryId = new Guid("c78c923f-a368-447d-aef5-f1197af4fb75"),
                            ISO = "kher"
                        },
                        new
                        {
                            Id = new Guid("35883013-1917-41d0-bd4c-a66ad0733321"),
                            CountryId = new Guid("c78c923f-a368-447d-aef5-f1197af4fb75"),
                            ISO = "khm"
                        },
                        new
                        {
                            Id = new Guid("bcf8adbf-b51a-494b-9d42-997ab995c84d"),
                            CountryId = new Guid("c78c923f-a368-447d-aef5-f1197af4fb75"),
                            ISO = "chk"
                        },
                        new
                        {
                            Id = new Guid("0d52707c-eaf6-4258-8bc9-b830c47b5c1b"),
                            CountryId = new Guid("c78c923f-a368-447d-aef5-f1197af4fb75"),
                            ISO = "chv"
                        },
                        new
                        {
                            Id = new Guid("e84479d8-19eb-4e3b-aaba-6706cc3de9df"),
                            CountryId = new Guid("c78c923f-a368-447d-aef5-f1197af4fb75"),
                            ISO = "chh"
                        },
                        new
                        {
                            Id = new Guid("01a1f223-a664-4bb9-a26a-18ae673f85c2"),
                            CountryId = new Guid("c42c8a55-ff9e-4d3e-9c36-b196815fb2c4"),
                            ISO = "var"
                        },
                        new
                        {
                            Id = new Guid("d8695f52-4487-4b95-8155-67e096f36909"),
                            CountryId = new Guid("c42c8a55-ff9e-4d3e-9c36-b196815fb2c4"),
                            ISO = "lub"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("CityTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("be5ef1c5-59e8-45e8-98c3-940cf120e2bd"),
                            CityId = new Guid("10f0ba36-fcea-4359-b49d-69900b7e3f80"),
                            Language = "uk",
                            Name = "Вінниця"
                        },
                        new
                        {
                            Id = new Guid("e0b621a1-4c77-4ba0-9cb5-5e0281446b21"),
                            CityId = new Guid("98848d76-5a47-40c7-ab6f-c003d755b07e"),
                            Language = "uk",
                            Name = "Дніпро"
                        },
                        new
                        {
                            Id = new Guid("d4df5429-170e-4fcb-bfae-3521caf44181"),
                            CityId = new Guid("759b33ee-eedb-456b-9b57-769ecaf89738"),
                            Language = "uk",
                            Name = "Житомир"
                        },
                        new
                        {
                            Id = new Guid("bf37781d-7326-4779-8dfa-575da8f6d94a"),
                            CityId = new Guid("9e180847-83e1-4a31-8c53-3f05438242d4"),
                            Language = "uk",
                            Name = "Запоріжжя"
                        },
                        new
                        {
                            Id = new Guid("fa51d9d9-812c-4906-9e5a-02ef2052385c"),
                            CityId = new Guid("a3c09b48-58b6-450d-9458-d3d919bdd5b2"),
                            Language = "uk",
                            Name = "Івано-Франківськ"
                        },
                        new
                        {
                            Id = new Guid("b5d1ac3f-c75e-4914-8a45-7c26be676d2f"),
                            CityId = new Guid("961dc045-b91a-4c6f-8485-0da83bd7b342"),
                            Language = "uk",
                            Name = "Київ"
                        },
                        new
                        {
                            Id = new Guid("6fbacf13-50bf-4276-ab0a-9dab20dd2193"),
                            CityId = new Guid("f1690b4c-fe5e-4b50-9685-29773a9a2bf4"),
                            Language = "uk",
                            Name = "Кропивницький"
                        },
                        new
                        {
                            Id = new Guid("c9d77c70-ea0b-4bc8-a3c5-75afd364e14d"),
                            CityId = new Guid("119060c5-1c09-4f9a-931d-cc25c2f4769a"),
                            Language = "uk",
                            Name = "Луцьк"
                        },
                        new
                        {
                            Id = new Guid("c13363a4-8b23-4ed9-996b-696b5e15adc9"),
                            CityId = new Guid("ba4f22d6-874c-4ee8-ae1c-6bd3905549a0"),
                            Language = "uk",
                            Name = "Львів"
                        },
                        new
                        {
                            Id = new Guid("ee73a1ff-759e-4e36-b213-2fee7f8ba9be"),
                            CityId = new Guid("c9318328-bd93-4a0c-a28e-80b00a34b274"),
                            Language = "uk",
                            Name = "Миколаїв"
                        },
                        new
                        {
                            Id = new Guid("d53c73e0-4755-4fac-b9ff-27a41a0c411c"),
                            CityId = new Guid("b0d17220-bbb8-4ecb-a463-e6647ab0032c"),
                            Language = "uk",
                            Name = "Одеса"
                        },
                        new
                        {
                            Id = new Guid("f6eb30a1-5488-4dd0-b1a1-e264df681937"),
                            CityId = new Guid("ba6ec775-4016-4ffb-bc3a-1560b981ceb1"),
                            Language = "uk",
                            Name = "Полтава"
                        },
                        new
                        {
                            Id = new Guid("bb96d0c9-5eff-43eb-9e6d-14dbc4538f65"),
                            CityId = new Guid("e1b12f74-f0d2-4291-8114-8b8f2aa90b3d"),
                            Language = "uk",
                            Name = "Рівне"
                        },
                        new
                        {
                            Id = new Guid("d1458bcd-3be8-4931-bf7c-b3e620f0b83b"),
                            CityId = new Guid("b8fe6200-527e-4535-b230-df50aca56bcf"),
                            Language = "uk",
                            Name = "Суми"
                        },
                        new
                        {
                            Id = new Guid("829ba875-0591-471b-944c-87d05d515300"),
                            CityId = new Guid("d4170404-8600-40b7-9951-464d6f1fffa3"),
                            Language = "uk",
                            Name = "Тернопіль"
                        },
                        new
                        {
                            Id = new Guid("693871d9-c8a0-4823-9e2a-2faabcd7c1fa"),
                            CityId = new Guid("33601ed1-545b-41e0-b4ab-51290df06eb8"),
                            Language = "uk",
                            Name = "Ужгород"
                        },
                        new
                        {
                            Id = new Guid("a9707f75-e022-4d46-b751-4784088aa5ff"),
                            CityId = new Guid("9365875b-ecda-446e-82c9-4988acf8c701"),
                            Language = "uk",
                            Name = "Харків"
                        },
                        new
                        {
                            Id = new Guid("163d84e4-285a-43cf-b915-0708b74ab129"),
                            CityId = new Guid("f7c8c60b-7c48-4974-988c-cc0909ac6cd7"),
                            Language = "uk",
                            Name = "Херсон"
                        },
                        new
                        {
                            Id = new Guid("5ebd4ba9-e079-40e1-b210-61b600180d62"),
                            CityId = new Guid("35883013-1917-41d0-bd4c-a66ad0733321"),
                            Language = "uk",
                            Name = "Хмельницький"
                        },
                        new
                        {
                            Id = new Guid("1cf387f4-88a3-44ff-bff1-9584d06b36e2"),
                            CityId = new Guid("bcf8adbf-b51a-494b-9d42-997ab995c84d"),
                            Language = "uk",
                            Name = "Черкаси"
                        },
                        new
                        {
                            Id = new Guid("c5867add-65d2-4347-8155-5c3020dffc16"),
                            CityId = new Guid("0d52707c-eaf6-4258-8bc9-b830c47b5c1b"),
                            Language = "uk",
                            Name = "Чернівці"
                        },
                        new
                        {
                            Id = new Guid("628436de-2db9-4e18-8287-13255484939f"),
                            CityId = new Guid("e84479d8-19eb-4e3b-aaba-6706cc3de9df"),
                            Language = "uk",
                            Name = "Чернігів"
                        },
                        new
                        {
                            Id = new Guid("4f9f22f1-c105-41a3-a67e-d0f047f5b00e"),
                            CityId = new Guid("10f0ba36-fcea-4359-b49d-69900b7e3f80"),
                            Language = "en",
                            Name = "Vinnytsia"
                        },
                        new
                        {
                            Id = new Guid("9a0e966e-4ee8-4327-859a-0bf9e5295fea"),
                            CityId = new Guid("98848d76-5a47-40c7-ab6f-c003d755b07e"),
                            Language = "en",
                            Name = "Dnipro"
                        },
                        new
                        {
                            Id = new Guid("02e42b4e-5291-4a8f-ba53-229b4d5748d8"),
                            CityId = new Guid("759b33ee-eedb-456b-9b57-769ecaf89738"),
                            Language = "en",
                            Name = "Zhytomyr"
                        },
                        new
                        {
                            Id = new Guid("f576ae7c-f1e8-4f08-bb7e-51ce82da3813"),
                            CityId = new Guid("9e180847-83e1-4a31-8c53-3f05438242d4"),
                            Language = "en",
                            Name = "Zaporizhzhia"
                        },
                        new
                        {
                            Id = new Guid("f0bd1ea3-4c05-4e79-b3a9-e96404ebca33"),
                            CityId = new Guid("a3c09b48-58b6-450d-9458-d3d919bdd5b2"),
                            Language = "en",
                            Name = "Ivano-Frankivsk"
                        },
                        new
                        {
                            Id = new Guid("bf04cd18-bddd-460d-950b-f5006543bad5"),
                            CityId = new Guid("961dc045-b91a-4c6f-8485-0da83bd7b342"),
                            Language = "en",
                            Name = "Kyiv"
                        },
                        new
                        {
                            Id = new Guid("7795bcdf-606f-4f47-b01c-93b810d807ac"),
                            CityId = new Guid("f1690b4c-fe5e-4b50-9685-29773a9a2bf4"),
                            Language = "en",
                            Name = "Kropyvnytskyi"
                        },
                        new
                        {
                            Id = new Guid("699a7792-4bcf-4edb-8c2c-7da08d8f28f1"),
                            CityId = new Guid("119060c5-1c09-4f9a-931d-cc25c2f4769a"),
                            Language = "en",
                            Name = "Lutsk"
                        },
                        new
                        {
                            Id = new Guid("b9a8c03b-229f-4c5d-8f02-2a357c03d7b1"),
                            CityId = new Guid("ba4f22d6-874c-4ee8-ae1c-6bd3905549a0"),
                            Language = "en",
                            Name = "Lviv"
                        },
                        new
                        {
                            Id = new Guid("1f9bdcd9-963f-41a6-a449-3f86c4b7ad55"),
                            CityId = new Guid("c9318328-bd93-4a0c-a28e-80b00a34b274"),
                            Language = "en",
                            Name = "Mykolaiv"
                        },
                        new
                        {
                            Id = new Guid("da38b711-7cbb-40a4-9453-929a415b5ce5"),
                            CityId = new Guid("b0d17220-bbb8-4ecb-a463-e6647ab0032c"),
                            Language = "en",
                            Name = "Odesa"
                        },
                        new
                        {
                            Id = new Guid("4b25b1d7-be03-4ae9-a492-b80914267f51"),
                            CityId = new Guid("ba6ec775-4016-4ffb-bc3a-1560b981ceb1"),
                            Language = "en",
                            Name = "Poltava"
                        },
                        new
                        {
                            Id = new Guid("77268d08-ea43-43ce-9c77-fe5ac01c6a19"),
                            CityId = new Guid("e1b12f74-f0d2-4291-8114-8b8f2aa90b3d"),
                            Language = "en",
                            Name = "Rivne"
                        },
                        new
                        {
                            Id = new Guid("4cc5d8af-4ccc-4e46-aa13-87c49e288ba3"),
                            CityId = new Guid("b8fe6200-527e-4535-b230-df50aca56bcf"),
                            Language = "en",
                            Name = "Sumy"
                        },
                        new
                        {
                            Id = new Guid("329834bb-526c-411e-81ee-c65babeb3f30"),
                            CityId = new Guid("d4170404-8600-40b7-9951-464d6f1fffa3"),
                            Language = "en",
                            Name = "Ternopil"
                        },
                        new
                        {
                            Id = new Guid("b6236d2d-cfd6-4837-903f-ca21cc34441d"),
                            CityId = new Guid("33601ed1-545b-41e0-b4ab-51290df06eb8"),
                            Language = "en",
                            Name = "Uzhhorod"
                        },
                        new
                        {
                            Id = new Guid("b5ddb7b9-339a-4d4e-bb76-679fb56730df"),
                            CityId = new Guid("9365875b-ecda-446e-82c9-4988acf8c701"),
                            Language = "en",
                            Name = "Kharkiv"
                        },
                        new
                        {
                            Id = new Guid("03f18caa-de7d-48b1-83ec-48563c56e4fc"),
                            CityId = new Guid("f7c8c60b-7c48-4974-988c-cc0909ac6cd7"),
                            Language = "en",
                            Name = "Kherson"
                        },
                        new
                        {
                            Id = new Guid("b0eac5cf-ff37-4d73-acf8-d11bea13ab9d"),
                            CityId = new Guid("35883013-1917-41d0-bd4c-a66ad0733321"),
                            Language = "en",
                            Name = "Khmelnytskyi"
                        },
                        new
                        {
                            Id = new Guid("efda4e0b-9a1f-476c-9652-5cbdc54dca04"),
                            CityId = new Guid("bcf8adbf-b51a-494b-9d42-997ab995c84d"),
                            Language = "en",
                            Name = "Cherkasy"
                        },
                        new
                        {
                            Id = new Guid("54e2958a-39fe-4e88-8332-a2e40376ad4a"),
                            CityId = new Guid("0d52707c-eaf6-4258-8bc9-b830c47b5c1b"),
                            Language = "en",
                            Name = "Chernivtsi"
                        },
                        new
                        {
                            Id = new Guid("4d43dc6b-72d4-4e71-acfd-74db9d1484ec"),
                            CityId = new Guid("e84479d8-19eb-4e3b-aaba-6706cc3de9df"),
                            Language = "en",
                            Name = "Chernihiv"
                        },
                        new
                        {
                            Id = new Guid("28220bd4-4e0e-4fbf-b995-836d959480c2"),
                            CityId = new Guid("01a1f223-a664-4bb9-a26a-18ae673f85c2"),
                            Language = "uk",
                            Name = "Варшава"
                        },
                        new
                        {
                            Id = new Guid("acd46eb8-97dd-4b90-9e83-698995638c8f"),
                            CityId = new Guid("d8695f52-4487-4b95-8155-67e096f36909"),
                            Language = "uk",
                            Name = "Люблін"
                        },
                        new
                        {
                            Id = new Guid("247f2f5f-6999-4901-83ff-eb2afa63e423"),
                            CityId = new Guid("01a1f223-a664-4bb9-a26a-18ae673f85c2"),
                            Language = "en",
                            Name = "Varshava"
                        },
                        new
                        {
                            Id = new Guid("4a857f6e-47be-4253-8d0c-cd04aaf8d7c8"),
                            CityId = new Guid("d8695f52-4487-4b95-8155-67e096f36909"),
                            Language = "en",
                            Name = "Lublin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c78c923f-a368-447d-aef5-f1197af4fb75"),
                            ISO = "uk"
                        },
                        new
                        {
                            Id = new Guid("c42c8a55-ff9e-4d3e-9c36-b196815fb2c4"),
                            ISO = "pl"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CountryTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3e74304f-0e4a-41c3-b8e8-99aedc967105"),
                            CountryId = new Guid("c78c923f-a368-447d-aef5-f1197af4fb75"),
                            Language = "en",
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("d0e45284-5b3c-4e2a-9c59-5ef3ab1ed4fd"),
                            CountryId = new Guid("c78c923f-a368-447d-aef5-f1197af4fb75"),
                            Language = "uk",
                            Name = "Україна"
                        },
                        new
                        {
                            Id = new Guid("0b060de9-c5b2-4bd2-adeb-71c121f10b50"),
                            CountryId = new Guid("c42c8a55-ff9e-4d3e-9c36-b196815fb2c4"),
                            Language = "en",
                            Name = "Poland"
                        },
                        new
                        {
                            Id = new Guid("93dcc859-2211-4948-9ca7-bcac8034880c"),
                            CountryId = new Guid("c42c8a55-ff9e-4d3e-9c36-b196815fb2c4"),
                            Language = "uk",
                            Name = "Польша"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VolunteerApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VolunteerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VolunteerUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VolunteerUserId", "VolunteerApplicationId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DAL.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplictionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserRecipientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserSenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplictionId");

                    b.HasIndex("UserRecipientId");

                    b.HasIndex("UserSenderId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ProfilePictures");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("733b7b4a-6de9-4c4c-8016-ecb7b9223c2a"),
                            Title = "medicine"
                        },
                        new
                        {
                            Id = new Guid("d7459dde-1085-4a4e-8b3f-111a47cf8d55"),
                            Title = "cooking"
                        },
                        new
                        {
                            Id = new Guid("294d48f6-0b66-4aa0-9e38-d20e8234dabd"),
                            Title = "building"
                        },
                        new
                        {
                            Id = new Guid("5e19fbe2-b4a8-4185-a2b4-1fc8b2c14c26"),
                            Title = "psychology"
                        });
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("59a87a29-adf0-433a-bcf3-dc9f5c92af67"),
                            Language = "en",
                            Name = "medicine",
                            SkillId = new Guid("733b7b4a-6de9-4c4c-8016-ecb7b9223c2a")
                        },
                        new
                        {
                            Id = new Guid("a9454662-830b-4f03-8e98-87d48b6feeee"),
                            Language = "uk",
                            Name = "медицина",
                            SkillId = new Guid("733b7b4a-6de9-4c4c-8016-ecb7b9223c2a")
                        },
                        new
                        {
                            Id = new Guid("7fa85400-1dc9-4779-bb37-2091afaf32f7"),
                            Language = "en",
                            Name = "cooking",
                            SkillId = new Guid("d7459dde-1085-4a4e-8b3f-111a47cf8d55")
                        },
                        new
                        {
                            Id = new Guid("c9509c30-f985-4dd0-a94f-c027907a69fe"),
                            Language = "uk",
                            Name = "кулінарія",
                            SkillId = new Guid("d7459dde-1085-4a4e-8b3f-111a47cf8d55")
                        },
                        new
                        {
                            Id = new Guid("ade42fd5-0cd4-4714-8775-532bbb0b4a0d"),
                            Language = "en",
                            Name = "building",
                            SkillId = new Guid("294d48f6-0b66-4aa0-9e38-d20e8234dabd")
                        },
                        new
                        {
                            Id = new Guid("8a28d5f6-6840-435d-a73e-40fc61be93e0"),
                            Language = "uk",
                            Name = "будівництво",
                            SkillId = new Guid("294d48f6-0b66-4aa0-9e38-d20e8234dabd")
                        },
                        new
                        {
                            Id = new Guid("4154db2e-a5a2-455b-99d8-ff631cca574d"),
                            Language = "en",
                            Name = "psychology",
                            SkillId = new Guid("5e19fbe2-b4a8-4185-a2b4-1fc8b2c14c26")
                        },
                        new
                        {
                            Id = new Guid("b49b09d0-cdbb-494f-8720-304954ffb623"),
                            Language = "uk",
                            Name = "психологія",
                            SkillId = new Guid("5e19fbe2-b4a8-4185-a2b4-1fc8b2c14c26")
                        });
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("07dada1b-d7b9-44b0-9030-900dc391bab3"),
                            CityId = new Guid("10f0ba36-fcea-4359-b49d-69900b7e3f80"),
                            DateOfBirth = new DateTime(2023, 5, 23, 18, 35, 29, 506, DateTimeKind.Local).AddTicks(2541),
                            FirstName = "the first",
                            LastName = "admin",
                            Login = "ourfirstadmin",
                            Password = "Rk/ryiBNbnHx+s9i1IveCNNw4axYPQHm4T1eratfQlg=",
                            Phone = "+11111111111",
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Document")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DocumentFormat")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("NULL");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ApplicationId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.HasOne("DAL.Entities.Category", "Category")
                        .WithMany("Applications")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("Applications")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationSkill", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("ApplicationSkills")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("ApplicationSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DAL.Entities.CategoryTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Category", "Category")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("CityTranslations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("CountryTranslations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.HasOne("DAL.Entities.Volunteer", "Volunteer")
                        .WithMany("Messages")
                        .HasForeignKey("VolunteerUserId", "VolunteerApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("DAL.Entities.Notification", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Notifications")
                        .HasForeignKey("ApplictionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "UserRecipient")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("UserRecipientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "UserSender")
                        .WithMany("SentNotifications")
                        .HasForeignKey("UserSenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("UserRecipient");

                    b.Navigation("UserSender");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithOne("ProfilePicture")
                        .HasForeignKey("DAL.Entities.ProfilePicture", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("SkillTranslations")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Volunteers")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Volunteers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Navigation("ApplicationSkills");

                    b.Navigation("Notifications");

                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("CategoryTranslations");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("CityTranslations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("CountryTranslations");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Navigation("ApplicationSkills");

                    b.Navigation("SkillTranslations");

                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ProfilePicture");

                    b.Navigation("ReceivedNotifications");

                    b.Navigation("SentNotifications");

                    b.Navigation("UserSkills");

                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
