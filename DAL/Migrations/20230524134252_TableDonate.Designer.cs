// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(VolunteerNetServerDBContext))]
    [Migration("20230524134252_TableDonate")]
    partial class TableDonate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("CurrentSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<string>("OwnerCardName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequiredNumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<decimal?>("RequiredSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationSkill", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("ApplicationSkills");
                });

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("44497eb3-a86c-4087-a28d-a589091aea16"),
                            Title = "health care"
                        },
                        new
                        {
                            Id = new Guid("35fcc167-554e-49eb-bed7-da0b9f92ce55"),
                            Title = "education"
                        },
                        new
                        {
                            Id = new Guid("62af952b-dab7-48d4-a46f-c62b11eeb652"),
                            Title = "sports and physical culture"
                        },
                        new
                        {
                            Id = new Guid("a33365f7-2786-4331-9ac1-6df3ee4a755f"),
                            Title = "culture and art"
                        },
                        new
                        {
                            Id = new Guid("5adc34a0-1cbc-4756-a985-accd44b6df2d"),
                            Title = "social programs"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CategoryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DescriptionCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dc8e767e-9520-4b94-a53d-c2d5097b6004"),
                            CategoryId = new Guid("44497eb3-a86c-4087-a28d-a589091aea16"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "health care"
                        },
                        new
                        {
                            Id = new Guid("21a2af11-5760-4048-ab8d-0930c925fd29"),
                            CategoryId = new Guid("44497eb3-a86c-4087-a28d-a589091aea16"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "охорона здоров'я"
                        },
                        new
                        {
                            Id = new Guid("ef34972f-bea5-4230-bc40-2852cd087f32"),
                            CategoryId = new Guid("35fcc167-554e-49eb-bed7-da0b9f92ce55"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "education"
                        },
                        new
                        {
                            Id = new Guid("6b65b699-3881-4b76-954a-2ef77eb36737"),
                            CategoryId = new Guid("35fcc167-554e-49eb-bed7-da0b9f92ce55"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "освіта"
                        },
                        new
                        {
                            Id = new Guid("c6af5f73-e187-42a2-ad77-51eb9fdf9022"),
                            CategoryId = new Guid("62af952b-dab7-48d4-a46f-c62b11eeb652"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "sport and physical culture"
                        },
                        new
                        {
                            Id = new Guid("dd9882fb-4231-4306-bdef-cd3ae5edc79e"),
                            CategoryId = new Guid("62af952b-dab7-48d4-a46f-c62b11eeb652"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "спорт та фізична культура"
                        },
                        new
                        {
                            Id = new Guid("0d6836c5-b3df-4cb9-946b-355866488ca2"),
                            CategoryId = new Guid("a33365f7-2786-4331-9ac1-6df3ee4a755f"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "culture and art"
                        },
                        new
                        {
                            Id = new Guid("6faca7dd-4192-4443-937b-ba80e04f300a"),
                            CategoryId = new Guid("a33365f7-2786-4331-9ac1-6df3ee4a755f"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "культура та мистецтво"
                        },
                        new
                        {
                            Id = new Guid("fd3eb2d2-11f2-4b04-bab0-4c560d58d830"),
                            CategoryId = new Guid("5adc34a0-1cbc-4756-a985-accd44b6df2d"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "social programs"
                        },
                        new
                        {
                            Id = new Guid("3422d980-e8b4-4eb6-8ae6-41111a640303"),
                            CategoryId = new Guid("5adc34a0-1cbc-4756-a985-accd44b6df2d"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "соціальні програми"
                        });
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("70e9028a-8129-45b3-bc65-a4bedc80b1a7"),
                            CountryId = new Guid("7d5924f4-1456-423b-af43-5bb4ffb19d28"),
                            ISO = "vi"
                        },
                        new
                        {
                            Id = new Guid("fcf1b43b-55f8-4e31-b297-424200746601"),
                            CountryId = new Guid("7d5924f4-1456-423b-af43-5bb4ffb19d28"),
                            ISO = "dn"
                        },
                        new
                        {
                            Id = new Guid("23c5e5f2-f5a5-4246-a49d-9424629419f1"),
                            CountryId = new Guid("7d5924f4-1456-423b-af43-5bb4ffb19d28"),
                            ISO = "zhy"
                        },
                        new
                        {
                            Id = new Guid("67e7c530-514a-40e2-bdfe-889559d56ecf"),
                            CountryId = new Guid("7d5924f4-1456-423b-af43-5bb4ffb19d28"),
                            ISO = "zp"
                        },
                        new
                        {
                            Id = new Guid("9ccccc34-9577-4571-884a-78d17e684e65"),
                            CountryId = new Guid("7d5924f4-1456-423b-af43-5bb4ffb19d28"),
                            ISO = "if"
                        },
                        new
                        {
                            Id = new Guid("d7d2111b-b9ac-49a1-8764-64a463009de5"),
                            CountryId = new Guid("7d5924f4-1456-423b-af43-5bb4ffb19d28"),
                            ISO = "ky"
                        },
                        new
                        {
                            Id = new Guid("5a72e5a0-39d9-42aa-a817-a87538e32116"),
                            CountryId = new Guid("7d5924f4-1456-423b-af43-5bb4ffb19d28"),
                            ISO = "kr"
                        },
                        new
                        {
                            Id = new Guid("cd97080d-bf86-4f34-9e39-383b6f11fdbc"),
                            CountryId = new Guid("7d5924f4-1456-423b-af43-5bb4ffb19d28"),
                            ISO = "lut"
                        },
                        new
                        {
                            Id = new Guid("3349875a-b045-46d2-8141-d33752f913b7"),
                            CountryId = new Guid("7d5924f4-1456-423b-af43-5bb4ffb19d28"),
                            ISO = "lv"
                        },
                        new
                        {
                            Id = new Guid("f35efed0-a0ad-478d-8fc5-525311f136d2"),
                            CountryId = new Guid("7d5924f4-1456-423b-af43-5bb4ffb19d28"),
                            ISO = "my"
                        },
                        new
                        {
                            Id = new Guid("7b47eef9-87f5-48b2-9118-624bd6a541e3"),
                            CountryId = new Guid("7d5924f4-1456-423b-af43-5bb4ffb19d28"),
                            ISO = "od"
                        },
                        new
                        {
                            Id = new Guid("a17d0f75-dddb-4135-86d1-557951cd5c1a"),
                            CountryId = new Guid("7d5924f4-1456-423b-af43-5bb4ffb19d28"),
                            ISO = "pol"
                        },
                        new
                        {
                            Id = new Guid("6114bafa-48d9-48a8-8ea9-20a877e84dc4"),
                            CountryId = new Guid("7d5924f4-1456-423b-af43-5bb4ffb19d28"),
                            ISO = "ri"
                        },
                        new
                        {
                            Id = new Guid("d12940d0-8042-410f-be5f-fc97cad808dc"),
                            CountryId = new Guid("7d5924f4-1456-423b-af43-5bb4ffb19d28"),
                            ISO = "su"
                        },
                        new
                        {
                            Id = new Guid("944632ce-f9e1-4c4b-baf8-163b5ec20e70"),
                            CountryId = new Guid("7d5924f4-1456-423b-af43-5bb4ffb19d28"),
                            ISO = "ter"
                        },
                        new
                        {
                            Id = new Guid("48056f9f-b4a6-42d3-90c9-a222c66bb3e6"),
                            CountryId = new Guid("7d5924f4-1456-423b-af43-5bb4ffb19d28"),
                            ISO = "uzh"
                        },
                        new
                        {
                            Id = new Guid("5c493a19-2c1f-4542-9c42-9e8810f49775"),
                            CountryId = new Guid("7d5924f4-1456-423b-af43-5bb4ffb19d28"),
                            ISO = "khar"
                        },
                        new
                        {
                            Id = new Guid("893e1740-89dd-4d85-88e2-1ee73444f8ac"),
                            CountryId = new Guid("7d5924f4-1456-423b-af43-5bb4ffb19d28"),
                            ISO = "kher"
                        },
                        new
                        {
                            Id = new Guid("048986c8-4a23-4eda-b094-2fb6f939594d"),
                            CountryId = new Guid("7d5924f4-1456-423b-af43-5bb4ffb19d28"),
                            ISO = "khm"
                        },
                        new
                        {
                            Id = new Guid("0cf2549e-8d9f-4ac1-ad86-daf7abc9b13e"),
                            CountryId = new Guid("7d5924f4-1456-423b-af43-5bb4ffb19d28"),
                            ISO = "chk"
                        },
                        new
                        {
                            Id = new Guid("3498adc5-9f01-4356-b25a-2d0b97731fd9"),
                            CountryId = new Guid("7d5924f4-1456-423b-af43-5bb4ffb19d28"),
                            ISO = "chv"
                        },
                        new
                        {
                            Id = new Guid("80646289-d329-4ee5-b403-e0c1a62c462b"),
                            CountryId = new Guid("7d5924f4-1456-423b-af43-5bb4ffb19d28"),
                            ISO = "chh"
                        },
                        new
                        {
                            Id = new Guid("e7df1b97-f632-42d1-abdc-08a17fcfa894"),
                            CountryId = new Guid("415faf4f-21d8-4200-9e7e-641d1e02ea00"),
                            ISO = "var"
                        },
                        new
                        {
                            Id = new Guid("285b7e6d-56c7-4555-97f2-b233e670e8d6"),
                            CountryId = new Guid("415faf4f-21d8-4200-9e7e-641d1e02ea00"),
                            ISO = "lub"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("CityTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("08190a0e-e2a6-47be-85a0-2bad064109a4"),
                            CityId = new Guid("70e9028a-8129-45b3-bc65-a4bedc80b1a7"),
                            Language = "uk",
                            Name = "Вінниця"
                        },
                        new
                        {
                            Id = new Guid("f93963de-998d-4fe6-9bb9-d3c60af4548b"),
                            CityId = new Guid("fcf1b43b-55f8-4e31-b297-424200746601"),
                            Language = "uk",
                            Name = "Дніпро"
                        },
                        new
                        {
                            Id = new Guid("958590b4-51d5-40bd-8464-4fd91738f40b"),
                            CityId = new Guid("23c5e5f2-f5a5-4246-a49d-9424629419f1"),
                            Language = "uk",
                            Name = "Житомир"
                        },
                        new
                        {
                            Id = new Guid("5068676a-9fe8-4f61-934d-7c3174f93969"),
                            CityId = new Guid("67e7c530-514a-40e2-bdfe-889559d56ecf"),
                            Language = "uk",
                            Name = "Запоріжжя"
                        },
                        new
                        {
                            Id = new Guid("163a5058-3145-442b-996a-c31ea6501168"),
                            CityId = new Guid("9ccccc34-9577-4571-884a-78d17e684e65"),
                            Language = "uk",
                            Name = "Івано-Франківськ"
                        },
                        new
                        {
                            Id = new Guid("7fe0f8f1-38b8-4673-94e5-2984016d1035"),
                            CityId = new Guid("d7d2111b-b9ac-49a1-8764-64a463009de5"),
                            Language = "uk",
                            Name = "Київ"
                        },
                        new
                        {
                            Id = new Guid("1e5c431e-387c-4334-a5fc-3f4e9ec86062"),
                            CityId = new Guid("5a72e5a0-39d9-42aa-a817-a87538e32116"),
                            Language = "uk",
                            Name = "Кропивницький"
                        },
                        new
                        {
                            Id = new Guid("7abcd1e3-f79c-4ebe-848b-af0cf29f3d08"),
                            CityId = new Guid("cd97080d-bf86-4f34-9e39-383b6f11fdbc"),
                            Language = "uk",
                            Name = "Луцьк"
                        },
                        new
                        {
                            Id = new Guid("a33750e8-56a8-4add-b673-2dd6db1e0ec9"),
                            CityId = new Guid("3349875a-b045-46d2-8141-d33752f913b7"),
                            Language = "uk",
                            Name = "Львів"
                        },
                        new
                        {
                            Id = new Guid("1192ce30-a061-4101-ae4b-ac25a488f200"),
                            CityId = new Guid("f35efed0-a0ad-478d-8fc5-525311f136d2"),
                            Language = "uk",
                            Name = "Миколаїв"
                        },
                        new
                        {
                            Id = new Guid("85e4cbb7-06b8-4e85-ac67-bd2743531bec"),
                            CityId = new Guid("7b47eef9-87f5-48b2-9118-624bd6a541e3"),
                            Language = "uk",
                            Name = "Одеса"
                        },
                        new
                        {
                            Id = new Guid("bad80982-8e6f-48ef-81c8-f03146aebe13"),
                            CityId = new Guid("a17d0f75-dddb-4135-86d1-557951cd5c1a"),
                            Language = "uk",
                            Name = "Полтава"
                        },
                        new
                        {
                            Id = new Guid("d796a379-77b5-43d6-a9d7-4ae3252a720c"),
                            CityId = new Guid("6114bafa-48d9-48a8-8ea9-20a877e84dc4"),
                            Language = "uk",
                            Name = "Рівне"
                        },
                        new
                        {
                            Id = new Guid("0274782a-1cf9-47cd-af6f-9ae9aa8aacf4"),
                            CityId = new Guid("d12940d0-8042-410f-be5f-fc97cad808dc"),
                            Language = "uk",
                            Name = "Суми"
                        },
                        new
                        {
                            Id = new Guid("f41bb4da-e471-44d1-9277-4d13c3692f4e"),
                            CityId = new Guid("944632ce-f9e1-4c4b-baf8-163b5ec20e70"),
                            Language = "uk",
                            Name = "Тернопіль"
                        },
                        new
                        {
                            Id = new Guid("18c7eebf-937f-4361-afad-00982afcf42f"),
                            CityId = new Guid("48056f9f-b4a6-42d3-90c9-a222c66bb3e6"),
                            Language = "uk",
                            Name = "Ужгород"
                        },
                        new
                        {
                            Id = new Guid("e145b52f-021d-4ccf-9ea7-c1694d8cb70d"),
                            CityId = new Guid("5c493a19-2c1f-4542-9c42-9e8810f49775"),
                            Language = "uk",
                            Name = "Харків"
                        },
                        new
                        {
                            Id = new Guid("c96c8c29-a2cd-4e98-a69f-8ce64c7537c0"),
                            CityId = new Guid("893e1740-89dd-4d85-88e2-1ee73444f8ac"),
                            Language = "uk",
                            Name = "Херсон"
                        },
                        new
                        {
                            Id = new Guid("49f8e87f-d540-4157-a67e-0785ae82eedd"),
                            CityId = new Guid("048986c8-4a23-4eda-b094-2fb6f939594d"),
                            Language = "uk",
                            Name = "Хмельницький"
                        },
                        new
                        {
                            Id = new Guid("a6116491-1917-47de-ae00-d1378e2338e6"),
                            CityId = new Guid("0cf2549e-8d9f-4ac1-ad86-daf7abc9b13e"),
                            Language = "uk",
                            Name = "Черкаси"
                        },
                        new
                        {
                            Id = new Guid("5368c908-77b2-4550-9028-246d0b34bb2b"),
                            CityId = new Guid("3498adc5-9f01-4356-b25a-2d0b97731fd9"),
                            Language = "uk",
                            Name = "Чернівці"
                        },
                        new
                        {
                            Id = new Guid("0ea61f09-93b2-484e-bca0-3bf0ed31f2d9"),
                            CityId = new Guid("80646289-d329-4ee5-b403-e0c1a62c462b"),
                            Language = "uk",
                            Name = "Чернігів"
                        },
                        new
                        {
                            Id = new Guid("6167ce1c-5642-4ba4-9c22-718e0d9ba252"),
                            CityId = new Guid("70e9028a-8129-45b3-bc65-a4bedc80b1a7"),
                            Language = "en",
                            Name = "Vinnytsia"
                        },
                        new
                        {
                            Id = new Guid("bb1eefea-09e1-4df4-9455-9236e194e9fa"),
                            CityId = new Guid("fcf1b43b-55f8-4e31-b297-424200746601"),
                            Language = "en",
                            Name = "Dnipro"
                        },
                        new
                        {
                            Id = new Guid("a964e28f-cf02-4274-b13f-b5868ab27387"),
                            CityId = new Guid("23c5e5f2-f5a5-4246-a49d-9424629419f1"),
                            Language = "en",
                            Name = "Zhytomyr"
                        },
                        new
                        {
                            Id = new Guid("8934479b-1b96-4730-b80f-df4ee1c296a5"),
                            CityId = new Guid("67e7c530-514a-40e2-bdfe-889559d56ecf"),
                            Language = "en",
                            Name = "Zaporizhzhia"
                        },
                        new
                        {
                            Id = new Guid("67a47209-82cd-4afa-97b1-a9c647265dd3"),
                            CityId = new Guid("9ccccc34-9577-4571-884a-78d17e684e65"),
                            Language = "en",
                            Name = "Ivano-Frankivsk"
                        },
                        new
                        {
                            Id = new Guid("94d54356-60af-4b06-8985-5f84ed88bd39"),
                            CityId = new Guid("d7d2111b-b9ac-49a1-8764-64a463009de5"),
                            Language = "en",
                            Name = "Kyiv"
                        },
                        new
                        {
                            Id = new Guid("b3bfcb60-0a1e-4e03-952e-b004c2c1386d"),
                            CityId = new Guid("5a72e5a0-39d9-42aa-a817-a87538e32116"),
                            Language = "en",
                            Name = "Kropyvnytskyi"
                        },
                        new
                        {
                            Id = new Guid("2f888872-30cd-4c11-883a-f48c5c27071e"),
                            CityId = new Guid("cd97080d-bf86-4f34-9e39-383b6f11fdbc"),
                            Language = "en",
                            Name = "Lutsk"
                        },
                        new
                        {
                            Id = new Guid("b635b447-eca4-4e49-b1af-fdb65e4aa18b"),
                            CityId = new Guid("3349875a-b045-46d2-8141-d33752f913b7"),
                            Language = "en",
                            Name = "Lviv"
                        },
                        new
                        {
                            Id = new Guid("6366081a-afb8-4934-b11d-81f228b31b6f"),
                            CityId = new Guid("f35efed0-a0ad-478d-8fc5-525311f136d2"),
                            Language = "en",
                            Name = "Mykolaiv"
                        },
                        new
                        {
                            Id = new Guid("12bb8ee6-dcda-4ff3-9a72-5c18f6d9d573"),
                            CityId = new Guid("7b47eef9-87f5-48b2-9118-624bd6a541e3"),
                            Language = "en",
                            Name = "Odesa"
                        },
                        new
                        {
                            Id = new Guid("a1d5263c-f0d8-4b3b-8cb2-e4fd93c2581e"),
                            CityId = new Guid("a17d0f75-dddb-4135-86d1-557951cd5c1a"),
                            Language = "en",
                            Name = "Poltava"
                        },
                        new
                        {
                            Id = new Guid("e0978cf6-7b11-4b10-97ef-c96f73cadf48"),
                            CityId = new Guid("6114bafa-48d9-48a8-8ea9-20a877e84dc4"),
                            Language = "en",
                            Name = "Rivne"
                        },
                        new
                        {
                            Id = new Guid("3254adf2-dfba-4451-b9c6-6e5de2e2d9aa"),
                            CityId = new Guid("d12940d0-8042-410f-be5f-fc97cad808dc"),
                            Language = "en",
                            Name = "Sumy"
                        },
                        new
                        {
                            Id = new Guid("7f78fb63-dea8-4776-9b57-3e7bec810052"),
                            CityId = new Guid("944632ce-f9e1-4c4b-baf8-163b5ec20e70"),
                            Language = "en",
                            Name = "Ternopil"
                        },
                        new
                        {
                            Id = new Guid("26a1b337-49f2-4279-92fe-8349d3ff2689"),
                            CityId = new Guid("48056f9f-b4a6-42d3-90c9-a222c66bb3e6"),
                            Language = "en",
                            Name = "Uzhhorod"
                        },
                        new
                        {
                            Id = new Guid("d02fc942-2859-4916-b135-90a00b496388"),
                            CityId = new Guid("5c493a19-2c1f-4542-9c42-9e8810f49775"),
                            Language = "en",
                            Name = "Kharkiv"
                        },
                        new
                        {
                            Id = new Guid("6243cea1-a38f-4c94-b420-df2e3e5ff712"),
                            CityId = new Guid("893e1740-89dd-4d85-88e2-1ee73444f8ac"),
                            Language = "en",
                            Name = "Kherson"
                        },
                        new
                        {
                            Id = new Guid("bb323f6a-f142-4af4-91e4-71e0416dc87f"),
                            CityId = new Guid("048986c8-4a23-4eda-b094-2fb6f939594d"),
                            Language = "en",
                            Name = "Khmelnytskyi"
                        },
                        new
                        {
                            Id = new Guid("3f5ea2da-c8ac-4336-b1a3-f5d64e1e539c"),
                            CityId = new Guid("0cf2549e-8d9f-4ac1-ad86-daf7abc9b13e"),
                            Language = "en",
                            Name = "Cherkasy"
                        },
                        new
                        {
                            Id = new Guid("3db04982-7aaf-479e-824c-fdc8df4eee3d"),
                            CityId = new Guid("3498adc5-9f01-4356-b25a-2d0b97731fd9"),
                            Language = "en",
                            Name = "Chernivtsi"
                        },
                        new
                        {
                            Id = new Guid("8acc6d91-1f01-4c23-b80a-0c40ce57c5ec"),
                            CityId = new Guid("80646289-d329-4ee5-b403-e0c1a62c462b"),
                            Language = "en",
                            Name = "Chernihiv"
                        },
                        new
                        {
                            Id = new Guid("3fcc2f13-1fc1-4a2a-b7dc-976ef0c81085"),
                            CityId = new Guid("e7df1b97-f632-42d1-abdc-08a17fcfa894"),
                            Language = "uk",
                            Name = "Варшава"
                        },
                        new
                        {
                            Id = new Guid("1eab485b-3094-4362-8a94-210e4b5c9331"),
                            CityId = new Guid("285b7e6d-56c7-4555-97f2-b233e670e8d6"),
                            Language = "uk",
                            Name = "Люблін"
                        },
                        new
                        {
                            Id = new Guid("04d64a85-28fc-4917-ba82-8d28e2fa14c8"),
                            CityId = new Guid("e7df1b97-f632-42d1-abdc-08a17fcfa894"),
                            Language = "en",
                            Name = "Varshava"
                        },
                        new
                        {
                            Id = new Guid("4879a471-3c30-467d-8b1c-8110886095ca"),
                            CityId = new Guid("285b7e6d-56c7-4555-97f2-b233e670e8d6"),
                            Language = "en",
                            Name = "Lublin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7d5924f4-1456-423b-af43-5bb4ffb19d28"),
                            ISO = "uk"
                        },
                        new
                        {
                            Id = new Guid("415faf4f-21d8-4200-9e7e-641d1e02ea00"),
                            ISO = "pl"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CountryTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("326dd364-326a-4657-b7bd-749fbd3e3315"),
                            CountryId = new Guid("7d5924f4-1456-423b-af43-5bb4ffb19d28"),
                            Language = "en",
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("9789a92e-5f40-430c-9d1e-dad17e5465b4"),
                            CountryId = new Guid("7d5924f4-1456-423b-af43-5bb4ffb19d28"),
                            Language = "uk",
                            Name = "Україна"
                        },
                        new
                        {
                            Id = new Guid("c5f3a440-dffc-418d-a59d-d664e3ff57e9"),
                            CountryId = new Guid("415faf4f-21d8-4200-9e7e-641d1e02ea00"),
                            Language = "en",
                            Name = "Poland"
                        },
                        new
                        {
                            Id = new Guid("881839d6-59d3-4071-8125-c125564f4ac5"),
                            CountryId = new Guid("415faf4f-21d8-4200-9e7e-641d1e02ea00"),
                            Language = "uk",
                            Name = "Польша"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Donate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DateTimeCreation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderCardBank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderCardCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderCardMask2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderCardType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderCommission")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Donates");
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VolunteerApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VolunteerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VolunteerUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VolunteerUserId", "VolunteerApplicationId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DAL.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplictionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserRecipientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserSenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplictionId");

                    b.HasIndex("UserRecipientId");

                    b.HasIndex("UserSenderId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ProfilePictures");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2ff46772-9532-49f9-8a03-27a6d13f495c"),
                            Title = "medicine"
                        },
                        new
                        {
                            Id = new Guid("a2489900-0b46-4f82-b7b4-37368baafe63"),
                            Title = "cooking"
                        },
                        new
                        {
                            Id = new Guid("2d6da3e4-6fe3-4faa-9b24-d9127130ee28"),
                            Title = "building"
                        },
                        new
                        {
                            Id = new Guid("ed9b98af-4fec-4308-8bff-1bb2ad57e75b"),
                            Title = "psychology"
                        });
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4a29adc8-19c8-48d1-bb60-323aa2f03c42"),
                            Language = "en",
                            Name = "medicine",
                            SkillId = new Guid("2ff46772-9532-49f9-8a03-27a6d13f495c")
                        },
                        new
                        {
                            Id = new Guid("99ab4bf4-80f7-4053-bb26-03b6d8a44497"),
                            Language = "uk",
                            Name = "медицина",
                            SkillId = new Guid("2ff46772-9532-49f9-8a03-27a6d13f495c")
                        },
                        new
                        {
                            Id = new Guid("b13a6898-c173-4e2a-b46a-a2bf71a315ab"),
                            Language = "en",
                            Name = "cooking",
                            SkillId = new Guid("a2489900-0b46-4f82-b7b4-37368baafe63")
                        },
                        new
                        {
                            Id = new Guid("4a03bd86-a26a-464c-8ad4-6570b51552db"),
                            Language = "uk",
                            Name = "кулінарія",
                            SkillId = new Guid("a2489900-0b46-4f82-b7b4-37368baafe63")
                        },
                        new
                        {
                            Id = new Guid("9bd810ad-a1e5-42e1-bf41-dc7d7e355f37"),
                            Language = "en",
                            Name = "building",
                            SkillId = new Guid("2d6da3e4-6fe3-4faa-9b24-d9127130ee28")
                        },
                        new
                        {
                            Id = new Guid("374282be-d538-428a-8858-76fa2f3a0eab"),
                            Language = "uk",
                            Name = "будівництво",
                            SkillId = new Guid("2d6da3e4-6fe3-4faa-9b24-d9127130ee28")
                        },
                        new
                        {
                            Id = new Guid("1a88d76e-c22e-4b5b-ba94-6dfc48131aeb"),
                            Language = "en",
                            Name = "psychology",
                            SkillId = new Guid("ed9b98af-4fec-4308-8bff-1bb2ad57e75b")
                        },
                        new
                        {
                            Id = new Guid("8197885c-a2db-4a8f-968b-020c71c3fbdf"),
                            Language = "uk",
                            Name = "психологія",
                            SkillId = new Guid("ed9b98af-4fec-4308-8bff-1bb2ad57e75b")
                        });
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9b61315f-2e6c-4cf1-a8a5-c98c42409704"),
                            CityId = new Guid("70e9028a-8129-45b3-bc65-a4bedc80b1a7"),
                            DateOfBirth = new DateTime(2023, 5, 24, 16, 42, 51, 840, DateTimeKind.Local).AddTicks(6247),
                            FirstName = "the first",
                            LastName = "admin",
                            Login = "ourfirstadmin",
                            Password = "Rk/ryiBNbnHx+s9i1IveCNNw4axYPQHm4T1eratfQlg=",
                            Phone = "+11111111111",
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Document")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DocumentFormat")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("NULL");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ApplicationId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.HasOne("DAL.Entities.Category", "Category")
                        .WithMany("Applications")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("Applications")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationSkill", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("ApplicationSkills")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("ApplicationSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DAL.Entities.CategoryTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Category", "Category")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("CityTranslations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("CountryTranslations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.Donate", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Donates")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.HasOne("DAL.Entities.Volunteer", "Volunteer")
                        .WithMany("Messages")
                        .HasForeignKey("VolunteerUserId", "VolunteerApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("DAL.Entities.Notification", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Notifications")
                        .HasForeignKey("ApplictionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "UserRecipient")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("UserRecipientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "UserSender")
                        .WithMany("SentNotifications")
                        .HasForeignKey("UserSenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("UserRecipient");

                    b.Navigation("UserSender");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithOne("ProfilePicture")
                        .HasForeignKey("DAL.Entities.ProfilePicture", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("SkillTranslations")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Volunteers")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Volunteers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Navigation("ApplicationSkills");

                    b.Navigation("Donates");

                    b.Navigation("Notifications");

                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("CategoryTranslations");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("CityTranslations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("CountryTranslations");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Navigation("ApplicationSkills");

                    b.Navigation("SkillTranslations");

                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ProfilePicture");

                    b.Navigation("ReceivedNotifications");

                    b.Navigation("SentNotifications");

                    b.Navigation("UserSkills");

                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
