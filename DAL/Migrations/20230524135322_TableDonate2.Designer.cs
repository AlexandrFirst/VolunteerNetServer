// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(VolunteerNetServerDBContext))]
    [Migration("20230524135322_TableDonate2")]
    partial class TableDonate2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("CurrentSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<string>("OwnerCardName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequiredNumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<decimal?>("RequiredSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationSkill", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("ApplicationSkills");
                });

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2419a093-ea0f-4a14-b471-789cc82078db"),
                            Title = "health care"
                        },
                        new
                        {
                            Id = new Guid("d3abf0cd-5fbc-4e43-abde-37bc37852082"),
                            Title = "education"
                        },
                        new
                        {
                            Id = new Guid("b350474d-1d91-4ea8-91d6-31a7ea1574fb"),
                            Title = "sports and physical culture"
                        },
                        new
                        {
                            Id = new Guid("5d595075-d0f7-48c8-8c35-4249e55f996a"),
                            Title = "culture and art"
                        },
                        new
                        {
                            Id = new Guid("d0a3f78d-acca-4eba-a327-9fbc5821060a"),
                            Title = "social programs"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CategoryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DescriptionCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f195c319-898f-4378-b3f1-d1432a4b48bf"),
                            CategoryId = new Guid("2419a093-ea0f-4a14-b471-789cc82078db"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "health care"
                        },
                        new
                        {
                            Id = new Guid("2dc87923-c4a2-4d7f-8cb6-4245bc6a6180"),
                            CategoryId = new Guid("2419a093-ea0f-4a14-b471-789cc82078db"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "охорона здоров'я"
                        },
                        new
                        {
                            Id = new Guid("636ea04f-9638-4147-9054-bc6c7274cd8c"),
                            CategoryId = new Guid("d3abf0cd-5fbc-4e43-abde-37bc37852082"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "education"
                        },
                        new
                        {
                            Id = new Guid("ee76c770-139b-408c-a8e1-33d2f14b336f"),
                            CategoryId = new Guid("d3abf0cd-5fbc-4e43-abde-37bc37852082"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "освіта"
                        },
                        new
                        {
                            Id = new Guid("8838582a-c079-4a35-8c1f-073f26aa7ec6"),
                            CategoryId = new Guid("b350474d-1d91-4ea8-91d6-31a7ea1574fb"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "sport and physical culture"
                        },
                        new
                        {
                            Id = new Guid("2ee2ea89-64ec-4f37-9a76-4baf81a5449e"),
                            CategoryId = new Guid("b350474d-1d91-4ea8-91d6-31a7ea1574fb"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "спорт та фізична культура"
                        },
                        new
                        {
                            Id = new Guid("5626bc25-d731-4d4c-a2df-5547bfac7381"),
                            CategoryId = new Guid("5d595075-d0f7-48c8-8c35-4249e55f996a"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "culture and art"
                        },
                        new
                        {
                            Id = new Guid("719b20eb-b1d3-4104-952e-690ca137cc02"),
                            CategoryId = new Guid("5d595075-d0f7-48c8-8c35-4249e55f996a"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "культура та мистецтво"
                        },
                        new
                        {
                            Id = new Guid("a5b4a0b6-b678-42e3-b016-b46a1ae67f85"),
                            CategoryId = new Guid("d0a3f78d-acca-4eba-a327-9fbc5821060a"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "social programs"
                        },
                        new
                        {
                            Id = new Guid("82a58dce-f0a0-4b68-908f-ed334574750b"),
                            CategoryId = new Guid("d0a3f78d-acca-4eba-a327-9fbc5821060a"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "соціальні програми"
                        });
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("37470a95-00a2-48bf-92a4-5ff45dcd17d7"),
                            CountryId = new Guid("5aa10fce-3104-486b-b65b-ba8f4239c960"),
                            ISO = "vi"
                        },
                        new
                        {
                            Id = new Guid("2ee6223a-9d8d-4dfb-a905-6f8c5787a4ef"),
                            CountryId = new Guid("5aa10fce-3104-486b-b65b-ba8f4239c960"),
                            ISO = "dn"
                        },
                        new
                        {
                            Id = new Guid("66ab4fd3-fd78-4926-aa5c-bb67ea3fbab7"),
                            CountryId = new Guid("5aa10fce-3104-486b-b65b-ba8f4239c960"),
                            ISO = "zhy"
                        },
                        new
                        {
                            Id = new Guid("b89e8270-491e-429c-b876-a693579ecf01"),
                            CountryId = new Guid("5aa10fce-3104-486b-b65b-ba8f4239c960"),
                            ISO = "zp"
                        },
                        new
                        {
                            Id = new Guid("62d1ae8e-190f-4e29-80ec-af294f09a3d5"),
                            CountryId = new Guid("5aa10fce-3104-486b-b65b-ba8f4239c960"),
                            ISO = "if"
                        },
                        new
                        {
                            Id = new Guid("bc5e9c60-e256-4b8e-8ae6-215563a496be"),
                            CountryId = new Guid("5aa10fce-3104-486b-b65b-ba8f4239c960"),
                            ISO = "ky"
                        },
                        new
                        {
                            Id = new Guid("bd9f094a-5f7a-49ba-a56c-21746c143f9a"),
                            CountryId = new Guid("5aa10fce-3104-486b-b65b-ba8f4239c960"),
                            ISO = "kr"
                        },
                        new
                        {
                            Id = new Guid("892e04c1-b722-4b77-8ca8-7e583bfbf1ca"),
                            CountryId = new Guid("5aa10fce-3104-486b-b65b-ba8f4239c960"),
                            ISO = "lut"
                        },
                        new
                        {
                            Id = new Guid("94800a31-227c-4c8f-bc1d-f1252ca07b78"),
                            CountryId = new Guid("5aa10fce-3104-486b-b65b-ba8f4239c960"),
                            ISO = "lv"
                        },
                        new
                        {
                            Id = new Guid("2f0d1726-6940-4ea9-b2fe-532031d90f02"),
                            CountryId = new Guid("5aa10fce-3104-486b-b65b-ba8f4239c960"),
                            ISO = "my"
                        },
                        new
                        {
                            Id = new Guid("68ef28cd-f180-4df5-9f49-086d66172967"),
                            CountryId = new Guid("5aa10fce-3104-486b-b65b-ba8f4239c960"),
                            ISO = "od"
                        },
                        new
                        {
                            Id = new Guid("204745e6-54c1-4f4b-a5ed-bf7ae2cd5894"),
                            CountryId = new Guid("5aa10fce-3104-486b-b65b-ba8f4239c960"),
                            ISO = "pol"
                        },
                        new
                        {
                            Id = new Guid("9af168e4-5447-4826-ab6a-74d4efc7c7b5"),
                            CountryId = new Guid("5aa10fce-3104-486b-b65b-ba8f4239c960"),
                            ISO = "ri"
                        },
                        new
                        {
                            Id = new Guid("1245954d-8d4b-4914-9c2e-58e4b8e764e1"),
                            CountryId = new Guid("5aa10fce-3104-486b-b65b-ba8f4239c960"),
                            ISO = "su"
                        },
                        new
                        {
                            Id = new Guid("4a7ed49f-e2ac-4685-bbd0-ae0318a69586"),
                            CountryId = new Guid("5aa10fce-3104-486b-b65b-ba8f4239c960"),
                            ISO = "ter"
                        },
                        new
                        {
                            Id = new Guid("01fd56f7-7b99-4c34-a64b-20e5e72fa43d"),
                            CountryId = new Guid("5aa10fce-3104-486b-b65b-ba8f4239c960"),
                            ISO = "uzh"
                        },
                        new
                        {
                            Id = new Guid("fc1d61ff-8dbc-4d49-8e23-29b9dd66d39d"),
                            CountryId = new Guid("5aa10fce-3104-486b-b65b-ba8f4239c960"),
                            ISO = "khar"
                        },
                        new
                        {
                            Id = new Guid("76385fc9-71ef-4128-a201-b5549a128809"),
                            CountryId = new Guid("5aa10fce-3104-486b-b65b-ba8f4239c960"),
                            ISO = "kher"
                        },
                        new
                        {
                            Id = new Guid("cbe00729-bdc4-4e76-9bef-77f6568725a1"),
                            CountryId = new Guid("5aa10fce-3104-486b-b65b-ba8f4239c960"),
                            ISO = "khm"
                        },
                        new
                        {
                            Id = new Guid("b147f03c-c3b7-479b-8256-107c3e3ad8e4"),
                            CountryId = new Guid("5aa10fce-3104-486b-b65b-ba8f4239c960"),
                            ISO = "chk"
                        },
                        new
                        {
                            Id = new Guid("4833c0a5-a65f-4366-9d7f-88a3c94ec0b1"),
                            CountryId = new Guid("5aa10fce-3104-486b-b65b-ba8f4239c960"),
                            ISO = "chv"
                        },
                        new
                        {
                            Id = new Guid("4e58ab1a-5582-46e7-9db7-1b25083866e1"),
                            CountryId = new Guid("5aa10fce-3104-486b-b65b-ba8f4239c960"),
                            ISO = "chh"
                        },
                        new
                        {
                            Id = new Guid("c23fc74d-384f-46dd-ba1c-d0647bc373f4"),
                            CountryId = new Guid("8bc4e497-664d-4199-bf66-f733d5e1aaa5"),
                            ISO = "var"
                        },
                        new
                        {
                            Id = new Guid("d6bf853d-d810-40c9-bafe-0de0780b1415"),
                            CountryId = new Guid("8bc4e497-664d-4199-bf66-f733d5e1aaa5"),
                            ISO = "lub"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("CityTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("50b96b27-aa24-4b9c-af15-f65808f44f65"),
                            CityId = new Guid("37470a95-00a2-48bf-92a4-5ff45dcd17d7"),
                            Language = "uk",
                            Name = "Вінниця"
                        },
                        new
                        {
                            Id = new Guid("cf840d71-d31f-4f36-95c1-865b395269b8"),
                            CityId = new Guid("2ee6223a-9d8d-4dfb-a905-6f8c5787a4ef"),
                            Language = "uk",
                            Name = "Дніпро"
                        },
                        new
                        {
                            Id = new Guid("e7a5ec72-e281-4e42-970a-2eb94ce42df5"),
                            CityId = new Guid("66ab4fd3-fd78-4926-aa5c-bb67ea3fbab7"),
                            Language = "uk",
                            Name = "Житомир"
                        },
                        new
                        {
                            Id = new Guid("15c21a6b-99f2-4ff8-b7ea-79175cfd0033"),
                            CityId = new Guid("b89e8270-491e-429c-b876-a693579ecf01"),
                            Language = "uk",
                            Name = "Запоріжжя"
                        },
                        new
                        {
                            Id = new Guid("0f704619-cc3a-4f4c-a526-e7896bf989e5"),
                            CityId = new Guid("62d1ae8e-190f-4e29-80ec-af294f09a3d5"),
                            Language = "uk",
                            Name = "Івано-Франківськ"
                        },
                        new
                        {
                            Id = new Guid("edb08ba4-0c71-4b0b-8f5d-ccc2130f9323"),
                            CityId = new Guid("bc5e9c60-e256-4b8e-8ae6-215563a496be"),
                            Language = "uk",
                            Name = "Київ"
                        },
                        new
                        {
                            Id = new Guid("a329a757-5922-4d8a-8a09-b71e4e9c1717"),
                            CityId = new Guid("bd9f094a-5f7a-49ba-a56c-21746c143f9a"),
                            Language = "uk",
                            Name = "Кропивницький"
                        },
                        new
                        {
                            Id = new Guid("297b4392-5bd7-4025-876b-5d00d656f8c2"),
                            CityId = new Guid("892e04c1-b722-4b77-8ca8-7e583bfbf1ca"),
                            Language = "uk",
                            Name = "Луцьк"
                        },
                        new
                        {
                            Id = new Guid("a953fd88-8050-4310-9380-3467c1108088"),
                            CityId = new Guid("94800a31-227c-4c8f-bc1d-f1252ca07b78"),
                            Language = "uk",
                            Name = "Львів"
                        },
                        new
                        {
                            Id = new Guid("e4c96420-ebf0-4005-8007-b0475b24b57c"),
                            CityId = new Guid("2f0d1726-6940-4ea9-b2fe-532031d90f02"),
                            Language = "uk",
                            Name = "Миколаїв"
                        },
                        new
                        {
                            Id = new Guid("12deac47-f002-4cae-82c7-3964d59a7259"),
                            CityId = new Guid("68ef28cd-f180-4df5-9f49-086d66172967"),
                            Language = "uk",
                            Name = "Одеса"
                        },
                        new
                        {
                            Id = new Guid("e71d980f-ac63-4c1b-964b-2499423d5061"),
                            CityId = new Guid("204745e6-54c1-4f4b-a5ed-bf7ae2cd5894"),
                            Language = "uk",
                            Name = "Полтава"
                        },
                        new
                        {
                            Id = new Guid("f30a37fe-cbed-4553-8076-ffefbd16f732"),
                            CityId = new Guid("9af168e4-5447-4826-ab6a-74d4efc7c7b5"),
                            Language = "uk",
                            Name = "Рівне"
                        },
                        new
                        {
                            Id = new Guid("ec7d88c8-92f8-4bc4-8924-c0b71fe49915"),
                            CityId = new Guid("1245954d-8d4b-4914-9c2e-58e4b8e764e1"),
                            Language = "uk",
                            Name = "Суми"
                        },
                        new
                        {
                            Id = new Guid("68c94294-aace-412b-9769-232bf7419330"),
                            CityId = new Guid("4a7ed49f-e2ac-4685-bbd0-ae0318a69586"),
                            Language = "uk",
                            Name = "Тернопіль"
                        },
                        new
                        {
                            Id = new Guid("a1f6c678-6051-4c2e-8a92-5c6fd0a29734"),
                            CityId = new Guid("01fd56f7-7b99-4c34-a64b-20e5e72fa43d"),
                            Language = "uk",
                            Name = "Ужгород"
                        },
                        new
                        {
                            Id = new Guid("05ef4602-3a1a-475a-84b4-f4eb19429309"),
                            CityId = new Guid("fc1d61ff-8dbc-4d49-8e23-29b9dd66d39d"),
                            Language = "uk",
                            Name = "Харків"
                        },
                        new
                        {
                            Id = new Guid("e1a31932-5014-4c03-b4fb-bcba22cba1d0"),
                            CityId = new Guid("76385fc9-71ef-4128-a201-b5549a128809"),
                            Language = "uk",
                            Name = "Херсон"
                        },
                        new
                        {
                            Id = new Guid("c59760c7-9537-45d5-ad67-d2a9e56088ea"),
                            CityId = new Guid("cbe00729-bdc4-4e76-9bef-77f6568725a1"),
                            Language = "uk",
                            Name = "Хмельницький"
                        },
                        new
                        {
                            Id = new Guid("2fb640f1-59bf-4a21-867d-53af4696ab13"),
                            CityId = new Guid("b147f03c-c3b7-479b-8256-107c3e3ad8e4"),
                            Language = "uk",
                            Name = "Черкаси"
                        },
                        new
                        {
                            Id = new Guid("7090164d-2a63-44e2-a4b1-b01cfbab1d88"),
                            CityId = new Guid("4833c0a5-a65f-4366-9d7f-88a3c94ec0b1"),
                            Language = "uk",
                            Name = "Чернівці"
                        },
                        new
                        {
                            Id = new Guid("e0855a4e-296e-4006-be59-ea48f239f440"),
                            CityId = new Guid("4e58ab1a-5582-46e7-9db7-1b25083866e1"),
                            Language = "uk",
                            Name = "Чернігів"
                        },
                        new
                        {
                            Id = new Guid("419424a6-4c5f-441a-b6f8-733dc0598a1d"),
                            CityId = new Guid("37470a95-00a2-48bf-92a4-5ff45dcd17d7"),
                            Language = "en",
                            Name = "Vinnytsia"
                        },
                        new
                        {
                            Id = new Guid("b3778628-089f-4563-afd8-5395e71673f2"),
                            CityId = new Guid("2ee6223a-9d8d-4dfb-a905-6f8c5787a4ef"),
                            Language = "en",
                            Name = "Dnipro"
                        },
                        new
                        {
                            Id = new Guid("0c620270-a6a9-4fc4-a247-9a81fe13cf80"),
                            CityId = new Guid("66ab4fd3-fd78-4926-aa5c-bb67ea3fbab7"),
                            Language = "en",
                            Name = "Zhytomyr"
                        },
                        new
                        {
                            Id = new Guid("ae2daf2c-ce63-4117-85f3-c641b9c03393"),
                            CityId = new Guid("b89e8270-491e-429c-b876-a693579ecf01"),
                            Language = "en",
                            Name = "Zaporizhzhia"
                        },
                        new
                        {
                            Id = new Guid("610be3b7-efd8-4e3a-99d4-1c4cc6a6315f"),
                            CityId = new Guid("62d1ae8e-190f-4e29-80ec-af294f09a3d5"),
                            Language = "en",
                            Name = "Ivano-Frankivsk"
                        },
                        new
                        {
                            Id = new Guid("d4428abc-d428-4ce3-95ea-ef61ee472741"),
                            CityId = new Guid("bc5e9c60-e256-4b8e-8ae6-215563a496be"),
                            Language = "en",
                            Name = "Kyiv"
                        },
                        new
                        {
                            Id = new Guid("a29c7f56-7391-4a20-886c-c11f44c124ba"),
                            CityId = new Guid("bd9f094a-5f7a-49ba-a56c-21746c143f9a"),
                            Language = "en",
                            Name = "Kropyvnytskyi"
                        },
                        new
                        {
                            Id = new Guid("45e982d3-abdc-4458-a2ce-61bc51bcab2d"),
                            CityId = new Guid("892e04c1-b722-4b77-8ca8-7e583bfbf1ca"),
                            Language = "en",
                            Name = "Lutsk"
                        },
                        new
                        {
                            Id = new Guid("0a79660b-4c0f-43c3-a730-feb1406616d4"),
                            CityId = new Guid("94800a31-227c-4c8f-bc1d-f1252ca07b78"),
                            Language = "en",
                            Name = "Lviv"
                        },
                        new
                        {
                            Id = new Guid("34af3bd4-18d8-48e6-9ba4-43043e8d0c0f"),
                            CityId = new Guid("2f0d1726-6940-4ea9-b2fe-532031d90f02"),
                            Language = "en",
                            Name = "Mykolaiv"
                        },
                        new
                        {
                            Id = new Guid("826d1810-ffb5-4a20-b587-175fbda6a94a"),
                            CityId = new Guid("68ef28cd-f180-4df5-9f49-086d66172967"),
                            Language = "en",
                            Name = "Odesa"
                        },
                        new
                        {
                            Id = new Guid("f86676a7-0fac-4e24-ac23-20c46ddcb2dc"),
                            CityId = new Guid("204745e6-54c1-4f4b-a5ed-bf7ae2cd5894"),
                            Language = "en",
                            Name = "Poltava"
                        },
                        new
                        {
                            Id = new Guid("6948a25d-4d79-45d7-99c7-eeee3e650e3f"),
                            CityId = new Guid("9af168e4-5447-4826-ab6a-74d4efc7c7b5"),
                            Language = "en",
                            Name = "Rivne"
                        },
                        new
                        {
                            Id = new Guid("771f5af6-5e34-4f39-9a9d-8db965f5ee80"),
                            CityId = new Guid("1245954d-8d4b-4914-9c2e-58e4b8e764e1"),
                            Language = "en",
                            Name = "Sumy"
                        },
                        new
                        {
                            Id = new Guid("57afadda-c009-4ccc-87de-9e725085f10c"),
                            CityId = new Guid("4a7ed49f-e2ac-4685-bbd0-ae0318a69586"),
                            Language = "en",
                            Name = "Ternopil"
                        },
                        new
                        {
                            Id = new Guid("0ca63541-f9bf-4683-8e17-7112be401a4e"),
                            CityId = new Guid("01fd56f7-7b99-4c34-a64b-20e5e72fa43d"),
                            Language = "en",
                            Name = "Uzhhorod"
                        },
                        new
                        {
                            Id = new Guid("38c103ab-52e0-4442-908d-ef178403ea52"),
                            CityId = new Guid("fc1d61ff-8dbc-4d49-8e23-29b9dd66d39d"),
                            Language = "en",
                            Name = "Kharkiv"
                        },
                        new
                        {
                            Id = new Guid("24bdccde-923b-4a82-8d23-4be092df13ff"),
                            CityId = new Guid("76385fc9-71ef-4128-a201-b5549a128809"),
                            Language = "en",
                            Name = "Kherson"
                        },
                        new
                        {
                            Id = new Guid("0d5c9e73-7144-4e78-994d-2a62dafff893"),
                            CityId = new Guid("cbe00729-bdc4-4e76-9bef-77f6568725a1"),
                            Language = "en",
                            Name = "Khmelnytskyi"
                        },
                        new
                        {
                            Id = new Guid("a4e11105-9b43-4bfa-99c4-592278fb7c80"),
                            CityId = new Guid("b147f03c-c3b7-479b-8256-107c3e3ad8e4"),
                            Language = "en",
                            Name = "Cherkasy"
                        },
                        new
                        {
                            Id = new Guid("cab5887f-49bc-4e80-ac0d-f931d4fd0974"),
                            CityId = new Guid("4833c0a5-a65f-4366-9d7f-88a3c94ec0b1"),
                            Language = "en",
                            Name = "Chernivtsi"
                        },
                        new
                        {
                            Id = new Guid("3c304bea-08f1-4063-abd3-f3c0764fc00d"),
                            CityId = new Guid("4e58ab1a-5582-46e7-9db7-1b25083866e1"),
                            Language = "en",
                            Name = "Chernihiv"
                        },
                        new
                        {
                            Id = new Guid("2ae63fd7-5ff6-4048-8085-b4285cec979c"),
                            CityId = new Guid("c23fc74d-384f-46dd-ba1c-d0647bc373f4"),
                            Language = "uk",
                            Name = "Варшава"
                        },
                        new
                        {
                            Id = new Guid("10c3c528-5d97-44e4-94f6-026762a5e6f8"),
                            CityId = new Guid("d6bf853d-d810-40c9-bafe-0de0780b1415"),
                            Language = "uk",
                            Name = "Люблін"
                        },
                        new
                        {
                            Id = new Guid("dd17abba-3eac-4654-a14d-6ef49efbc6b9"),
                            CityId = new Guid("c23fc74d-384f-46dd-ba1c-d0647bc373f4"),
                            Language = "en",
                            Name = "Varshava"
                        },
                        new
                        {
                            Id = new Guid("09976102-8d75-4685-b7e0-904681735802"),
                            CityId = new Guid("d6bf853d-d810-40c9-bafe-0de0780b1415"),
                            Language = "en",
                            Name = "Lublin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5aa10fce-3104-486b-b65b-ba8f4239c960"),
                            ISO = "uk"
                        },
                        new
                        {
                            Id = new Guid("8bc4e497-664d-4199-bf66-f733d5e1aaa5"),
                            ISO = "pl"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CountryTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("12473dd5-4531-4b79-86c0-b683bc63c633"),
                            CountryId = new Guid("5aa10fce-3104-486b-b65b-ba8f4239c960"),
                            Language = "en",
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("c95789b8-bbf0-496a-8be9-9d7ba24a2c7c"),
                            CountryId = new Guid("5aa10fce-3104-486b-b65b-ba8f4239c960"),
                            Language = "uk",
                            Name = "Україна"
                        },
                        new
                        {
                            Id = new Guid("9d17825d-4dff-426c-a022-1e4bf0773a9f"),
                            CountryId = new Guid("8bc4e497-664d-4199-bf66-f733d5e1aaa5"),
                            Language = "en",
                            Name = "Poland"
                        },
                        new
                        {
                            Id = new Guid("0f9b3247-1466-464f-b9df-a591d23b148e"),
                            CountryId = new Guid("8bc4e497-664d-4199-bf66-f733d5e1aaa5"),
                            Language = "uk",
                            Name = "Польша"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Donate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTimeCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderCardBank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderCardCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderCardMask2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderCardType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderCommission")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Donates");
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VolunteerApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VolunteerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VolunteerUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VolunteerUserId", "VolunteerApplicationId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DAL.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplictionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserRecipientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserSenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplictionId");

                    b.HasIndex("UserRecipientId");

                    b.HasIndex("UserSenderId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ProfilePictures");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2323aa3e-e370-4fe1-9ad7-48753608bd92"),
                            Title = "medicine"
                        },
                        new
                        {
                            Id = new Guid("0cff995b-0992-4d80-bfff-2281d7108407"),
                            Title = "cooking"
                        },
                        new
                        {
                            Id = new Guid("96a0cff9-6ffc-4b2b-9db5-ad2f508ebedd"),
                            Title = "building"
                        },
                        new
                        {
                            Id = new Guid("81f1b569-3b6d-4522-90da-633b90ab7ca5"),
                            Title = "psychology"
                        });
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("845571a5-b094-45eb-9a30-c0346c2b8810"),
                            Language = "en",
                            Name = "medicine",
                            SkillId = new Guid("2323aa3e-e370-4fe1-9ad7-48753608bd92")
                        },
                        new
                        {
                            Id = new Guid("07f970e2-e7a0-42f1-b9eb-b9d22091d186"),
                            Language = "uk",
                            Name = "медицина",
                            SkillId = new Guid("2323aa3e-e370-4fe1-9ad7-48753608bd92")
                        },
                        new
                        {
                            Id = new Guid("fe2b30e3-aac5-459a-b4e0-8dc5bbbe0581"),
                            Language = "en",
                            Name = "cooking",
                            SkillId = new Guid("0cff995b-0992-4d80-bfff-2281d7108407")
                        },
                        new
                        {
                            Id = new Guid("9a387b0a-379d-41b9-bba6-7054e5b44be0"),
                            Language = "uk",
                            Name = "кулінарія",
                            SkillId = new Guid("0cff995b-0992-4d80-bfff-2281d7108407")
                        },
                        new
                        {
                            Id = new Guid("6cc2ea33-5f6b-4933-adaa-51b7d188debe"),
                            Language = "en",
                            Name = "building",
                            SkillId = new Guid("96a0cff9-6ffc-4b2b-9db5-ad2f508ebedd")
                        },
                        new
                        {
                            Id = new Guid("64d2059e-bd03-4977-b743-305df5c132eb"),
                            Language = "uk",
                            Name = "будівництво",
                            SkillId = new Guid("96a0cff9-6ffc-4b2b-9db5-ad2f508ebedd")
                        },
                        new
                        {
                            Id = new Guid("48fabcf5-1cea-45ce-8e7d-06da9a30eaa9"),
                            Language = "en",
                            Name = "psychology",
                            SkillId = new Guid("81f1b569-3b6d-4522-90da-633b90ab7ca5")
                        },
                        new
                        {
                            Id = new Guid("e15b289a-f255-429d-b55c-69c10623f9a0"),
                            Language = "uk",
                            Name = "психологія",
                            SkillId = new Guid("81f1b569-3b6d-4522-90da-633b90ab7ca5")
                        });
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c566e4b3-09bf-4432-8823-a16d11c25aba"),
                            CityId = new Guid("37470a95-00a2-48bf-92a4-5ff45dcd17d7"),
                            DateOfBirth = new DateTime(2023, 5, 24, 16, 53, 6, 520, DateTimeKind.Local).AddTicks(2568),
                            FirstName = "the first",
                            LastName = "admin",
                            Login = "ourfirstadmin",
                            Password = "Rk/ryiBNbnHx+s9i1IveCNNw4axYPQHm4T1eratfQlg=",
                            Phone = "+11111111111",
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Document")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DocumentFormat")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("NULL");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ApplicationId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.HasOne("DAL.Entities.Category", "Category")
                        .WithMany("Applications")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("Applications")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationSkill", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("ApplicationSkills")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("ApplicationSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DAL.Entities.CategoryTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Category", "Category")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("CityTranslations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("CountryTranslations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.Donate", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Donates")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.HasOne("DAL.Entities.Volunteer", "Volunteer")
                        .WithMany("Messages")
                        .HasForeignKey("VolunteerUserId", "VolunteerApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("DAL.Entities.Notification", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Notifications")
                        .HasForeignKey("ApplictionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "UserRecipient")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("UserRecipientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "UserSender")
                        .WithMany("SentNotifications")
                        .HasForeignKey("UserSenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("UserRecipient");

                    b.Navigation("UserSender");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithOne("ProfilePicture")
                        .HasForeignKey("DAL.Entities.ProfilePicture", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("SkillTranslations")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Volunteers")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Volunteers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Navigation("ApplicationSkills");

                    b.Navigation("Donates");

                    b.Navigation("Notifications");

                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("CategoryTranslations");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("CityTranslations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("CountryTranslations");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Navigation("ApplicationSkills");

                    b.Navigation("SkillTranslations");

                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ProfilePicture");

                    b.Navigation("ReceivedNotifications");

                    b.Navigation("SentNotifications");

                    b.Navigation("UserSkills");

                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
