// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(VolunteerNetServerDBContext))]
    [Migration("20230426172507_TestWithPrimaryKey")]
    partial class TestWithPrimaryKey
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<int>("RequiredNumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("18a86eba-2908-4327-806f-396e9161d579"),
                            CountryId = new Guid("c9187969-5422-4f2c-b8ea-bf07c789dfdd"),
                            ISO = "vi"
                        },
                        new
                        {
                            Id = new Guid("f991045e-e23b-4053-b2b0-422ce27b3ded"),
                            CountryId = new Guid("c9187969-5422-4f2c-b8ea-bf07c789dfdd"),
                            ISO = "dn"
                        },
                        new
                        {
                            Id = new Guid("4ea4da5d-d313-407d-81c3-3f9f359736ad"),
                            CountryId = new Guid("c9187969-5422-4f2c-b8ea-bf07c789dfdd"),
                            ISO = "zhy"
                        },
                        new
                        {
                            Id = new Guid("e1d04711-4591-4798-919c-6de245f94588"),
                            CountryId = new Guid("c9187969-5422-4f2c-b8ea-bf07c789dfdd"),
                            ISO = "zp"
                        },
                        new
                        {
                            Id = new Guid("f349e5f9-2844-473f-be5a-cae7edd083e2"),
                            CountryId = new Guid("c9187969-5422-4f2c-b8ea-bf07c789dfdd"),
                            ISO = "if"
                        },
                        new
                        {
                            Id = new Guid("e90f3a93-b6f2-4b48-8665-2680d69608af"),
                            CountryId = new Guid("c9187969-5422-4f2c-b8ea-bf07c789dfdd"),
                            ISO = "ky"
                        },
                        new
                        {
                            Id = new Guid("bb0a1fd9-f58d-4ddb-a794-a622f2e16bdf"),
                            CountryId = new Guid("c9187969-5422-4f2c-b8ea-bf07c789dfdd"),
                            ISO = "kr"
                        },
                        new
                        {
                            Id = new Guid("7fbf73bd-03ac-4793-adb0-3b1d0f1eff7e"),
                            CountryId = new Guid("c9187969-5422-4f2c-b8ea-bf07c789dfdd"),
                            ISO = "lut"
                        },
                        new
                        {
                            Id = new Guid("5da9f44a-951e-4671-aba4-b181db923151"),
                            CountryId = new Guid("c9187969-5422-4f2c-b8ea-bf07c789dfdd"),
                            ISO = "lv"
                        },
                        new
                        {
                            Id = new Guid("030eae67-d378-45b9-a756-820ee2568af8"),
                            CountryId = new Guid("c9187969-5422-4f2c-b8ea-bf07c789dfdd"),
                            ISO = "my"
                        },
                        new
                        {
                            Id = new Guid("83507f9c-b7f8-439c-933c-ec2e4d41f337"),
                            CountryId = new Guid("c9187969-5422-4f2c-b8ea-bf07c789dfdd"),
                            ISO = "od"
                        },
                        new
                        {
                            Id = new Guid("332d295b-16b9-4c6d-abab-3d15c1af977b"),
                            CountryId = new Guid("c9187969-5422-4f2c-b8ea-bf07c789dfdd"),
                            ISO = "pol"
                        },
                        new
                        {
                            Id = new Guid("79d2325e-0b50-4ac1-b5bf-80f9bc870553"),
                            CountryId = new Guid("c9187969-5422-4f2c-b8ea-bf07c789dfdd"),
                            ISO = "ri"
                        },
                        new
                        {
                            Id = new Guid("60fb72f4-4da2-46b1-8d2c-daeeaff4c0cd"),
                            CountryId = new Guid("c9187969-5422-4f2c-b8ea-bf07c789dfdd"),
                            ISO = "su"
                        },
                        new
                        {
                            Id = new Guid("daaacecc-cbf9-44fe-a7e8-a067338ebe43"),
                            CountryId = new Guid("c9187969-5422-4f2c-b8ea-bf07c789dfdd"),
                            ISO = "ter"
                        },
                        new
                        {
                            Id = new Guid("44af1b46-041c-4f39-b20f-ce031d8f6437"),
                            CountryId = new Guid("c9187969-5422-4f2c-b8ea-bf07c789dfdd"),
                            ISO = "uzh"
                        },
                        new
                        {
                            Id = new Guid("ee28fe11-9919-455b-b511-ea6e4581153a"),
                            CountryId = new Guid("c9187969-5422-4f2c-b8ea-bf07c789dfdd"),
                            ISO = "khar"
                        },
                        new
                        {
                            Id = new Guid("0ad6fa9b-216f-4755-90b2-57bbdabb2ed7"),
                            CountryId = new Guid("c9187969-5422-4f2c-b8ea-bf07c789dfdd"),
                            ISO = "kher"
                        },
                        new
                        {
                            Id = new Guid("407e4df6-5517-413a-ad9d-39bcb137c836"),
                            CountryId = new Guid("c9187969-5422-4f2c-b8ea-bf07c789dfdd"),
                            ISO = "khm"
                        },
                        new
                        {
                            Id = new Guid("edaeab1c-cf23-4288-bad2-4474a43db594"),
                            CountryId = new Guid("c9187969-5422-4f2c-b8ea-bf07c789dfdd"),
                            ISO = "chk"
                        },
                        new
                        {
                            Id = new Guid("d6776bbb-22f7-4822-a4d2-b94499e7caa4"),
                            CountryId = new Guid("c9187969-5422-4f2c-b8ea-bf07c789dfdd"),
                            ISO = "chv"
                        },
                        new
                        {
                            Id = new Guid("1069862e-6dd2-421c-960d-c0c73810c04a"),
                            CountryId = new Guid("c9187969-5422-4f2c-b8ea-bf07c789dfdd"),
                            ISO = "chh"
                        },
                        new
                        {
                            Id = new Guid("f0be17bc-fff8-4a54-af47-fbbc593b8e0f"),
                            CountryId = new Guid("ec3aeb0e-d910-495c-b154-369855ccd282"),
                            ISO = "var"
                        },
                        new
                        {
                            Id = new Guid("57cdd863-da28-4dda-8245-d20101d3af02"),
                            CountryId = new Guid("ec3aeb0e-d910-495c-b154-369855ccd282"),
                            ISO = "lub"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("CityTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("861957ac-2cc8-484d-8acd-cd2aa92abf6b"),
                            CityId = new Guid("18a86eba-2908-4327-806f-396e9161d579"),
                            Language = "uk",
                            Name = "Вінниця"
                        },
                        new
                        {
                            Id = new Guid("dbd4987f-e404-4f98-9cf6-46e20bbc2395"),
                            CityId = new Guid("f991045e-e23b-4053-b2b0-422ce27b3ded"),
                            Language = "uk",
                            Name = "Дніпро"
                        },
                        new
                        {
                            Id = new Guid("9a6af493-7f72-4e8f-adab-2b8e67e73a11"),
                            CityId = new Guid("4ea4da5d-d313-407d-81c3-3f9f359736ad"),
                            Language = "uk",
                            Name = "Житомир"
                        },
                        new
                        {
                            Id = new Guid("005adee1-0422-4644-9ea2-57828ca98888"),
                            CityId = new Guid("e1d04711-4591-4798-919c-6de245f94588"),
                            Language = "uk",
                            Name = "Запоріжжя"
                        },
                        new
                        {
                            Id = new Guid("cef7d83f-fb92-4d77-866e-a16c0c0cfb87"),
                            CityId = new Guid("f349e5f9-2844-473f-be5a-cae7edd083e2"),
                            Language = "uk",
                            Name = "Івано-Франківськ"
                        },
                        new
                        {
                            Id = new Guid("2cbc1e81-f01a-43be-8faa-a24deac016ed"),
                            CityId = new Guid("e90f3a93-b6f2-4b48-8665-2680d69608af"),
                            Language = "uk",
                            Name = "Київ"
                        },
                        new
                        {
                            Id = new Guid("df90c953-5001-4699-a108-cad5709b95d1"),
                            CityId = new Guid("bb0a1fd9-f58d-4ddb-a794-a622f2e16bdf"),
                            Language = "uk",
                            Name = "Кропивницький"
                        },
                        new
                        {
                            Id = new Guid("4890b141-1f30-4646-837b-f8eb126d74a4"),
                            CityId = new Guid("7fbf73bd-03ac-4793-adb0-3b1d0f1eff7e"),
                            Language = "uk",
                            Name = "Луцьк"
                        },
                        new
                        {
                            Id = new Guid("bade3b9f-a6f9-422f-b6c8-b53245708d70"),
                            CityId = new Guid("5da9f44a-951e-4671-aba4-b181db923151"),
                            Language = "uk",
                            Name = "Львів"
                        },
                        new
                        {
                            Id = new Guid("f0cfa019-6dcd-4391-af84-ed8326310794"),
                            CityId = new Guid("030eae67-d378-45b9-a756-820ee2568af8"),
                            Language = "uk",
                            Name = "Миколаїв"
                        },
                        new
                        {
                            Id = new Guid("b6a47ffe-46da-4449-a4aa-88a51b2cd703"),
                            CityId = new Guid("83507f9c-b7f8-439c-933c-ec2e4d41f337"),
                            Language = "uk",
                            Name = "Одеса"
                        },
                        new
                        {
                            Id = new Guid("65658e3d-7689-41d2-977f-6a286671e425"),
                            CityId = new Guid("332d295b-16b9-4c6d-abab-3d15c1af977b"),
                            Language = "uk",
                            Name = "Полтава"
                        },
                        new
                        {
                            Id = new Guid("a579f2f2-0d69-45ef-9a3a-c9353004dd01"),
                            CityId = new Guid("79d2325e-0b50-4ac1-b5bf-80f9bc870553"),
                            Language = "uk",
                            Name = "Рівне"
                        },
                        new
                        {
                            Id = new Guid("86624080-9450-4e0e-ad05-cb50007dda02"),
                            CityId = new Guid("60fb72f4-4da2-46b1-8d2c-daeeaff4c0cd"),
                            Language = "uk",
                            Name = "Суми"
                        },
                        new
                        {
                            Id = new Guid("1a15562b-3371-419f-8eb7-6d68c21b21fe"),
                            CityId = new Guid("daaacecc-cbf9-44fe-a7e8-a067338ebe43"),
                            Language = "uk",
                            Name = "Тернопіль"
                        },
                        new
                        {
                            Id = new Guid("26ed51be-dbfb-4dfc-bdca-9d4a3a9f674a"),
                            CityId = new Guid("44af1b46-041c-4f39-b20f-ce031d8f6437"),
                            Language = "uk",
                            Name = "Ужгород"
                        },
                        new
                        {
                            Id = new Guid("ed866a62-ab33-4b92-b8c8-333fbb4b9ed0"),
                            CityId = new Guid("ee28fe11-9919-455b-b511-ea6e4581153a"),
                            Language = "uk",
                            Name = "Харків"
                        },
                        new
                        {
                            Id = new Guid("51f6a0fe-a9e8-41c9-b4f9-4f40be2c51d7"),
                            CityId = new Guid("0ad6fa9b-216f-4755-90b2-57bbdabb2ed7"),
                            Language = "uk",
                            Name = "Херсон"
                        },
                        new
                        {
                            Id = new Guid("892b72c5-feb7-426d-90ec-ba10e80d6712"),
                            CityId = new Guid("407e4df6-5517-413a-ad9d-39bcb137c836"),
                            Language = "uk",
                            Name = "Хмельницький"
                        },
                        new
                        {
                            Id = new Guid("0d57de55-c569-4fbb-bf43-2e076c7ea107"),
                            CityId = new Guid("edaeab1c-cf23-4288-bad2-4474a43db594"),
                            Language = "uk",
                            Name = "Черкаси"
                        },
                        new
                        {
                            Id = new Guid("68309beb-def6-42f3-bbd5-2905f33adb92"),
                            CityId = new Guid("d6776bbb-22f7-4822-a4d2-b94499e7caa4"),
                            Language = "uk",
                            Name = "Чернівці"
                        },
                        new
                        {
                            Id = new Guid("13ca4ac0-ac0c-4f6f-b297-1588be240855"),
                            CityId = new Guid("1069862e-6dd2-421c-960d-c0c73810c04a"),
                            Language = "uk",
                            Name = "Чернігів"
                        },
                        new
                        {
                            Id = new Guid("dcb6f5cc-e916-401b-8fcc-69d84432e2a1"),
                            CityId = new Guid("18a86eba-2908-4327-806f-396e9161d579"),
                            Language = "en",
                            Name = "Vinnytsia"
                        },
                        new
                        {
                            Id = new Guid("d29a8bf9-5cb4-4ce0-b79c-5f4840fb97e6"),
                            CityId = new Guid("f991045e-e23b-4053-b2b0-422ce27b3ded"),
                            Language = "en",
                            Name = "Dnipro"
                        },
                        new
                        {
                            Id = new Guid("f058a1b2-4920-4f82-9c8d-34c902695b1b"),
                            CityId = new Guid("4ea4da5d-d313-407d-81c3-3f9f359736ad"),
                            Language = "en",
                            Name = "Zhytomyr"
                        },
                        new
                        {
                            Id = new Guid("333b8fa6-647b-4fa6-a421-d6aecbfdd1f6"),
                            CityId = new Guid("e1d04711-4591-4798-919c-6de245f94588"),
                            Language = "en",
                            Name = "Zaporizhzhia"
                        },
                        new
                        {
                            Id = new Guid("f1431660-edd6-4f5b-a4b1-b55af0ae3bc2"),
                            CityId = new Guid("f349e5f9-2844-473f-be5a-cae7edd083e2"),
                            Language = "en",
                            Name = "Ivano-Frankivsk"
                        },
                        new
                        {
                            Id = new Guid("2829ca09-1251-403a-8066-434fec6df459"),
                            CityId = new Guid("e90f3a93-b6f2-4b48-8665-2680d69608af"),
                            Language = "en",
                            Name = "Kyiv"
                        },
                        new
                        {
                            Id = new Guid("e47bb7ca-675f-4f28-9d0c-767e6a8dc967"),
                            CityId = new Guid("bb0a1fd9-f58d-4ddb-a794-a622f2e16bdf"),
                            Language = "en",
                            Name = "Kropyvnytskyi"
                        },
                        new
                        {
                            Id = new Guid("80c63541-5485-4127-8cc5-7ac1f6d3385d"),
                            CityId = new Guid("7fbf73bd-03ac-4793-adb0-3b1d0f1eff7e"),
                            Language = "en",
                            Name = "Lutsk"
                        },
                        new
                        {
                            Id = new Guid("e6aaf411-7f5d-4789-9d3c-3af889a8b0b2"),
                            CityId = new Guid("5da9f44a-951e-4671-aba4-b181db923151"),
                            Language = "en",
                            Name = "Lviv"
                        },
                        new
                        {
                            Id = new Guid("c6b9f262-4db6-4d69-b412-1abef0c51c0d"),
                            CityId = new Guid("030eae67-d378-45b9-a756-820ee2568af8"),
                            Language = "en",
                            Name = "Mykolaiv"
                        },
                        new
                        {
                            Id = new Guid("20cf1ea8-309b-4a49-88e5-53144c24972b"),
                            CityId = new Guid("83507f9c-b7f8-439c-933c-ec2e4d41f337"),
                            Language = "en",
                            Name = "Odesa"
                        },
                        new
                        {
                            Id = new Guid("c8220ba1-f0a4-479f-bd10-eae6f7681abc"),
                            CityId = new Guid("332d295b-16b9-4c6d-abab-3d15c1af977b"),
                            Language = "en",
                            Name = "Poltava"
                        },
                        new
                        {
                            Id = new Guid("7f949d50-dd18-4b34-807e-e80e703036e2"),
                            CityId = new Guid("79d2325e-0b50-4ac1-b5bf-80f9bc870553"),
                            Language = "en",
                            Name = "Rivne"
                        },
                        new
                        {
                            Id = new Guid("684b255f-ce87-4c5d-909c-3436ce410fa6"),
                            CityId = new Guid("60fb72f4-4da2-46b1-8d2c-daeeaff4c0cd"),
                            Language = "en",
                            Name = "Sumy"
                        },
                        new
                        {
                            Id = new Guid("f1517f2c-ec53-4868-a9cd-9fbf2e1ac990"),
                            CityId = new Guid("daaacecc-cbf9-44fe-a7e8-a067338ebe43"),
                            Language = "en",
                            Name = "Ternopil"
                        },
                        new
                        {
                            Id = new Guid("2fb76ca0-d507-44f8-bc8c-f5c89049fc2a"),
                            CityId = new Guid("44af1b46-041c-4f39-b20f-ce031d8f6437"),
                            Language = "en",
                            Name = "Uzhhorod"
                        },
                        new
                        {
                            Id = new Guid("0832de0c-99a3-491e-a8e1-a6afcf61acda"),
                            CityId = new Guid("ee28fe11-9919-455b-b511-ea6e4581153a"),
                            Language = "en",
                            Name = "Kharkiv"
                        },
                        new
                        {
                            Id = new Guid("9e4b6d01-444c-4469-8cd5-dd17007c76f3"),
                            CityId = new Guid("0ad6fa9b-216f-4755-90b2-57bbdabb2ed7"),
                            Language = "en",
                            Name = "Kherson"
                        },
                        new
                        {
                            Id = new Guid("c4cffa04-a7a1-4dfc-80b8-177e81fee4cd"),
                            CityId = new Guid("407e4df6-5517-413a-ad9d-39bcb137c836"),
                            Language = "en",
                            Name = "Khmelnytskyi"
                        },
                        new
                        {
                            Id = new Guid("40e75725-56fb-48f8-9ffd-44b1e8c3cf56"),
                            CityId = new Guid("edaeab1c-cf23-4288-bad2-4474a43db594"),
                            Language = "en",
                            Name = "Cherkasy"
                        },
                        new
                        {
                            Id = new Guid("aa326696-d6f8-4689-a917-d02abf84c584"),
                            CityId = new Guid("d6776bbb-22f7-4822-a4d2-b94499e7caa4"),
                            Language = "en",
                            Name = "Chernivtsi"
                        },
                        new
                        {
                            Id = new Guid("8ac88379-926e-4365-a6c5-330bc506b6ae"),
                            CityId = new Guid("1069862e-6dd2-421c-960d-c0c73810c04a"),
                            Language = "en",
                            Name = "Chernihiv"
                        },
                        new
                        {
                            Id = new Guid("7afaaa1b-d48f-4d20-9f9a-b7c36ea430a9"),
                            CityId = new Guid("f0be17bc-fff8-4a54-af47-fbbc593b8e0f"),
                            Language = "uk",
                            Name = "Варшава"
                        },
                        new
                        {
                            Id = new Guid("6c34b499-0fbe-4d6e-9118-0885a173819b"),
                            CityId = new Guid("57cdd863-da28-4dda-8245-d20101d3af02"),
                            Language = "uk",
                            Name = "Люблін"
                        },
                        new
                        {
                            Id = new Guid("6a0fad70-05bd-4cb5-b47a-12252ffbb998"),
                            CityId = new Guid("f0be17bc-fff8-4a54-af47-fbbc593b8e0f"),
                            Language = "en",
                            Name = "Varshava"
                        },
                        new
                        {
                            Id = new Guid("af51b50d-fbc0-468a-a6d0-54f8dd3fd8e3"),
                            CityId = new Guid("57cdd863-da28-4dda-8245-d20101d3af02"),
                            Language = "en",
                            Name = "Lublin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c9187969-5422-4f2c-b8ea-bf07c789dfdd"),
                            ISO = "uk"
                        },
                        new
                        {
                            Id = new Guid("ec3aeb0e-d910-495c-b154-369855ccd282"),
                            ISO = "pl"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CountryTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bb457951-260b-433d-9bcb-7a64e9646014"),
                            CountryId = new Guid("c9187969-5422-4f2c-b8ea-bf07c789dfdd"),
                            Language = "en",
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("e8850a23-8a1f-4715-9aa3-b0b497b73cb0"),
                            CountryId = new Guid("c9187969-5422-4f2c-b8ea-bf07c789dfdd"),
                            Language = "uk",
                            Name = "Україна"
                        },
                        new
                        {
                            Id = new Guid("892e9bda-569c-4224-810e-ad042b36c09d"),
                            CountryId = new Guid("ec3aeb0e-d910-495c-b154-369855ccd282"),
                            Language = "en",
                            Name = "Poland"
                        },
                        new
                        {
                            Id = new Guid("2bf88a05-b696-4a3a-8318-9a068a341a4e"),
                            CountryId = new Guid("ec3aeb0e-d910-495c-b154-369855ccd282"),
                            Language = "uk",
                            Name = "Польша"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VolunteerApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VolunteerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VolunteerUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VolunteerUserId", "VolunteerApplicationId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ProfilePictures");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("41a7b2c1-5371-4ed5-9cd7-56fa5215b88c"),
                            Title = "medicine"
                        },
                        new
                        {
                            Id = new Guid("8b998d04-ac45-4b06-bf76-e09fde65eb8e"),
                            Title = "cooking"
                        },
                        new
                        {
                            Id = new Guid("3288f37c-c2f8-48c4-addf-aaf56cdbd1b7"),
                            Title = "building"
                        },
                        new
                        {
                            Id = new Guid("390d6ee9-840a-49d2-be4a-c9252c71fdd6"),
                            Title = "psychology"
                        });
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f605627c-d398-442e-9fe4-9b3ff4601f19"),
                            Language = "en",
                            Name = "medicine",
                            SkillId = new Guid("41a7b2c1-5371-4ed5-9cd7-56fa5215b88c")
                        },
                        new
                        {
                            Id = new Guid("2ad652e1-d381-4e2b-a4e0-ebce9d81094e"),
                            Language = "uk",
                            Name = "медицина",
                            SkillId = new Guid("41a7b2c1-5371-4ed5-9cd7-56fa5215b88c")
                        },
                        new
                        {
                            Id = new Guid("7853e187-b6df-4a23-aaac-6639b6f30050"),
                            Language = "en",
                            Name = "cooking",
                            SkillId = new Guid("8b998d04-ac45-4b06-bf76-e09fde65eb8e")
                        },
                        new
                        {
                            Id = new Guid("e9f9d100-e4a6-44b9-afd3-9d247e58eb24"),
                            Language = "uk",
                            Name = "кулінарія",
                            SkillId = new Guid("8b998d04-ac45-4b06-bf76-e09fde65eb8e")
                        },
                        new
                        {
                            Id = new Guid("1686cffb-cc02-429d-85c0-641581f37535"),
                            Language = "en",
                            Name = "building",
                            SkillId = new Guid("3288f37c-c2f8-48c4-addf-aaf56cdbd1b7")
                        },
                        new
                        {
                            Id = new Guid("f6bb3a9f-56ad-4f32-acae-d5f56d4050e8"),
                            Language = "uk",
                            Name = "будівництво",
                            SkillId = new Guid("3288f37c-c2f8-48c4-addf-aaf56cdbd1b7")
                        },
                        new
                        {
                            Id = new Guid("55bda4d9-d072-4793-943d-d0e49c8653f5"),
                            Language = "en",
                            Name = "psychology",
                            SkillId = new Guid("390d6ee9-840a-49d2-be4a-c9252c71fdd6")
                        },
                        new
                        {
                            Id = new Guid("e579ee57-c559-4f55-ae16-44f0d1a20c42"),
                            Language = "uk",
                            Name = "психологія",
                            SkillId = new Guid("390d6ee9-840a-49d2-be4a-c9252c71fdd6")
                        });
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f50ff846-3f58-48b7-bfc8-6e1ea35c0544"),
                            CityId = new Guid("18a86eba-2908-4327-806f-396e9161d579"),
                            DateOfBirth = new DateTime(2023, 4, 26, 20, 25, 7, 506, DateTimeKind.Local).AddTicks(9456),
                            FirstName = "the first",
                            LastName = "admin",
                            Login = "ourfirstadmin",
                            Password = "Rk/ryiBNbnHx+s9i1IveCNNw4axYPQHm4T1eratfQlg=",
                            Phone = "+11111111111",
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Document")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DocumentFormat")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("NULL");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("VolunteerApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VolunteerUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "ApplicationId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("VolunteerUserId", "VolunteerApplicationId");

                    b.ToTable("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("CityTranslations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("CountryTranslations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.HasOne("DAL.Entities.Volunteer", "Volunteer")
                        .WithMany()
                        .HasForeignKey("VolunteerUserId", "VolunteerApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithOne("ProfilePicture")
                        .HasForeignKey("DAL.Entities.ProfilePicture", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("SkillTranslations")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Volunteers")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Volunteers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Volunteer", null)
                        .WithMany("Volunteers")
                        .HasForeignKey("VolunteerUserId", "VolunteerApplicationId");

                    b.Navigation("Application");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Navigation("CityTranslations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("CountryTranslations");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Navigation("SkillTranslations");

                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ProfilePicture");

                    b.Navigation("UserSkills");

                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Navigation("Volunteers");
                });
#pragma warning restore 612, 618
        }
    }
}
