// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(VolunteerNetServerDBContext))]
    [Migration("20230423203600_TableVolunteer")]
    partial class TableVolunteer
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<int>("RequiredNumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("de33dcf8-277d-4e69-b895-ea86abb77ac1"),
                            CountryId = new Guid("14cd0261-199c-4c17-81c0-a2e1abc3be0d"),
                            ISO = "vi"
                        },
                        new
                        {
                            Id = new Guid("125334b7-3004-4199-8861-a4ff6742f88c"),
                            CountryId = new Guid("14cd0261-199c-4c17-81c0-a2e1abc3be0d"),
                            ISO = "dn"
                        },
                        new
                        {
                            Id = new Guid("111e3eb2-18e4-4b55-a8f0-fb3450f38059"),
                            CountryId = new Guid("14cd0261-199c-4c17-81c0-a2e1abc3be0d"),
                            ISO = "zhy"
                        },
                        new
                        {
                            Id = new Guid("ce35730d-6273-48dc-83f0-801247b8a96c"),
                            CountryId = new Guid("14cd0261-199c-4c17-81c0-a2e1abc3be0d"),
                            ISO = "zp"
                        },
                        new
                        {
                            Id = new Guid("6a8c7284-e6cd-4b8a-ac93-24c01ec42448"),
                            CountryId = new Guid("14cd0261-199c-4c17-81c0-a2e1abc3be0d"),
                            ISO = "if"
                        },
                        new
                        {
                            Id = new Guid("a8a6d684-68a0-4873-aebf-fddfafe85063"),
                            CountryId = new Guid("14cd0261-199c-4c17-81c0-a2e1abc3be0d"),
                            ISO = "ky"
                        },
                        new
                        {
                            Id = new Guid("8dbcd7f4-7796-4b68-a6ef-2bcfa4e3d92c"),
                            CountryId = new Guid("14cd0261-199c-4c17-81c0-a2e1abc3be0d"),
                            ISO = "kr"
                        },
                        new
                        {
                            Id = new Guid("bf3604f6-620a-415e-99c3-fe9b424187d8"),
                            CountryId = new Guid("14cd0261-199c-4c17-81c0-a2e1abc3be0d"),
                            ISO = "lut"
                        },
                        new
                        {
                            Id = new Guid("7cd48e22-01f3-4cd4-8397-c91b61bef4de"),
                            CountryId = new Guid("14cd0261-199c-4c17-81c0-a2e1abc3be0d"),
                            ISO = "lv"
                        },
                        new
                        {
                            Id = new Guid("90077437-ab7d-4567-acf1-1def1ecc1192"),
                            CountryId = new Guid("14cd0261-199c-4c17-81c0-a2e1abc3be0d"),
                            ISO = "my"
                        },
                        new
                        {
                            Id = new Guid("4f9ea7c9-ca7c-4e04-a269-e0ac38d07927"),
                            CountryId = new Guid("14cd0261-199c-4c17-81c0-a2e1abc3be0d"),
                            ISO = "od"
                        },
                        new
                        {
                            Id = new Guid("167cef3f-8dd7-4007-8906-cdd153e39d25"),
                            CountryId = new Guid("14cd0261-199c-4c17-81c0-a2e1abc3be0d"),
                            ISO = "pol"
                        },
                        new
                        {
                            Id = new Guid("8eace09c-e5cd-482b-ac45-ce38c159ed9e"),
                            CountryId = new Guid("14cd0261-199c-4c17-81c0-a2e1abc3be0d"),
                            ISO = "ri"
                        },
                        new
                        {
                            Id = new Guid("baaaf1e0-435e-4381-9584-e002824b74a5"),
                            CountryId = new Guid("14cd0261-199c-4c17-81c0-a2e1abc3be0d"),
                            ISO = "su"
                        },
                        new
                        {
                            Id = new Guid("80dd7b10-32fe-4cb0-9209-43462c0b5ec7"),
                            CountryId = new Guid("14cd0261-199c-4c17-81c0-a2e1abc3be0d"),
                            ISO = "ter"
                        },
                        new
                        {
                            Id = new Guid("fe85c02e-2f2d-4ce8-b1ba-921345ed1080"),
                            CountryId = new Guid("14cd0261-199c-4c17-81c0-a2e1abc3be0d"),
                            ISO = "uzh"
                        },
                        new
                        {
                            Id = new Guid("188a308f-43e8-4130-83f9-013e5d4ef666"),
                            CountryId = new Guid("14cd0261-199c-4c17-81c0-a2e1abc3be0d"),
                            ISO = "khar"
                        },
                        new
                        {
                            Id = new Guid("57c27557-9d99-451e-8699-47e5c469b04c"),
                            CountryId = new Guid("14cd0261-199c-4c17-81c0-a2e1abc3be0d"),
                            ISO = "kher"
                        },
                        new
                        {
                            Id = new Guid("64adddf0-f850-4dab-ad9d-2f387c939c94"),
                            CountryId = new Guid("14cd0261-199c-4c17-81c0-a2e1abc3be0d"),
                            ISO = "khm"
                        },
                        new
                        {
                            Id = new Guid("ae8117ef-3fad-4938-a735-260191db959b"),
                            CountryId = new Guid("14cd0261-199c-4c17-81c0-a2e1abc3be0d"),
                            ISO = "chk"
                        },
                        new
                        {
                            Id = new Guid("9eaf07f5-e4ce-43d0-81c4-39b5d83a0227"),
                            CountryId = new Guid("14cd0261-199c-4c17-81c0-a2e1abc3be0d"),
                            ISO = "chv"
                        },
                        new
                        {
                            Id = new Guid("8c294b3b-7646-4b2d-a160-37a69d7879f9"),
                            CountryId = new Guid("14cd0261-199c-4c17-81c0-a2e1abc3be0d"),
                            ISO = "chh"
                        },
                        new
                        {
                            Id = new Guid("c426e9c7-efe9-4306-8dbc-82dd8cf606e7"),
                            CountryId = new Guid("8fd9a232-b434-46b7-a852-8e3b869e3f87"),
                            ISO = "var"
                        },
                        new
                        {
                            Id = new Guid("642ce6c6-da4f-4ed3-bb77-1107f65f5a1e"),
                            CountryId = new Guid("8fd9a232-b434-46b7-a852-8e3b869e3f87"),
                            ISO = "lub"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("CityTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b7c73312-6fd2-4109-904d-9edcfbf3c06c"),
                            CityId = new Guid("de33dcf8-277d-4e69-b895-ea86abb77ac1"),
                            Language = "uk",
                            Name = "Вінниця"
                        },
                        new
                        {
                            Id = new Guid("b52e67eb-f04d-4d59-bf21-a73fdf87d2be"),
                            CityId = new Guid("125334b7-3004-4199-8861-a4ff6742f88c"),
                            Language = "uk",
                            Name = "Дніпро"
                        },
                        new
                        {
                            Id = new Guid("f62714c9-ab76-41fc-b25b-883d455b277f"),
                            CityId = new Guid("111e3eb2-18e4-4b55-a8f0-fb3450f38059"),
                            Language = "uk",
                            Name = "Житомир"
                        },
                        new
                        {
                            Id = new Guid("b200bb8f-046e-45ec-9abc-8728dab9063f"),
                            CityId = new Guid("ce35730d-6273-48dc-83f0-801247b8a96c"),
                            Language = "uk",
                            Name = "Запоріжжя"
                        },
                        new
                        {
                            Id = new Guid("e7b59d1e-4037-484a-b64f-c4eb82bf0f03"),
                            CityId = new Guid("6a8c7284-e6cd-4b8a-ac93-24c01ec42448"),
                            Language = "uk",
                            Name = "Івано-Франківськ"
                        },
                        new
                        {
                            Id = new Guid("a97ec0cf-5b90-474b-b03c-d7092fd0412f"),
                            CityId = new Guid("a8a6d684-68a0-4873-aebf-fddfafe85063"),
                            Language = "uk",
                            Name = "Київ"
                        },
                        new
                        {
                            Id = new Guid("bf04c0a6-0084-4a39-bd4c-06fa83df3dd2"),
                            CityId = new Guid("8dbcd7f4-7796-4b68-a6ef-2bcfa4e3d92c"),
                            Language = "uk",
                            Name = "Кропивницький"
                        },
                        new
                        {
                            Id = new Guid("fa40fdb9-c000-4041-825e-e3b8048136c7"),
                            CityId = new Guid("bf3604f6-620a-415e-99c3-fe9b424187d8"),
                            Language = "uk",
                            Name = "Луцьк"
                        },
                        new
                        {
                            Id = new Guid("7ab3a048-31d0-4785-993f-f0eead4a13c9"),
                            CityId = new Guid("7cd48e22-01f3-4cd4-8397-c91b61bef4de"),
                            Language = "uk",
                            Name = "Львів"
                        },
                        new
                        {
                            Id = new Guid("0d5f566a-9bfc-43ec-8402-a973cb248ec7"),
                            CityId = new Guid("90077437-ab7d-4567-acf1-1def1ecc1192"),
                            Language = "uk",
                            Name = "Миколаїв"
                        },
                        new
                        {
                            Id = new Guid("e044d294-97c7-4e07-8ab6-bf59cc6ebed7"),
                            CityId = new Guid("4f9ea7c9-ca7c-4e04-a269-e0ac38d07927"),
                            Language = "uk",
                            Name = "Одеса"
                        },
                        new
                        {
                            Id = new Guid("48c92493-2e3a-416b-9e24-14375d07b57d"),
                            CityId = new Guid("167cef3f-8dd7-4007-8906-cdd153e39d25"),
                            Language = "uk",
                            Name = "Полтава"
                        },
                        new
                        {
                            Id = new Guid("d6de433a-ecdd-47ed-ac4a-8c2ef5835acb"),
                            CityId = new Guid("8eace09c-e5cd-482b-ac45-ce38c159ed9e"),
                            Language = "uk",
                            Name = "Рівне"
                        },
                        new
                        {
                            Id = new Guid("cff5fd84-8408-48ab-b4ee-43923ca86585"),
                            CityId = new Guid("baaaf1e0-435e-4381-9584-e002824b74a5"),
                            Language = "uk",
                            Name = "Суми"
                        },
                        new
                        {
                            Id = new Guid("0fb31d7a-87f2-47c4-b8f6-3c2f2930a012"),
                            CityId = new Guid("80dd7b10-32fe-4cb0-9209-43462c0b5ec7"),
                            Language = "uk",
                            Name = "Тернопіль"
                        },
                        new
                        {
                            Id = new Guid("8c3076fb-04e8-4215-97e4-6d8a1f0b08e1"),
                            CityId = new Guid("fe85c02e-2f2d-4ce8-b1ba-921345ed1080"),
                            Language = "uk",
                            Name = "Ужгород"
                        },
                        new
                        {
                            Id = new Guid("2d888a2b-37fd-4ed5-96c1-d284fa1fcfd5"),
                            CityId = new Guid("188a308f-43e8-4130-83f9-013e5d4ef666"),
                            Language = "uk",
                            Name = "Харків"
                        },
                        new
                        {
                            Id = new Guid("941235c4-c784-4ee5-a549-107f424f0274"),
                            CityId = new Guid("57c27557-9d99-451e-8699-47e5c469b04c"),
                            Language = "uk",
                            Name = "Херсон"
                        },
                        new
                        {
                            Id = new Guid("77ff1dac-0a10-4228-b768-405d85a230ab"),
                            CityId = new Guid("64adddf0-f850-4dab-ad9d-2f387c939c94"),
                            Language = "uk",
                            Name = "Хмельницький"
                        },
                        new
                        {
                            Id = new Guid("40e01046-192b-464f-8036-7314ba69c3ad"),
                            CityId = new Guid("ae8117ef-3fad-4938-a735-260191db959b"),
                            Language = "uk",
                            Name = "Черкаси"
                        },
                        new
                        {
                            Id = new Guid("93e970e4-d2c5-4ac7-9844-1d85bf77d482"),
                            CityId = new Guid("9eaf07f5-e4ce-43d0-81c4-39b5d83a0227"),
                            Language = "uk",
                            Name = "Чернівці"
                        },
                        new
                        {
                            Id = new Guid("5ba2ce87-6077-40c7-9937-775266a1dd60"),
                            CityId = new Guid("8c294b3b-7646-4b2d-a160-37a69d7879f9"),
                            Language = "uk",
                            Name = "Чернігів"
                        },
                        new
                        {
                            Id = new Guid("d678e82e-e848-4d45-b699-12c8c719f26f"),
                            CityId = new Guid("de33dcf8-277d-4e69-b895-ea86abb77ac1"),
                            Language = "en",
                            Name = "Vinnytsia"
                        },
                        new
                        {
                            Id = new Guid("e0b43934-0453-4b55-add3-ae35e7b3ca63"),
                            CityId = new Guid("125334b7-3004-4199-8861-a4ff6742f88c"),
                            Language = "en",
                            Name = "Dnipro"
                        },
                        new
                        {
                            Id = new Guid("f2aadff9-8185-4008-8c3b-d7d37ef947a2"),
                            CityId = new Guid("111e3eb2-18e4-4b55-a8f0-fb3450f38059"),
                            Language = "en",
                            Name = "Zhytomyr"
                        },
                        new
                        {
                            Id = new Guid("d10ae331-e325-49ea-8ae6-875051dcef18"),
                            CityId = new Guid("ce35730d-6273-48dc-83f0-801247b8a96c"),
                            Language = "en",
                            Name = "Zaporizhzhia"
                        },
                        new
                        {
                            Id = new Guid("1430de26-7003-4bd6-b622-aed6e68c6bf6"),
                            CityId = new Guid("6a8c7284-e6cd-4b8a-ac93-24c01ec42448"),
                            Language = "en",
                            Name = "Ivano-Frankivsk"
                        },
                        new
                        {
                            Id = new Guid("5e5cb045-f916-4e54-ad24-09f692a1864f"),
                            CityId = new Guid("a8a6d684-68a0-4873-aebf-fddfafe85063"),
                            Language = "en",
                            Name = "Kyiv"
                        },
                        new
                        {
                            Id = new Guid("0f056bd6-ec29-4da1-902b-e1d5c11505cf"),
                            CityId = new Guid("8dbcd7f4-7796-4b68-a6ef-2bcfa4e3d92c"),
                            Language = "en",
                            Name = "Kropyvnytskyi"
                        },
                        new
                        {
                            Id = new Guid("4aae64a0-6690-4dd4-a68c-3c4237e7489e"),
                            CityId = new Guid("bf3604f6-620a-415e-99c3-fe9b424187d8"),
                            Language = "en",
                            Name = "Lutsk"
                        },
                        new
                        {
                            Id = new Guid("f2130334-6aac-45d0-bcfa-5d1fde843db1"),
                            CityId = new Guid("7cd48e22-01f3-4cd4-8397-c91b61bef4de"),
                            Language = "en",
                            Name = "Lviv"
                        },
                        new
                        {
                            Id = new Guid("2f0510de-c75a-4dec-a92c-77a6780ddc58"),
                            CityId = new Guid("90077437-ab7d-4567-acf1-1def1ecc1192"),
                            Language = "en",
                            Name = "Mykolaiv"
                        },
                        new
                        {
                            Id = new Guid("0ce32d45-f1ea-4c39-b73f-2a06972a3f27"),
                            CityId = new Guid("4f9ea7c9-ca7c-4e04-a269-e0ac38d07927"),
                            Language = "en",
                            Name = "Odesa"
                        },
                        new
                        {
                            Id = new Guid("2e3b84eb-5ac2-4f29-b160-7b8415ce61e0"),
                            CityId = new Guid("167cef3f-8dd7-4007-8906-cdd153e39d25"),
                            Language = "en",
                            Name = "Poltava"
                        },
                        new
                        {
                            Id = new Guid("d7736349-9a24-4925-bee2-1e6ac938eb22"),
                            CityId = new Guid("8eace09c-e5cd-482b-ac45-ce38c159ed9e"),
                            Language = "en",
                            Name = "Rivne"
                        },
                        new
                        {
                            Id = new Guid("86b5d89e-78b6-4193-b4a8-d31f285a34e3"),
                            CityId = new Guid("baaaf1e0-435e-4381-9584-e002824b74a5"),
                            Language = "en",
                            Name = "Sumy"
                        },
                        new
                        {
                            Id = new Guid("6f64ec4a-f02f-4098-b80d-a8e372ab98c5"),
                            CityId = new Guid("80dd7b10-32fe-4cb0-9209-43462c0b5ec7"),
                            Language = "en",
                            Name = "Ternopil"
                        },
                        new
                        {
                            Id = new Guid("a97d53db-62c7-4c78-b892-afc64316c404"),
                            CityId = new Guid("fe85c02e-2f2d-4ce8-b1ba-921345ed1080"),
                            Language = "en",
                            Name = "Uzhhorod"
                        },
                        new
                        {
                            Id = new Guid("81450f5c-e41d-4df7-b9e5-6b0cee1affb5"),
                            CityId = new Guid("188a308f-43e8-4130-83f9-013e5d4ef666"),
                            Language = "en",
                            Name = "Kharkiv"
                        },
                        new
                        {
                            Id = new Guid("da9f8690-f02a-4ab2-a793-f4b99d44dadc"),
                            CityId = new Guid("57c27557-9d99-451e-8699-47e5c469b04c"),
                            Language = "en",
                            Name = "Kherson"
                        },
                        new
                        {
                            Id = new Guid("e492ec0f-2f2f-4cee-8c14-02ddd77aa59f"),
                            CityId = new Guid("64adddf0-f850-4dab-ad9d-2f387c939c94"),
                            Language = "en",
                            Name = "Khmelnytskyi"
                        },
                        new
                        {
                            Id = new Guid("aa96e768-f9a0-4b78-bdc2-63b7c0bda781"),
                            CityId = new Guid("ae8117ef-3fad-4938-a735-260191db959b"),
                            Language = "en",
                            Name = "Cherkasy"
                        },
                        new
                        {
                            Id = new Guid("ebf1746f-0798-4a9b-8081-0d0a1e9a75f7"),
                            CityId = new Guid("9eaf07f5-e4ce-43d0-81c4-39b5d83a0227"),
                            Language = "en",
                            Name = "Chernivtsi"
                        },
                        new
                        {
                            Id = new Guid("3cb3a2a5-b2f2-43eb-b054-a36707cc3837"),
                            CityId = new Guid("8c294b3b-7646-4b2d-a160-37a69d7879f9"),
                            Language = "en",
                            Name = "Chernihiv"
                        },
                        new
                        {
                            Id = new Guid("7df0b79c-24a4-40ba-90a9-b963bed125d0"),
                            CityId = new Guid("c426e9c7-efe9-4306-8dbc-82dd8cf606e7"),
                            Language = "uk",
                            Name = "Варшава"
                        },
                        new
                        {
                            Id = new Guid("515e65f8-cb9c-4d7f-9c72-45f6c6d8fc77"),
                            CityId = new Guid("642ce6c6-da4f-4ed3-bb77-1107f65f5a1e"),
                            Language = "uk",
                            Name = "Люблін"
                        },
                        new
                        {
                            Id = new Guid("4aa01796-e772-4c1e-82e6-fa34065b44cf"),
                            CityId = new Guid("c426e9c7-efe9-4306-8dbc-82dd8cf606e7"),
                            Language = "en",
                            Name = "Varshava"
                        },
                        new
                        {
                            Id = new Guid("654dbb63-185e-4947-9ae7-3bcf376979f0"),
                            CityId = new Guid("642ce6c6-da4f-4ed3-bb77-1107f65f5a1e"),
                            Language = "en",
                            Name = "Lublin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("14cd0261-199c-4c17-81c0-a2e1abc3be0d"),
                            ISO = "uk"
                        },
                        new
                        {
                            Id = new Guid("8fd9a232-b434-46b7-a852-8e3b869e3f87"),
                            ISO = "pl"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CountryTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("661e84d5-7916-41a3-9ea5-7677d6058e17"),
                            CountryId = new Guid("14cd0261-199c-4c17-81c0-a2e1abc3be0d"),
                            Language = "en",
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("9e056ab7-1ee0-4cc2-a0d6-8ddfecb608dc"),
                            CountryId = new Guid("14cd0261-199c-4c17-81c0-a2e1abc3be0d"),
                            Language = "uk",
                            Name = "Україна"
                        },
                        new
                        {
                            Id = new Guid("a8e4d7c8-e489-46bb-9430-40c32bc18369"),
                            CountryId = new Guid("8fd9a232-b434-46b7-a852-8e3b869e3f87"),
                            Language = "en",
                            Name = "Poland"
                        },
                        new
                        {
                            Id = new Guid("d0102965-bbd8-4735-ab5a-b4146ae84fea"),
                            CountryId = new Guid("8fd9a232-b434-46b7-a852-8e3b869e3f87"),
                            Language = "uk",
                            Name = "Польша"
                        });
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ProfilePictures");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f1ba4263-a060-413b-b59f-3c64827f5c97"),
                            Title = "medicine"
                        },
                        new
                        {
                            Id = new Guid("1b2e9b19-cec2-43c1-9bbd-4caab9b440ae"),
                            Title = "cook"
                        });
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8615ffa0-068b-421c-8a1e-e3dc479158bf"),
                            CityId = new Guid("de33dcf8-277d-4e69-b895-ea86abb77ac1"),
                            DateOfBirth = new DateTime(2023, 4, 23, 23, 36, 0, 105, DateTimeKind.Local).AddTicks(1452),
                            FirstName = "the first",
                            LastName = "admin",
                            Login = "ourfirstadmin",
                            Password = "Rk/ryiBNbnHx+s9i1IveCNNw4axYPQHm4T1eratfQlg=",
                            Phone = "+11111111111",
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Document")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DocumentFormat")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("NULL");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "ApplicationId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("CityTranslations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("CountryTranslations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithOne("ProfilePicture")
                        .HasForeignKey("DAL.Entities.ProfilePicture", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Volunteers")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Volunteers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Navigation("CityTranslations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("CountryTranslations");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ProfilePicture");

                    b.Navigation("UserSkills");

                    b.Navigation("Volunteers");
                });
#pragma warning restore 612, 618
        }
    }
}
