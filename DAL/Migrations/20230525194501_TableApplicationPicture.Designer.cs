// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(VolunteerNetServerDBContext))]
    [Migration("20230525194501_TableApplicationPicture")]
    partial class TableApplicationPicture
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("CurrentSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DateTimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimeStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<string>("OwnerCardName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequiredNumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<decimal?>("RequiredSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Document")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DocumentFormat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationDocuments");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationPicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationPictures");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationSkill", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("ApplicationSkills");
                });

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e279e8e5-93c1-4cd8-86ca-28e79b0830b1"),
                            Title = "health care"
                        },
                        new
                        {
                            Id = new Guid("6ba5d2c2-2fb6-4ef4-bda6-94df28f03169"),
                            Title = "education"
                        },
                        new
                        {
                            Id = new Guid("73405840-06c7-4169-ad1c-a7e68c67f1dc"),
                            Title = "sports and physical culture"
                        },
                        new
                        {
                            Id = new Guid("b1eb1bf2-06d0-4aa7-9599-6c7861d49bcc"),
                            Title = "culture and art"
                        },
                        new
                        {
                            Id = new Guid("7486617d-4d74-4187-b567-dfa86159ebe0"),
                            Title = "social programs"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CategoryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DescriptionCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("66004077-e002-4605-9c5a-3616a6b8a21c"),
                            CategoryId = new Guid("e279e8e5-93c1-4cd8-86ca-28e79b0830b1"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "health care"
                        },
                        new
                        {
                            Id = new Guid("94c1c6e0-e960-4956-a65f-13b9eb30082c"),
                            CategoryId = new Guid("e279e8e5-93c1-4cd8-86ca-28e79b0830b1"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "охорона здоров'я"
                        },
                        new
                        {
                            Id = new Guid("e5702365-fd30-494c-922b-107c3434a3fa"),
                            CategoryId = new Guid("6ba5d2c2-2fb6-4ef4-bda6-94df28f03169"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "education"
                        },
                        new
                        {
                            Id = new Guid("94ef0a2e-4835-42a2-8c58-5f435def10bc"),
                            CategoryId = new Guid("6ba5d2c2-2fb6-4ef4-bda6-94df28f03169"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "освіта"
                        },
                        new
                        {
                            Id = new Guid("25785996-28d3-4d03-972e-8861d81e949b"),
                            CategoryId = new Guid("73405840-06c7-4169-ad1c-a7e68c67f1dc"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "sport and physical culture"
                        },
                        new
                        {
                            Id = new Guid("69acc5f5-b7a5-4cb9-8d96-8d4c6a7e34e5"),
                            CategoryId = new Guid("73405840-06c7-4169-ad1c-a7e68c67f1dc"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "спорт та фізична культура"
                        },
                        new
                        {
                            Id = new Guid("012951da-a01f-428a-95de-982c91f292a5"),
                            CategoryId = new Guid("b1eb1bf2-06d0-4aa7-9599-6c7861d49bcc"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "culture and art"
                        },
                        new
                        {
                            Id = new Guid("181c9ab8-29be-45ef-9844-f8967c62895b"),
                            CategoryId = new Guid("b1eb1bf2-06d0-4aa7-9599-6c7861d49bcc"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "культура та мистецтво"
                        },
                        new
                        {
                            Id = new Guid("23e967a2-ea88-4c5d-acd8-03583beb3d8a"),
                            CategoryId = new Guid("7486617d-4d74-4187-b567-dfa86159ebe0"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "social programs"
                        },
                        new
                        {
                            Id = new Guid("340a9e95-f02e-49bc-bc23-de17c4c60b40"),
                            CategoryId = new Guid("7486617d-4d74-4187-b567-dfa86159ebe0"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "соціальні програми"
                        });
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5738bfef-0918-4cc7-b667-f07fb01773f6"),
                            CountryId = new Guid("73a58b0f-fec7-435e-a547-f7f59e260e0a"),
                            ISO = "vi"
                        },
                        new
                        {
                            Id = new Guid("e98303f4-5fe9-4047-823c-b8db96e54a40"),
                            CountryId = new Guid("73a58b0f-fec7-435e-a547-f7f59e260e0a"),
                            ISO = "dn"
                        },
                        new
                        {
                            Id = new Guid("36b5f355-fc4f-4ea0-9fc0-d6071b4d4122"),
                            CountryId = new Guid("73a58b0f-fec7-435e-a547-f7f59e260e0a"),
                            ISO = "zhy"
                        },
                        new
                        {
                            Id = new Guid("932a31d2-ae38-419a-8c47-6f02f81aa14b"),
                            CountryId = new Guid("73a58b0f-fec7-435e-a547-f7f59e260e0a"),
                            ISO = "zp"
                        },
                        new
                        {
                            Id = new Guid("e76dab51-bda2-4f4c-a556-3eb6aa2b092d"),
                            CountryId = new Guid("73a58b0f-fec7-435e-a547-f7f59e260e0a"),
                            ISO = "if"
                        },
                        new
                        {
                            Id = new Guid("41a4f995-6e36-4e71-8c59-87235b379f2a"),
                            CountryId = new Guid("73a58b0f-fec7-435e-a547-f7f59e260e0a"),
                            ISO = "ky"
                        },
                        new
                        {
                            Id = new Guid("d1376531-b118-411e-aaa1-6bd4b20ecd9a"),
                            CountryId = new Guid("73a58b0f-fec7-435e-a547-f7f59e260e0a"),
                            ISO = "kr"
                        },
                        new
                        {
                            Id = new Guid("d604c9a2-4168-467e-920a-c827919ebfc7"),
                            CountryId = new Guid("73a58b0f-fec7-435e-a547-f7f59e260e0a"),
                            ISO = "lut"
                        },
                        new
                        {
                            Id = new Guid("9019b793-227e-44b9-b300-64cc14e15c26"),
                            CountryId = new Guid("73a58b0f-fec7-435e-a547-f7f59e260e0a"),
                            ISO = "lv"
                        },
                        new
                        {
                            Id = new Guid("cb972141-1a48-4079-993d-bf9f3c14e01e"),
                            CountryId = new Guid("73a58b0f-fec7-435e-a547-f7f59e260e0a"),
                            ISO = "my"
                        },
                        new
                        {
                            Id = new Guid("7e96c1e2-0280-4641-8e62-c93b14be6276"),
                            CountryId = new Guid("73a58b0f-fec7-435e-a547-f7f59e260e0a"),
                            ISO = "od"
                        },
                        new
                        {
                            Id = new Guid("249367a5-add6-4f1c-a803-d55e45e8d4a6"),
                            CountryId = new Guid("73a58b0f-fec7-435e-a547-f7f59e260e0a"),
                            ISO = "pol"
                        },
                        new
                        {
                            Id = new Guid("4b0cbfb4-eaea-40ed-adf0-9bdb57168221"),
                            CountryId = new Guid("73a58b0f-fec7-435e-a547-f7f59e260e0a"),
                            ISO = "ri"
                        },
                        new
                        {
                            Id = new Guid("e064f96b-ef7f-4b5a-8cdd-c60cd020685f"),
                            CountryId = new Guid("73a58b0f-fec7-435e-a547-f7f59e260e0a"),
                            ISO = "su"
                        },
                        new
                        {
                            Id = new Guid("a1c3b944-151f-4a42-877c-92b663bcb748"),
                            CountryId = new Guid("73a58b0f-fec7-435e-a547-f7f59e260e0a"),
                            ISO = "ter"
                        },
                        new
                        {
                            Id = new Guid("b1ebcc5b-78ae-485c-9d1f-bba6e57aee31"),
                            CountryId = new Guid("73a58b0f-fec7-435e-a547-f7f59e260e0a"),
                            ISO = "uzh"
                        },
                        new
                        {
                            Id = new Guid("6e50a4de-65fb-4321-95d4-2f6eef3ab701"),
                            CountryId = new Guid("73a58b0f-fec7-435e-a547-f7f59e260e0a"),
                            ISO = "khar"
                        },
                        new
                        {
                            Id = new Guid("35e4c480-9cf5-4ec7-bff8-fb8d870203ef"),
                            CountryId = new Guid("73a58b0f-fec7-435e-a547-f7f59e260e0a"),
                            ISO = "kher"
                        },
                        new
                        {
                            Id = new Guid("a75777ab-9482-469e-8002-383671fd3365"),
                            CountryId = new Guid("73a58b0f-fec7-435e-a547-f7f59e260e0a"),
                            ISO = "khm"
                        },
                        new
                        {
                            Id = new Guid("e11ea064-7adb-4eed-a71d-434629a6fdd1"),
                            CountryId = new Guid("73a58b0f-fec7-435e-a547-f7f59e260e0a"),
                            ISO = "chk"
                        },
                        new
                        {
                            Id = new Guid("8757a185-287b-4cef-b085-9a62f36f0b64"),
                            CountryId = new Guid("73a58b0f-fec7-435e-a547-f7f59e260e0a"),
                            ISO = "chv"
                        },
                        new
                        {
                            Id = new Guid("5ab3e6d9-c715-4d83-a126-d31e55fc62f4"),
                            CountryId = new Guid("73a58b0f-fec7-435e-a547-f7f59e260e0a"),
                            ISO = "chh"
                        },
                        new
                        {
                            Id = new Guid("97ec3f0d-f4f0-4604-b75a-3854c8a41ad9"),
                            CountryId = new Guid("312b6f67-c531-40c3-a675-ec1bc9b7691f"),
                            ISO = "var"
                        },
                        new
                        {
                            Id = new Guid("d52852a1-db2b-4347-bbf3-3407a589ea5f"),
                            CountryId = new Guid("312b6f67-c531-40c3-a675-ec1bc9b7691f"),
                            ISO = "lub"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("CityTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("67a1a5c3-e493-44f0-9fcf-96b1ff243da4"),
                            CityId = new Guid("5738bfef-0918-4cc7-b667-f07fb01773f6"),
                            Language = "uk",
                            Name = "Вінниця"
                        },
                        new
                        {
                            Id = new Guid("94da7a9a-27ca-4dc7-8e53-40f04402a070"),
                            CityId = new Guid("e98303f4-5fe9-4047-823c-b8db96e54a40"),
                            Language = "uk",
                            Name = "Дніпро"
                        },
                        new
                        {
                            Id = new Guid("81da23bc-b504-40aa-beb1-f93cb19ec2a3"),
                            CityId = new Guid("36b5f355-fc4f-4ea0-9fc0-d6071b4d4122"),
                            Language = "uk",
                            Name = "Житомир"
                        },
                        new
                        {
                            Id = new Guid("4ec68777-8a20-47a6-b979-2fd2d2288979"),
                            CityId = new Guid("932a31d2-ae38-419a-8c47-6f02f81aa14b"),
                            Language = "uk",
                            Name = "Запоріжжя"
                        },
                        new
                        {
                            Id = new Guid("6772ce1b-7f87-4814-b296-fe4056c66212"),
                            CityId = new Guid("e76dab51-bda2-4f4c-a556-3eb6aa2b092d"),
                            Language = "uk",
                            Name = "Івано-Франківськ"
                        },
                        new
                        {
                            Id = new Guid("a442a2da-eda8-41e0-b271-f97d1952bb4f"),
                            CityId = new Guid("41a4f995-6e36-4e71-8c59-87235b379f2a"),
                            Language = "uk",
                            Name = "Київ"
                        },
                        new
                        {
                            Id = new Guid("ed6207eb-530e-4cfa-8a3a-32d9e4202285"),
                            CityId = new Guid("d1376531-b118-411e-aaa1-6bd4b20ecd9a"),
                            Language = "uk",
                            Name = "Кропивницький"
                        },
                        new
                        {
                            Id = new Guid("a9f8aeeb-08db-47b4-ba07-331700b1dfe4"),
                            CityId = new Guid("d604c9a2-4168-467e-920a-c827919ebfc7"),
                            Language = "uk",
                            Name = "Луцьк"
                        },
                        new
                        {
                            Id = new Guid("f2e91a2d-7c20-4d68-a9e5-2de15b657bfd"),
                            CityId = new Guid("9019b793-227e-44b9-b300-64cc14e15c26"),
                            Language = "uk",
                            Name = "Львів"
                        },
                        new
                        {
                            Id = new Guid("9b9cfae8-6db1-4d6d-9e7d-070a6fb9ac7a"),
                            CityId = new Guid("cb972141-1a48-4079-993d-bf9f3c14e01e"),
                            Language = "uk",
                            Name = "Миколаїв"
                        },
                        new
                        {
                            Id = new Guid("358ea2d7-c256-416f-813c-6a8fdd5056b5"),
                            CityId = new Guid("7e96c1e2-0280-4641-8e62-c93b14be6276"),
                            Language = "uk",
                            Name = "Одеса"
                        },
                        new
                        {
                            Id = new Guid("80d0b99b-c5ac-4374-a86e-69af2e1c04a3"),
                            CityId = new Guid("249367a5-add6-4f1c-a803-d55e45e8d4a6"),
                            Language = "uk",
                            Name = "Полтава"
                        },
                        new
                        {
                            Id = new Guid("aaf920d1-297d-42de-837b-d2e6d2417d10"),
                            CityId = new Guid("4b0cbfb4-eaea-40ed-adf0-9bdb57168221"),
                            Language = "uk",
                            Name = "Рівне"
                        },
                        new
                        {
                            Id = new Guid("f9c5c484-76bc-4de6-bb3d-962b0b03f498"),
                            CityId = new Guid("e064f96b-ef7f-4b5a-8cdd-c60cd020685f"),
                            Language = "uk",
                            Name = "Суми"
                        },
                        new
                        {
                            Id = new Guid("a38aecd0-2d3a-4d61-9a9c-2c973522f77d"),
                            CityId = new Guid("a1c3b944-151f-4a42-877c-92b663bcb748"),
                            Language = "uk",
                            Name = "Тернопіль"
                        },
                        new
                        {
                            Id = new Guid("e344eb3a-d234-4e99-9b0f-880aac8ef2a6"),
                            CityId = new Guid("b1ebcc5b-78ae-485c-9d1f-bba6e57aee31"),
                            Language = "uk",
                            Name = "Ужгород"
                        },
                        new
                        {
                            Id = new Guid("2fec43be-ea65-4a24-b1dc-4d8edfeab3d5"),
                            CityId = new Guid("6e50a4de-65fb-4321-95d4-2f6eef3ab701"),
                            Language = "uk",
                            Name = "Харків"
                        },
                        new
                        {
                            Id = new Guid("3a84a5ae-9952-496d-ba19-532df3927dc2"),
                            CityId = new Guid("35e4c480-9cf5-4ec7-bff8-fb8d870203ef"),
                            Language = "uk",
                            Name = "Херсон"
                        },
                        new
                        {
                            Id = new Guid("cbcaaf69-bd2c-416c-8919-0ac96b20c484"),
                            CityId = new Guid("a75777ab-9482-469e-8002-383671fd3365"),
                            Language = "uk",
                            Name = "Хмельницький"
                        },
                        new
                        {
                            Id = new Guid("81526597-92be-4717-9528-c88e4783c373"),
                            CityId = new Guid("e11ea064-7adb-4eed-a71d-434629a6fdd1"),
                            Language = "uk",
                            Name = "Черкаси"
                        },
                        new
                        {
                            Id = new Guid("655295a9-3617-4884-9fe7-7b6a786f2ecb"),
                            CityId = new Guid("8757a185-287b-4cef-b085-9a62f36f0b64"),
                            Language = "uk",
                            Name = "Чернівці"
                        },
                        new
                        {
                            Id = new Guid("6e715c41-8725-445a-957b-237a47cc7ccc"),
                            CityId = new Guid("5ab3e6d9-c715-4d83-a126-d31e55fc62f4"),
                            Language = "uk",
                            Name = "Чернігів"
                        },
                        new
                        {
                            Id = new Guid("d24212a7-aa33-4005-a1a8-005d7ed0956a"),
                            CityId = new Guid("5738bfef-0918-4cc7-b667-f07fb01773f6"),
                            Language = "en",
                            Name = "Vinnytsia"
                        },
                        new
                        {
                            Id = new Guid("82b412d3-e1da-4e7f-86e1-61dcb9cdb3a9"),
                            CityId = new Guid("e98303f4-5fe9-4047-823c-b8db96e54a40"),
                            Language = "en",
                            Name = "Dnipro"
                        },
                        new
                        {
                            Id = new Guid("4a20c207-07b8-4320-bfa6-8622d55de0a2"),
                            CityId = new Guid("36b5f355-fc4f-4ea0-9fc0-d6071b4d4122"),
                            Language = "en",
                            Name = "Zhytomyr"
                        },
                        new
                        {
                            Id = new Guid("58d03d28-7bca-4ed0-857d-e73db05cb021"),
                            CityId = new Guid("932a31d2-ae38-419a-8c47-6f02f81aa14b"),
                            Language = "en",
                            Name = "Zaporizhzhia"
                        },
                        new
                        {
                            Id = new Guid("4e7b4fa5-53f8-4be0-8d76-9cca89131d6e"),
                            CityId = new Guid("e76dab51-bda2-4f4c-a556-3eb6aa2b092d"),
                            Language = "en",
                            Name = "Ivano-Frankivsk"
                        },
                        new
                        {
                            Id = new Guid("6b8ba8fa-2c26-4463-baba-56b96d6654fa"),
                            CityId = new Guid("41a4f995-6e36-4e71-8c59-87235b379f2a"),
                            Language = "en",
                            Name = "Kyiv"
                        },
                        new
                        {
                            Id = new Guid("5e074313-d3c2-48cd-bee5-68559fd72d8f"),
                            CityId = new Guid("d1376531-b118-411e-aaa1-6bd4b20ecd9a"),
                            Language = "en",
                            Name = "Kropyvnytskyi"
                        },
                        new
                        {
                            Id = new Guid("9ee961e3-51fb-4884-b5f3-ddc11f9a01fe"),
                            CityId = new Guid("d604c9a2-4168-467e-920a-c827919ebfc7"),
                            Language = "en",
                            Name = "Lutsk"
                        },
                        new
                        {
                            Id = new Guid("09d30c5b-d6eb-43ac-a5bf-8fcd97ebbfcc"),
                            CityId = new Guid("9019b793-227e-44b9-b300-64cc14e15c26"),
                            Language = "en",
                            Name = "Lviv"
                        },
                        new
                        {
                            Id = new Guid("d9b4ef54-8361-472d-b731-15e5e8abb506"),
                            CityId = new Guid("cb972141-1a48-4079-993d-bf9f3c14e01e"),
                            Language = "en",
                            Name = "Mykolaiv"
                        },
                        new
                        {
                            Id = new Guid("60ea73f7-5de2-4748-9376-157ed85c9edb"),
                            CityId = new Guid("7e96c1e2-0280-4641-8e62-c93b14be6276"),
                            Language = "en",
                            Name = "Odesa"
                        },
                        new
                        {
                            Id = new Guid("9290b6d7-3168-43bb-9b38-add1ad9352d5"),
                            CityId = new Guid("249367a5-add6-4f1c-a803-d55e45e8d4a6"),
                            Language = "en",
                            Name = "Poltava"
                        },
                        new
                        {
                            Id = new Guid("c275a99d-8c37-4ffa-85dc-be0967eb150b"),
                            CityId = new Guid("4b0cbfb4-eaea-40ed-adf0-9bdb57168221"),
                            Language = "en",
                            Name = "Rivne"
                        },
                        new
                        {
                            Id = new Guid("1e0a64e7-6fbc-4285-8354-4e815384d0e6"),
                            CityId = new Guid("e064f96b-ef7f-4b5a-8cdd-c60cd020685f"),
                            Language = "en",
                            Name = "Sumy"
                        },
                        new
                        {
                            Id = new Guid("561461bd-016b-46c0-825e-149a80d7226b"),
                            CityId = new Guid("a1c3b944-151f-4a42-877c-92b663bcb748"),
                            Language = "en",
                            Name = "Ternopil"
                        },
                        new
                        {
                            Id = new Guid("07f30d7f-ef06-4364-91c1-0af1d0a1f474"),
                            CityId = new Guid("b1ebcc5b-78ae-485c-9d1f-bba6e57aee31"),
                            Language = "en",
                            Name = "Uzhhorod"
                        },
                        new
                        {
                            Id = new Guid("c63d2d44-dc99-4408-8308-297bd09cc46c"),
                            CityId = new Guid("6e50a4de-65fb-4321-95d4-2f6eef3ab701"),
                            Language = "en",
                            Name = "Kharkiv"
                        },
                        new
                        {
                            Id = new Guid("36d36660-91e6-4151-bd05-2a09e7f9a0e9"),
                            CityId = new Guid("35e4c480-9cf5-4ec7-bff8-fb8d870203ef"),
                            Language = "en",
                            Name = "Kherson"
                        },
                        new
                        {
                            Id = new Guid("246501c4-5693-49cc-930c-e65bba713377"),
                            CityId = new Guid("a75777ab-9482-469e-8002-383671fd3365"),
                            Language = "en",
                            Name = "Khmelnytskyi"
                        },
                        new
                        {
                            Id = new Guid("0533e4eb-7f9e-42d5-bf85-1b81b19fc302"),
                            CityId = new Guid("e11ea064-7adb-4eed-a71d-434629a6fdd1"),
                            Language = "en",
                            Name = "Cherkasy"
                        },
                        new
                        {
                            Id = new Guid("64a68285-649d-4555-9b94-47bb2682337f"),
                            CityId = new Guid("8757a185-287b-4cef-b085-9a62f36f0b64"),
                            Language = "en",
                            Name = "Chernivtsi"
                        },
                        new
                        {
                            Id = new Guid("47eecf6c-4840-4bbb-9043-9bcbb81a3838"),
                            CityId = new Guid("5ab3e6d9-c715-4d83-a126-d31e55fc62f4"),
                            Language = "en",
                            Name = "Chernihiv"
                        },
                        new
                        {
                            Id = new Guid("2ccf8f17-ff31-4072-80fc-5bf66cc20c8e"),
                            CityId = new Guid("97ec3f0d-f4f0-4604-b75a-3854c8a41ad9"),
                            Language = "uk",
                            Name = "Варшава"
                        },
                        new
                        {
                            Id = new Guid("f4b247d5-875f-4ead-8b62-db3b48786acc"),
                            CityId = new Guid("d52852a1-db2b-4347-bbf3-3407a589ea5f"),
                            Language = "uk",
                            Name = "Люблін"
                        },
                        new
                        {
                            Id = new Guid("180b7857-0152-4588-9dda-1ba25540ebfa"),
                            CityId = new Guid("97ec3f0d-f4f0-4604-b75a-3854c8a41ad9"),
                            Language = "en",
                            Name = "Varshava"
                        },
                        new
                        {
                            Id = new Guid("10eca06f-28b7-4a24-9d84-5540e41a8867"),
                            CityId = new Guid("d52852a1-db2b-4347-bbf3-3407a589ea5f"),
                            Language = "en",
                            Name = "Lublin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("73a58b0f-fec7-435e-a547-f7f59e260e0a"),
                            ISO = "uk"
                        },
                        new
                        {
                            Id = new Guid("312b6f67-c531-40c3-a675-ec1bc9b7691f"),
                            ISO = "pl"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CountryTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("71ebcb95-a103-48d3-84d1-52ec8eb88d69"),
                            CountryId = new Guid("73a58b0f-fec7-435e-a547-f7f59e260e0a"),
                            Language = "en",
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("80218614-9035-4251-b1a7-15447cb1e3cb"),
                            CountryId = new Guid("73a58b0f-fec7-435e-a547-f7f59e260e0a"),
                            Language = "uk",
                            Name = "Україна"
                        },
                        new
                        {
                            Id = new Guid("06f4c740-2f50-4922-bcc6-2808e919be1b"),
                            CountryId = new Guid("312b6f67-c531-40c3-a675-ec1bc9b7691f"),
                            Language = "en",
                            Name = "Poland"
                        },
                        new
                        {
                            Id = new Guid("0540d890-7e59-4544-9f3f-82d4d5ae560f"),
                            CountryId = new Guid("312b6f67-c531-40c3-a675-ec1bc9b7691f"),
                            Language = "uk",
                            Name = "Польша"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Donate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTimeCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderCardBank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SenderCardCountry")
                        .HasColumnType("int");

                    b.Property<string>("SenderCardMask2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderCardType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SenderCommission")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Donates");
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VolunteerApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VolunteerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VolunteerUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VolunteerUserId", "VolunteerApplicationId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DAL.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplictionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserRecipientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserSenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplictionId");

                    b.HasIndex("UserRecipientId");

                    b.HasIndex("UserSenderId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ProfilePictures");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a550ef1c-5eb1-4341-ba58-6cafa27c003a"),
                            Title = "medicine"
                        },
                        new
                        {
                            Id = new Guid("a34e7e3a-336a-4d76-adb3-fcec13a5e1f6"),
                            Title = "cooking"
                        },
                        new
                        {
                            Id = new Guid("0a27f1ba-d94d-4e1c-ab59-99952e96764b"),
                            Title = "building"
                        },
                        new
                        {
                            Id = new Guid("3d2c6f42-1943-4f69-b501-79de78afe8af"),
                            Title = "psychology"
                        });
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("56df03fc-2b61-4b3b-9f8a-014eea6e5692"),
                            Language = "en",
                            Name = "medicine",
                            SkillId = new Guid("a550ef1c-5eb1-4341-ba58-6cafa27c003a")
                        },
                        new
                        {
                            Id = new Guid("c8e98ce4-cf7a-4c31-9a69-9cd7b5f10cce"),
                            Language = "uk",
                            Name = "медицина",
                            SkillId = new Guid("a550ef1c-5eb1-4341-ba58-6cafa27c003a")
                        },
                        new
                        {
                            Id = new Guid("aec25848-a151-4761-9757-ab7ee24c8fb6"),
                            Language = "en",
                            Name = "cooking",
                            SkillId = new Guid("a34e7e3a-336a-4d76-adb3-fcec13a5e1f6")
                        },
                        new
                        {
                            Id = new Guid("17479483-8c69-4899-a6c7-796866c4a9c8"),
                            Language = "uk",
                            Name = "кулінарія",
                            SkillId = new Guid("a34e7e3a-336a-4d76-adb3-fcec13a5e1f6")
                        },
                        new
                        {
                            Id = new Guid("46a70530-bbb3-4cb8-8aaf-8902b151f3a3"),
                            Language = "en",
                            Name = "building",
                            SkillId = new Guid("0a27f1ba-d94d-4e1c-ab59-99952e96764b")
                        },
                        new
                        {
                            Id = new Guid("237e5dbc-f065-4e87-a92e-f6c01488b2ce"),
                            Language = "uk",
                            Name = "будівництво",
                            SkillId = new Guid("0a27f1ba-d94d-4e1c-ab59-99952e96764b")
                        },
                        new
                        {
                            Id = new Guid("7d4a1ff5-f46a-425f-b4d7-de6e1ed8fdf1"),
                            Language = "en",
                            Name = "psychology",
                            SkillId = new Guid("3d2c6f42-1943-4f69-b501-79de78afe8af")
                        },
                        new
                        {
                            Id = new Guid("a4954a9e-d86a-4292-a9b0-7645345f3d7a"),
                            Language = "uk",
                            Name = "психологія",
                            SkillId = new Guid("3d2c6f42-1943-4f69-b501-79de78afe8af")
                        });
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2516916c-614b-493a-a819-a0f58527a71b"),
                            CityId = new Guid("5738bfef-0918-4cc7-b667-f07fb01773f6"),
                            DateOfBirth = new DateTime(2023, 5, 25, 22, 42, 37, 388, DateTimeKind.Local).AddTicks(947),
                            FirstName = "the first",
                            LastName = "admin",
                            Login = "ourfirstadmin",
                            Password = "Rk/ryiBNbnHx+s9i1IveCNNw4axYPQHm4T1eratfQlg=",
                            Phone = "+11111111111",
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Document")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DocumentFormat")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("NULL");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ApplicationId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.HasOne("DAL.Entities.Category", "Category")
                        .WithMany("Applications")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("Applications")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationDocument", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("ApplicationDocuments")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationPicture", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("ApplicationPictures")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationSkill", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("ApplicationSkills")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("ApplicationSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DAL.Entities.CategoryTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Category", "Category")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("CityTranslations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("CountryTranslations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.Donate", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Donates")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.HasOne("DAL.Entities.Volunteer", "Volunteer")
                        .WithMany("Messages")
                        .HasForeignKey("VolunteerUserId", "VolunteerApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("DAL.Entities.Notification", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Notifications")
                        .HasForeignKey("ApplictionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "UserRecipient")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("UserRecipientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "UserSender")
                        .WithMany("SentNotifications")
                        .HasForeignKey("UserSenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("UserRecipient");

                    b.Navigation("UserSender");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithOne("ProfilePicture")
                        .HasForeignKey("DAL.Entities.ProfilePicture", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("SkillTranslations")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Volunteers")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Volunteers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Navigation("ApplicationDocuments");

                    b.Navigation("ApplicationPictures");

                    b.Navigation("ApplicationSkills");

                    b.Navigation("Donates");

                    b.Navigation("Notifications");

                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("CategoryTranslations");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("CityTranslations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("CountryTranslations");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Navigation("ApplicationSkills");

                    b.Navigation("SkillTranslations");

                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ProfilePicture");

                    b.Navigation("ReceivedNotifications");

                    b.Navigation("SentNotifications");

                    b.Navigation("UserSkills");

                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
