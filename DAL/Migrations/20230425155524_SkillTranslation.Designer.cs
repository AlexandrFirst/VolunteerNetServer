// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(VolunteerNetServerDBContext))]
    [Migration("20230425155524_SkillTranslation")]
    partial class SkillTranslation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<int>("RequiredNumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d1ff38f5-59fe-4b97-b819-4e63d6bd8daa"),
                            CountryId = new Guid("302f2f05-69c1-4b2c-919a-42e82fb5b050"),
                            ISO = "vi"
                        },
                        new
                        {
                            Id = new Guid("07c2a1e2-61b3-41b7-8597-c203d495d600"),
                            CountryId = new Guid("302f2f05-69c1-4b2c-919a-42e82fb5b050"),
                            ISO = "dn"
                        },
                        new
                        {
                            Id = new Guid("373ec407-2293-47a1-b476-10bfdd27b120"),
                            CountryId = new Guid("302f2f05-69c1-4b2c-919a-42e82fb5b050"),
                            ISO = "zhy"
                        },
                        new
                        {
                            Id = new Guid("7dc404b9-8fc9-4ad3-9425-a0610a0596d0"),
                            CountryId = new Guid("302f2f05-69c1-4b2c-919a-42e82fb5b050"),
                            ISO = "zp"
                        },
                        new
                        {
                            Id = new Guid("8b26b3cb-3acc-44da-8948-c9e0aac739b7"),
                            CountryId = new Guid("302f2f05-69c1-4b2c-919a-42e82fb5b050"),
                            ISO = "if"
                        },
                        new
                        {
                            Id = new Guid("fb930a48-04a2-4048-83b8-fc27dc4c2b68"),
                            CountryId = new Guid("302f2f05-69c1-4b2c-919a-42e82fb5b050"),
                            ISO = "ky"
                        },
                        new
                        {
                            Id = new Guid("d433be75-0544-4e30-97fb-b05c7a7a7591"),
                            CountryId = new Guid("302f2f05-69c1-4b2c-919a-42e82fb5b050"),
                            ISO = "kr"
                        },
                        new
                        {
                            Id = new Guid("406d1192-fe99-46e8-85c1-601f6df72468"),
                            CountryId = new Guid("302f2f05-69c1-4b2c-919a-42e82fb5b050"),
                            ISO = "lut"
                        },
                        new
                        {
                            Id = new Guid("32c6b43b-a29e-45fd-8257-fcba27cc05f0"),
                            CountryId = new Guid("302f2f05-69c1-4b2c-919a-42e82fb5b050"),
                            ISO = "lv"
                        },
                        new
                        {
                            Id = new Guid("b2323a55-5b68-4514-a48b-19f133a379a8"),
                            CountryId = new Guid("302f2f05-69c1-4b2c-919a-42e82fb5b050"),
                            ISO = "my"
                        },
                        new
                        {
                            Id = new Guid("ad24fe20-3e14-4245-921b-b82886dbedcd"),
                            CountryId = new Guid("302f2f05-69c1-4b2c-919a-42e82fb5b050"),
                            ISO = "od"
                        },
                        new
                        {
                            Id = new Guid("0b72357f-782d-419d-a7d3-ff7caee45c2d"),
                            CountryId = new Guid("302f2f05-69c1-4b2c-919a-42e82fb5b050"),
                            ISO = "pol"
                        },
                        new
                        {
                            Id = new Guid("e8c035dd-b49e-461d-9225-cf9e9c03d18f"),
                            CountryId = new Guid("302f2f05-69c1-4b2c-919a-42e82fb5b050"),
                            ISO = "ri"
                        },
                        new
                        {
                            Id = new Guid("a9cf5ad5-3b50-4c11-952e-22cc3309a39f"),
                            CountryId = new Guid("302f2f05-69c1-4b2c-919a-42e82fb5b050"),
                            ISO = "su"
                        },
                        new
                        {
                            Id = new Guid("31bf6bdf-c472-4a2c-90e2-cf6706578992"),
                            CountryId = new Guid("302f2f05-69c1-4b2c-919a-42e82fb5b050"),
                            ISO = "ter"
                        },
                        new
                        {
                            Id = new Guid("14e5b840-3d1a-429c-a534-de413ddce9cc"),
                            CountryId = new Guid("302f2f05-69c1-4b2c-919a-42e82fb5b050"),
                            ISO = "uzh"
                        },
                        new
                        {
                            Id = new Guid("6f300f34-aab7-4480-9429-b35b62e73a4b"),
                            CountryId = new Guid("302f2f05-69c1-4b2c-919a-42e82fb5b050"),
                            ISO = "khar"
                        },
                        new
                        {
                            Id = new Guid("656aacf5-91ec-4f13-a803-1c9a32bd704e"),
                            CountryId = new Guid("302f2f05-69c1-4b2c-919a-42e82fb5b050"),
                            ISO = "kher"
                        },
                        new
                        {
                            Id = new Guid("f4a5df8e-53eb-483d-a675-e8eca5a47fab"),
                            CountryId = new Guid("302f2f05-69c1-4b2c-919a-42e82fb5b050"),
                            ISO = "khm"
                        },
                        new
                        {
                            Id = new Guid("a63039b0-3d72-415e-bb2b-d1c5e3485bd8"),
                            CountryId = new Guid("302f2f05-69c1-4b2c-919a-42e82fb5b050"),
                            ISO = "chk"
                        },
                        new
                        {
                            Id = new Guid("a17900af-d680-4e1b-bcc4-a36d1822b631"),
                            CountryId = new Guid("302f2f05-69c1-4b2c-919a-42e82fb5b050"),
                            ISO = "chv"
                        },
                        new
                        {
                            Id = new Guid("1962f442-a553-48de-8673-02fd6b65e3cb"),
                            CountryId = new Guid("302f2f05-69c1-4b2c-919a-42e82fb5b050"),
                            ISO = "chh"
                        },
                        new
                        {
                            Id = new Guid("e38ed29e-2e89-4ae0-8c6d-35fbd4f571d1"),
                            CountryId = new Guid("6ba4a86b-18a5-4f5e-9ce8-3d99ff200293"),
                            ISO = "var"
                        },
                        new
                        {
                            Id = new Guid("05bab1cb-20d2-4cec-ba60-6ba7f48ee196"),
                            CountryId = new Guid("6ba4a86b-18a5-4f5e-9ce8-3d99ff200293"),
                            ISO = "lub"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("CityTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("347c0470-2401-424c-92e3-a6d3eb975d56"),
                            CityId = new Guid("d1ff38f5-59fe-4b97-b819-4e63d6bd8daa"),
                            Language = "uk",
                            Name = "Вінниця"
                        },
                        new
                        {
                            Id = new Guid("fb2b93b0-6ce0-4319-9035-b6b06f43f597"),
                            CityId = new Guid("07c2a1e2-61b3-41b7-8597-c203d495d600"),
                            Language = "uk",
                            Name = "Дніпро"
                        },
                        new
                        {
                            Id = new Guid("3d1c8eab-e767-46b6-9dab-9675ee11410e"),
                            CityId = new Guid("373ec407-2293-47a1-b476-10bfdd27b120"),
                            Language = "uk",
                            Name = "Житомир"
                        },
                        new
                        {
                            Id = new Guid("8bcfdb36-7988-4c7d-a51a-1c631e5a92aa"),
                            CityId = new Guid("7dc404b9-8fc9-4ad3-9425-a0610a0596d0"),
                            Language = "uk",
                            Name = "Запоріжжя"
                        },
                        new
                        {
                            Id = new Guid("0216a39a-e14f-4831-a330-61a49f7e7490"),
                            CityId = new Guid("8b26b3cb-3acc-44da-8948-c9e0aac739b7"),
                            Language = "uk",
                            Name = "Івано-Франківськ"
                        },
                        new
                        {
                            Id = new Guid("e8dba4ad-f8b1-445f-bfba-4d25cf91e8c9"),
                            CityId = new Guid("fb930a48-04a2-4048-83b8-fc27dc4c2b68"),
                            Language = "uk",
                            Name = "Київ"
                        },
                        new
                        {
                            Id = new Guid("df774f70-7bac-440e-943d-54ebb6c61a3f"),
                            CityId = new Guid("d433be75-0544-4e30-97fb-b05c7a7a7591"),
                            Language = "uk",
                            Name = "Кропивницький"
                        },
                        new
                        {
                            Id = new Guid("777f6a8a-0dcf-4a80-a2f9-9eec03984759"),
                            CityId = new Guid("406d1192-fe99-46e8-85c1-601f6df72468"),
                            Language = "uk",
                            Name = "Луцьк"
                        },
                        new
                        {
                            Id = new Guid("c4bf9247-7093-4c02-b656-61a3309faa73"),
                            CityId = new Guid("32c6b43b-a29e-45fd-8257-fcba27cc05f0"),
                            Language = "uk",
                            Name = "Львів"
                        },
                        new
                        {
                            Id = new Guid("f6612a91-2185-4088-8aa4-f984492129f9"),
                            CityId = new Guid("b2323a55-5b68-4514-a48b-19f133a379a8"),
                            Language = "uk",
                            Name = "Миколаїв"
                        },
                        new
                        {
                            Id = new Guid("10496245-da1a-4027-98f9-b1eeb2783f6b"),
                            CityId = new Guid("ad24fe20-3e14-4245-921b-b82886dbedcd"),
                            Language = "uk",
                            Name = "Одеса"
                        },
                        new
                        {
                            Id = new Guid("8c8bbb9a-a1a3-480a-8741-085e1c848266"),
                            CityId = new Guid("0b72357f-782d-419d-a7d3-ff7caee45c2d"),
                            Language = "uk",
                            Name = "Полтава"
                        },
                        new
                        {
                            Id = new Guid("583e0661-b882-4392-a68f-e1858ceea397"),
                            CityId = new Guid("e8c035dd-b49e-461d-9225-cf9e9c03d18f"),
                            Language = "uk",
                            Name = "Рівне"
                        },
                        new
                        {
                            Id = new Guid("d170b43a-9317-468d-a3cd-abfed5a05e3a"),
                            CityId = new Guid("a9cf5ad5-3b50-4c11-952e-22cc3309a39f"),
                            Language = "uk",
                            Name = "Суми"
                        },
                        new
                        {
                            Id = new Guid("636f75b2-7d5b-48bb-8972-49fb3f0a9c43"),
                            CityId = new Guid("31bf6bdf-c472-4a2c-90e2-cf6706578992"),
                            Language = "uk",
                            Name = "Тернопіль"
                        },
                        new
                        {
                            Id = new Guid("2daeae14-526a-4375-875b-00d75f81d2b2"),
                            CityId = new Guid("14e5b840-3d1a-429c-a534-de413ddce9cc"),
                            Language = "uk",
                            Name = "Ужгород"
                        },
                        new
                        {
                            Id = new Guid("f8c6686c-cd8c-46b1-8b2d-e6cc7e16e710"),
                            CityId = new Guid("6f300f34-aab7-4480-9429-b35b62e73a4b"),
                            Language = "uk",
                            Name = "Харків"
                        },
                        new
                        {
                            Id = new Guid("03faa47c-b258-4199-b6c6-cdb6082879ca"),
                            CityId = new Guid("656aacf5-91ec-4f13-a803-1c9a32bd704e"),
                            Language = "uk",
                            Name = "Херсон"
                        },
                        new
                        {
                            Id = new Guid("077c7512-74fd-4ccd-88a9-ca35842f4efb"),
                            CityId = new Guid("f4a5df8e-53eb-483d-a675-e8eca5a47fab"),
                            Language = "uk",
                            Name = "Хмельницький"
                        },
                        new
                        {
                            Id = new Guid("ae427f3a-397a-4f1a-9c50-b227b3a12658"),
                            CityId = new Guid("a63039b0-3d72-415e-bb2b-d1c5e3485bd8"),
                            Language = "uk",
                            Name = "Черкаси"
                        },
                        new
                        {
                            Id = new Guid("5eced216-1ada-4af9-ba09-9efa86e47fc1"),
                            CityId = new Guid("a17900af-d680-4e1b-bcc4-a36d1822b631"),
                            Language = "uk",
                            Name = "Чернівці"
                        },
                        new
                        {
                            Id = new Guid("f74c2c8c-1a69-4bce-9e32-89b26077d02a"),
                            CityId = new Guid("1962f442-a553-48de-8673-02fd6b65e3cb"),
                            Language = "uk",
                            Name = "Чернігів"
                        },
                        new
                        {
                            Id = new Guid("b7ba1691-d5be-4cc9-b0ac-5cf457cdb743"),
                            CityId = new Guid("d1ff38f5-59fe-4b97-b819-4e63d6bd8daa"),
                            Language = "en",
                            Name = "Vinnytsia"
                        },
                        new
                        {
                            Id = new Guid("6e6a470b-3a85-4feb-8357-c6ed25844e86"),
                            CityId = new Guid("07c2a1e2-61b3-41b7-8597-c203d495d600"),
                            Language = "en",
                            Name = "Dnipro"
                        },
                        new
                        {
                            Id = new Guid("bd7143a6-32d8-427b-9612-d77d95ca6ece"),
                            CityId = new Guid("373ec407-2293-47a1-b476-10bfdd27b120"),
                            Language = "en",
                            Name = "Zhytomyr"
                        },
                        new
                        {
                            Id = new Guid("736f8dd1-a7f2-42fc-a7d5-4b43d59d2d50"),
                            CityId = new Guid("7dc404b9-8fc9-4ad3-9425-a0610a0596d0"),
                            Language = "en",
                            Name = "Zaporizhzhia"
                        },
                        new
                        {
                            Id = new Guid("ff512975-31a7-4a03-9609-b3664dd19b64"),
                            CityId = new Guid("8b26b3cb-3acc-44da-8948-c9e0aac739b7"),
                            Language = "en",
                            Name = "Ivano-Frankivsk"
                        },
                        new
                        {
                            Id = new Guid("d4f46a53-e313-451a-bec1-d8b22c049d0b"),
                            CityId = new Guid("fb930a48-04a2-4048-83b8-fc27dc4c2b68"),
                            Language = "en",
                            Name = "Kyiv"
                        },
                        new
                        {
                            Id = new Guid("3d68dd7a-ad4e-4d95-ad32-9fe9436aad68"),
                            CityId = new Guid("d433be75-0544-4e30-97fb-b05c7a7a7591"),
                            Language = "en",
                            Name = "Kropyvnytskyi"
                        },
                        new
                        {
                            Id = new Guid("76245c8d-a889-46df-a20b-d5b41c70d395"),
                            CityId = new Guid("406d1192-fe99-46e8-85c1-601f6df72468"),
                            Language = "en",
                            Name = "Lutsk"
                        },
                        new
                        {
                            Id = new Guid("1c069f3b-4937-4d1d-8bab-58466ffc4597"),
                            CityId = new Guid("32c6b43b-a29e-45fd-8257-fcba27cc05f0"),
                            Language = "en",
                            Name = "Lviv"
                        },
                        new
                        {
                            Id = new Guid("dd50d4c0-1192-415e-aef2-37c3459c7990"),
                            CityId = new Guid("b2323a55-5b68-4514-a48b-19f133a379a8"),
                            Language = "en",
                            Name = "Mykolaiv"
                        },
                        new
                        {
                            Id = new Guid("ca0286c9-0fb9-4f33-9947-ebf726a76301"),
                            CityId = new Guid("ad24fe20-3e14-4245-921b-b82886dbedcd"),
                            Language = "en",
                            Name = "Odesa"
                        },
                        new
                        {
                            Id = new Guid("0c83d200-759d-41ac-a65e-78220894127b"),
                            CityId = new Guid("0b72357f-782d-419d-a7d3-ff7caee45c2d"),
                            Language = "en",
                            Name = "Poltava"
                        },
                        new
                        {
                            Id = new Guid("aecc0824-6d8b-4f07-8d86-99a8a34b4363"),
                            CityId = new Guid("e8c035dd-b49e-461d-9225-cf9e9c03d18f"),
                            Language = "en",
                            Name = "Rivne"
                        },
                        new
                        {
                            Id = new Guid("8d87586f-11bd-4a77-a59f-4d80b450b02c"),
                            CityId = new Guid("a9cf5ad5-3b50-4c11-952e-22cc3309a39f"),
                            Language = "en",
                            Name = "Sumy"
                        },
                        new
                        {
                            Id = new Guid("694750f8-e8dd-446e-a2de-8615bf2d1922"),
                            CityId = new Guid("31bf6bdf-c472-4a2c-90e2-cf6706578992"),
                            Language = "en",
                            Name = "Ternopil"
                        },
                        new
                        {
                            Id = new Guid("4c504980-ac50-43f0-b82a-bf387ce7fa1c"),
                            CityId = new Guid("14e5b840-3d1a-429c-a534-de413ddce9cc"),
                            Language = "en",
                            Name = "Uzhhorod"
                        },
                        new
                        {
                            Id = new Guid("8b2050ff-d0c5-4826-909c-0e5489d80d13"),
                            CityId = new Guid("6f300f34-aab7-4480-9429-b35b62e73a4b"),
                            Language = "en",
                            Name = "Kharkiv"
                        },
                        new
                        {
                            Id = new Guid("c96497b4-3491-4837-a2ff-743cffcfdb53"),
                            CityId = new Guid("656aacf5-91ec-4f13-a803-1c9a32bd704e"),
                            Language = "en",
                            Name = "Kherson"
                        },
                        new
                        {
                            Id = new Guid("30331cbb-9718-461b-b184-8686bea4f677"),
                            CityId = new Guid("f4a5df8e-53eb-483d-a675-e8eca5a47fab"),
                            Language = "en",
                            Name = "Khmelnytskyi"
                        },
                        new
                        {
                            Id = new Guid("8c2283a3-5ab8-4210-a2b5-5fcef38f2244"),
                            CityId = new Guid("a63039b0-3d72-415e-bb2b-d1c5e3485bd8"),
                            Language = "en",
                            Name = "Cherkasy"
                        },
                        new
                        {
                            Id = new Guid("319c0b50-c64f-427d-8a02-42651fcee6a2"),
                            CityId = new Guid("a17900af-d680-4e1b-bcc4-a36d1822b631"),
                            Language = "en",
                            Name = "Chernivtsi"
                        },
                        new
                        {
                            Id = new Guid("98d88830-ea4e-465e-84ca-a511e641d15f"),
                            CityId = new Guid("1962f442-a553-48de-8673-02fd6b65e3cb"),
                            Language = "en",
                            Name = "Chernihiv"
                        },
                        new
                        {
                            Id = new Guid("aa6a231b-df5a-4e9a-adba-fd3dd72d3d26"),
                            CityId = new Guid("e38ed29e-2e89-4ae0-8c6d-35fbd4f571d1"),
                            Language = "uk",
                            Name = "Варшава"
                        },
                        new
                        {
                            Id = new Guid("30176d34-8968-49bf-869d-75672769297b"),
                            CityId = new Guid("05bab1cb-20d2-4cec-ba60-6ba7f48ee196"),
                            Language = "uk",
                            Name = "Люблін"
                        },
                        new
                        {
                            Id = new Guid("917163a7-73a7-46c7-87be-0e6457c4c44f"),
                            CityId = new Guid("e38ed29e-2e89-4ae0-8c6d-35fbd4f571d1"),
                            Language = "en",
                            Name = "Varshava"
                        },
                        new
                        {
                            Id = new Guid("8671ae34-eb7f-4cd6-adac-ff0154a4f9bc"),
                            CityId = new Guid("05bab1cb-20d2-4cec-ba60-6ba7f48ee196"),
                            Language = "en",
                            Name = "Lublin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("302f2f05-69c1-4b2c-919a-42e82fb5b050"),
                            ISO = "uk"
                        },
                        new
                        {
                            Id = new Guid("6ba4a86b-18a5-4f5e-9ce8-3d99ff200293"),
                            ISO = "pl"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CountryTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6d46db94-d5a7-49a4-b29e-9b06e49f8db6"),
                            CountryId = new Guid("302f2f05-69c1-4b2c-919a-42e82fb5b050"),
                            Language = "en",
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("540d9097-33e2-40a3-b43f-51afdc9efac4"),
                            CountryId = new Guid("302f2f05-69c1-4b2c-919a-42e82fb5b050"),
                            Language = "uk",
                            Name = "Україна"
                        },
                        new
                        {
                            Id = new Guid("887b4097-92fc-4283-a9d2-88bf2af566d2"),
                            CountryId = new Guid("6ba4a86b-18a5-4f5e-9ce8-3d99ff200293"),
                            Language = "en",
                            Name = "Poland"
                        },
                        new
                        {
                            Id = new Guid("52c9b06e-67d9-4fa2-b419-30884b8d8c57"),
                            CountryId = new Guid("6ba4a86b-18a5-4f5e-9ce8-3d99ff200293"),
                            Language = "uk",
                            Name = "Польша"
                        });
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ProfilePictures");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0ebb9e9a-4f27-4bf4-ad8c-ed6ca0282d46"),
                            Title = "medicine"
                        },
                        new
                        {
                            Id = new Guid("02fb3e8e-6f57-461a-b39a-782dc53b09d5"),
                            Title = "cooking"
                        });
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1b5eded7-07ba-4245-bfe5-bdb0d91f5551"),
                            Language = "en",
                            Name = "medicine",
                            SkillId = new Guid("0ebb9e9a-4f27-4bf4-ad8c-ed6ca0282d46")
                        },
                        new
                        {
                            Id = new Guid("e9a38fe6-7611-46b8-a506-1c189eb5e140"),
                            Language = "uk",
                            Name = "медицина",
                            SkillId = new Guid("0ebb9e9a-4f27-4bf4-ad8c-ed6ca0282d46")
                        },
                        new
                        {
                            Id = new Guid("efb861b1-aed4-4e5c-ab8f-03b9e8339943"),
                            Language = "en",
                            Name = "cooking",
                            SkillId = new Guid("02fb3e8e-6f57-461a-b39a-782dc53b09d5")
                        },
                        new
                        {
                            Id = new Guid("c8d40096-8cb7-4e84-8945-6e1acba0db4b"),
                            Language = "uk",
                            Name = "кулінарія",
                            SkillId = new Guid("02fb3e8e-6f57-461a-b39a-782dc53b09d5")
                        });
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("120e210d-b2e4-4b87-b77d-789a24576942"),
                            CityId = new Guid("d1ff38f5-59fe-4b97-b819-4e63d6bd8daa"),
                            DateOfBirth = new DateTime(2023, 4, 25, 18, 55, 12, 257, DateTimeKind.Local).AddTicks(9882),
                            FirstName = "the first",
                            LastName = "admin",
                            Login = "ourfirstadmin",
                            Password = "Rk/ryiBNbnHx+s9i1IveCNNw4axYPQHm4T1eratfQlg=",
                            Phone = "+11111111111",
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Document")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DocumentFormat")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("NULL");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ApplicationId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("CityTranslations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("CountryTranslations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithOne("ProfilePicture")
                        .HasForeignKey("DAL.Entities.ProfilePicture", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("SkillTranslations")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Volunteers")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Volunteers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Navigation("CityTranslations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("CountryTranslations");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Navigation("SkillTranslations");

                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ProfilePicture");

                    b.Navigation("UserSkills");

                    b.Navigation("Volunteers");
                });
#pragma warning restore 612, 618
        }
    }
}
