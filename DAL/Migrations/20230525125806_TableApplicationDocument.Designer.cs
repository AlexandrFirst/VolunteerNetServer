// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(VolunteerNetServerDBContext))]
    [Migration("20230525125806_TableApplicationDocument")]
    partial class TableApplicationDocument
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("CurrentSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DateTimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimeStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<string>("OwnerCardName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequiredNumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<decimal?>("RequiredSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Document")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DocumentFormat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationDocuments");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationSkill", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("ApplicationSkills");
                });

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("695390e4-5457-4636-9f3c-997c43dec926"),
                            Title = "health care"
                        },
                        new
                        {
                            Id = new Guid("00dbbaa4-4299-40e7-b1b0-dd850c3046fb"),
                            Title = "education"
                        },
                        new
                        {
                            Id = new Guid("7e66f455-1c50-417a-96b9-d40c8b8f916a"),
                            Title = "sports and physical culture"
                        },
                        new
                        {
                            Id = new Guid("dcb74fd2-68aa-41b7-8256-22284bf2a77c"),
                            Title = "culture and art"
                        },
                        new
                        {
                            Id = new Guid("779ead6f-2aa4-48be-8cfa-f9046f6c1a1a"),
                            Title = "social programs"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CategoryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DescriptionCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("958602e1-bd60-4cb8-b541-00dafe3bf086"),
                            CategoryId = new Guid("695390e4-5457-4636-9f3c-997c43dec926"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "health care"
                        },
                        new
                        {
                            Id = new Guid("67a55bc8-f684-40d3-ae91-5ba26d25ec1f"),
                            CategoryId = new Guid("695390e4-5457-4636-9f3c-997c43dec926"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "охорона здоров'я"
                        },
                        new
                        {
                            Id = new Guid("03e1fd94-ec43-481a-915e-431f1f60ee9d"),
                            CategoryId = new Guid("00dbbaa4-4299-40e7-b1b0-dd850c3046fb"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "education"
                        },
                        new
                        {
                            Id = new Guid("b456e736-4a33-4e4e-bb83-3cadb7fec609"),
                            CategoryId = new Guid("00dbbaa4-4299-40e7-b1b0-dd850c3046fb"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "освіта"
                        },
                        new
                        {
                            Id = new Guid("84216b51-84aa-4ce8-b2fe-8c4426883615"),
                            CategoryId = new Guid("7e66f455-1c50-417a-96b9-d40c8b8f916a"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "sport and physical culture"
                        },
                        new
                        {
                            Id = new Guid("99a9bcf6-26a3-4782-86a6-0b767a954250"),
                            CategoryId = new Guid("7e66f455-1c50-417a-96b9-d40c8b8f916a"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "спорт та фізична культура"
                        },
                        new
                        {
                            Id = new Guid("e23da740-8efe-42bd-a45b-e416265df134"),
                            CategoryId = new Guid("dcb74fd2-68aa-41b7-8256-22284bf2a77c"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "culture and art"
                        },
                        new
                        {
                            Id = new Guid("f4c05e1a-bc7c-4c20-b921-03f330c5eafb"),
                            CategoryId = new Guid("dcb74fd2-68aa-41b7-8256-22284bf2a77c"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "культура та мистецтво"
                        },
                        new
                        {
                            Id = new Guid("147e633e-6c29-4484-9230-a054f984d06a"),
                            CategoryId = new Guid("779ead6f-2aa4-48be-8cfa-f9046f6c1a1a"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "social programs"
                        },
                        new
                        {
                            Id = new Guid("7d07ef65-6ce8-41e4-b249-b578d9c5057d"),
                            CategoryId = new Guid("779ead6f-2aa4-48be-8cfa-f9046f6c1a1a"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "соціальні програми"
                        });
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c4991e13-d40e-4450-8ab6-3026f230e157"),
                            CountryId = new Guid("a637ea86-fae4-47a3-ad96-d9e630225423"),
                            ISO = "vi"
                        },
                        new
                        {
                            Id = new Guid("beacee74-f676-44b2-8c25-80a15b62c45e"),
                            CountryId = new Guid("a637ea86-fae4-47a3-ad96-d9e630225423"),
                            ISO = "dn"
                        },
                        new
                        {
                            Id = new Guid("3a33fddd-1e84-41de-9309-bf1993355cf2"),
                            CountryId = new Guid("a637ea86-fae4-47a3-ad96-d9e630225423"),
                            ISO = "zhy"
                        },
                        new
                        {
                            Id = new Guid("c946e969-c2df-489e-9dca-65d816f7fe74"),
                            CountryId = new Guid("a637ea86-fae4-47a3-ad96-d9e630225423"),
                            ISO = "zp"
                        },
                        new
                        {
                            Id = new Guid("cdf74c11-3b3e-4e4e-94d6-a82f8095bb0d"),
                            CountryId = new Guid("a637ea86-fae4-47a3-ad96-d9e630225423"),
                            ISO = "if"
                        },
                        new
                        {
                            Id = new Guid("0b72ef6e-f690-47a5-bc06-9605802f46cb"),
                            CountryId = new Guid("a637ea86-fae4-47a3-ad96-d9e630225423"),
                            ISO = "ky"
                        },
                        new
                        {
                            Id = new Guid("2070417c-6f79-46d4-a1ae-94143008b606"),
                            CountryId = new Guid("a637ea86-fae4-47a3-ad96-d9e630225423"),
                            ISO = "kr"
                        },
                        new
                        {
                            Id = new Guid("074e21c1-817b-4c61-b7c9-25c5d5a30df8"),
                            CountryId = new Guid("a637ea86-fae4-47a3-ad96-d9e630225423"),
                            ISO = "lut"
                        },
                        new
                        {
                            Id = new Guid("9ae4d9c8-0669-40d5-b5ba-2bd5fbaeb389"),
                            CountryId = new Guid("a637ea86-fae4-47a3-ad96-d9e630225423"),
                            ISO = "lv"
                        },
                        new
                        {
                            Id = new Guid("f0305792-2f99-482f-86a1-e860e3236775"),
                            CountryId = new Guid("a637ea86-fae4-47a3-ad96-d9e630225423"),
                            ISO = "my"
                        },
                        new
                        {
                            Id = new Guid("7b18c1ee-0d93-4b3b-a81a-10e334d4cdd3"),
                            CountryId = new Guid("a637ea86-fae4-47a3-ad96-d9e630225423"),
                            ISO = "od"
                        },
                        new
                        {
                            Id = new Guid("67010e44-414f-45b2-bd67-7eb12e72cc0a"),
                            CountryId = new Guid("a637ea86-fae4-47a3-ad96-d9e630225423"),
                            ISO = "pol"
                        },
                        new
                        {
                            Id = new Guid("eab245ca-2ff0-4403-8f55-65ad2c6f0460"),
                            CountryId = new Guid("a637ea86-fae4-47a3-ad96-d9e630225423"),
                            ISO = "ri"
                        },
                        new
                        {
                            Id = new Guid("15029935-d6e5-464b-abbe-4795c8d4dc3c"),
                            CountryId = new Guid("a637ea86-fae4-47a3-ad96-d9e630225423"),
                            ISO = "su"
                        },
                        new
                        {
                            Id = new Guid("4853ea9f-a540-4525-918c-d6e17fc00d28"),
                            CountryId = new Guid("a637ea86-fae4-47a3-ad96-d9e630225423"),
                            ISO = "ter"
                        },
                        new
                        {
                            Id = new Guid("f9979e80-6f88-432c-81f1-47de85b1072e"),
                            CountryId = new Guid("a637ea86-fae4-47a3-ad96-d9e630225423"),
                            ISO = "uzh"
                        },
                        new
                        {
                            Id = new Guid("b3ca9d1d-e136-4f9e-8b0a-60b56cbcfaa2"),
                            CountryId = new Guid("a637ea86-fae4-47a3-ad96-d9e630225423"),
                            ISO = "khar"
                        },
                        new
                        {
                            Id = new Guid("f125a1cc-74c0-4424-8bc6-fcab0800d602"),
                            CountryId = new Guid("a637ea86-fae4-47a3-ad96-d9e630225423"),
                            ISO = "kher"
                        },
                        new
                        {
                            Id = new Guid("5b09e033-c24a-4e52-952c-9f9f8ccf06f6"),
                            CountryId = new Guid("a637ea86-fae4-47a3-ad96-d9e630225423"),
                            ISO = "khm"
                        },
                        new
                        {
                            Id = new Guid("dd086a03-1e0f-444b-8be7-af6028591a71"),
                            CountryId = new Guid("a637ea86-fae4-47a3-ad96-d9e630225423"),
                            ISO = "chk"
                        },
                        new
                        {
                            Id = new Guid("f0ef1eb9-ebe1-4b75-ae88-d166f67ea470"),
                            CountryId = new Guid("a637ea86-fae4-47a3-ad96-d9e630225423"),
                            ISO = "chv"
                        },
                        new
                        {
                            Id = new Guid("1914c2a3-7576-4e5d-a6b2-67e34c409175"),
                            CountryId = new Guid("a637ea86-fae4-47a3-ad96-d9e630225423"),
                            ISO = "chh"
                        },
                        new
                        {
                            Id = new Guid("58d53050-f2b4-4571-9f59-e171715fbb3c"),
                            CountryId = new Guid("1c05835f-b417-4bda-8a51-8b6fc740ef47"),
                            ISO = "var"
                        },
                        new
                        {
                            Id = new Guid("36d87953-8e68-46f0-a588-3b90c9b5f5ce"),
                            CountryId = new Guid("1c05835f-b417-4bda-8a51-8b6fc740ef47"),
                            ISO = "lub"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("CityTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6a060bfe-1962-4794-971b-cea8def720ad"),
                            CityId = new Guid("c4991e13-d40e-4450-8ab6-3026f230e157"),
                            Language = "uk",
                            Name = "Вінниця"
                        },
                        new
                        {
                            Id = new Guid("688c2654-3705-4ca9-b927-bf5240bc350b"),
                            CityId = new Guid("beacee74-f676-44b2-8c25-80a15b62c45e"),
                            Language = "uk",
                            Name = "Дніпро"
                        },
                        new
                        {
                            Id = new Guid("e8985247-f3f4-4a03-939a-7ed0c842b2a5"),
                            CityId = new Guid("3a33fddd-1e84-41de-9309-bf1993355cf2"),
                            Language = "uk",
                            Name = "Житомир"
                        },
                        new
                        {
                            Id = new Guid("4101f4a4-c93b-4538-b852-6e7c1a6fc8c5"),
                            CityId = new Guid("c946e969-c2df-489e-9dca-65d816f7fe74"),
                            Language = "uk",
                            Name = "Запоріжжя"
                        },
                        new
                        {
                            Id = new Guid("57945bd6-5a43-4832-b822-09bf9e67cdb7"),
                            CityId = new Guid("cdf74c11-3b3e-4e4e-94d6-a82f8095bb0d"),
                            Language = "uk",
                            Name = "Івано-Франківськ"
                        },
                        new
                        {
                            Id = new Guid("9d764410-1546-448b-a09f-f38feebf8ec6"),
                            CityId = new Guid("0b72ef6e-f690-47a5-bc06-9605802f46cb"),
                            Language = "uk",
                            Name = "Київ"
                        },
                        new
                        {
                            Id = new Guid("ddd7d3c6-4846-42ab-833e-21d1b619712b"),
                            CityId = new Guid("2070417c-6f79-46d4-a1ae-94143008b606"),
                            Language = "uk",
                            Name = "Кропивницький"
                        },
                        new
                        {
                            Id = new Guid("01f39cc1-9917-4719-a9f1-c19c5581fe60"),
                            CityId = new Guid("074e21c1-817b-4c61-b7c9-25c5d5a30df8"),
                            Language = "uk",
                            Name = "Луцьк"
                        },
                        new
                        {
                            Id = new Guid("1bbf210e-3e1b-4f19-b8dd-dc2e7b04b62f"),
                            CityId = new Guid("9ae4d9c8-0669-40d5-b5ba-2bd5fbaeb389"),
                            Language = "uk",
                            Name = "Львів"
                        },
                        new
                        {
                            Id = new Guid("3f7e5538-25f7-4a8f-98bc-f07ba702338c"),
                            CityId = new Guid("f0305792-2f99-482f-86a1-e860e3236775"),
                            Language = "uk",
                            Name = "Миколаїв"
                        },
                        new
                        {
                            Id = new Guid("b179d4a9-2dab-420c-9e13-6857e6cde433"),
                            CityId = new Guid("7b18c1ee-0d93-4b3b-a81a-10e334d4cdd3"),
                            Language = "uk",
                            Name = "Одеса"
                        },
                        new
                        {
                            Id = new Guid("957737dd-267b-45c5-8214-d61986816862"),
                            CityId = new Guid("67010e44-414f-45b2-bd67-7eb12e72cc0a"),
                            Language = "uk",
                            Name = "Полтава"
                        },
                        new
                        {
                            Id = new Guid("4a787f71-5f88-41e3-ad52-7eef108afafc"),
                            CityId = new Guid("eab245ca-2ff0-4403-8f55-65ad2c6f0460"),
                            Language = "uk",
                            Name = "Рівне"
                        },
                        new
                        {
                            Id = new Guid("3ff23279-4ada-4448-90ca-8ff31f458b7c"),
                            CityId = new Guid("15029935-d6e5-464b-abbe-4795c8d4dc3c"),
                            Language = "uk",
                            Name = "Суми"
                        },
                        new
                        {
                            Id = new Guid("4ea83fb3-d1eb-4c91-96fd-408e2f1fd269"),
                            CityId = new Guid("4853ea9f-a540-4525-918c-d6e17fc00d28"),
                            Language = "uk",
                            Name = "Тернопіль"
                        },
                        new
                        {
                            Id = new Guid("6a428be9-f4f2-46b4-b3bd-83779483f425"),
                            CityId = new Guid("f9979e80-6f88-432c-81f1-47de85b1072e"),
                            Language = "uk",
                            Name = "Ужгород"
                        },
                        new
                        {
                            Id = new Guid("ed279664-7198-4051-9d75-e7711f9459c7"),
                            CityId = new Guid("b3ca9d1d-e136-4f9e-8b0a-60b56cbcfaa2"),
                            Language = "uk",
                            Name = "Харків"
                        },
                        new
                        {
                            Id = new Guid("756ef16d-d73d-4e16-93bf-9a20ad56661e"),
                            CityId = new Guid("f125a1cc-74c0-4424-8bc6-fcab0800d602"),
                            Language = "uk",
                            Name = "Херсон"
                        },
                        new
                        {
                            Id = new Guid("048133cc-2327-4c4f-ba59-b4b768415802"),
                            CityId = new Guid("5b09e033-c24a-4e52-952c-9f9f8ccf06f6"),
                            Language = "uk",
                            Name = "Хмельницький"
                        },
                        new
                        {
                            Id = new Guid("3dfb147f-f486-4790-baab-09df76ce0f5c"),
                            CityId = new Guid("dd086a03-1e0f-444b-8be7-af6028591a71"),
                            Language = "uk",
                            Name = "Черкаси"
                        },
                        new
                        {
                            Id = new Guid("ed4e3f5f-ea94-4f33-999b-bc614774a9c5"),
                            CityId = new Guid("f0ef1eb9-ebe1-4b75-ae88-d166f67ea470"),
                            Language = "uk",
                            Name = "Чернівці"
                        },
                        new
                        {
                            Id = new Guid("39088edb-1e80-448f-a805-404978e37548"),
                            CityId = new Guid("1914c2a3-7576-4e5d-a6b2-67e34c409175"),
                            Language = "uk",
                            Name = "Чернігів"
                        },
                        new
                        {
                            Id = new Guid("dfa539f8-7362-458c-89d5-8d7050738159"),
                            CityId = new Guid("c4991e13-d40e-4450-8ab6-3026f230e157"),
                            Language = "en",
                            Name = "Vinnytsia"
                        },
                        new
                        {
                            Id = new Guid("34662c56-e820-4ac2-86d4-2a493a0ed902"),
                            CityId = new Guid("beacee74-f676-44b2-8c25-80a15b62c45e"),
                            Language = "en",
                            Name = "Dnipro"
                        },
                        new
                        {
                            Id = new Guid("df476c59-8e07-43fd-9d39-7daf828d159e"),
                            CityId = new Guid("3a33fddd-1e84-41de-9309-bf1993355cf2"),
                            Language = "en",
                            Name = "Zhytomyr"
                        },
                        new
                        {
                            Id = new Guid("68d38896-4d6d-4a45-8166-8d807a7b0a26"),
                            CityId = new Guid("c946e969-c2df-489e-9dca-65d816f7fe74"),
                            Language = "en",
                            Name = "Zaporizhzhia"
                        },
                        new
                        {
                            Id = new Guid("cb3f4efb-d455-49c5-b20d-7c38a9a76a26"),
                            CityId = new Guid("cdf74c11-3b3e-4e4e-94d6-a82f8095bb0d"),
                            Language = "en",
                            Name = "Ivano-Frankivsk"
                        },
                        new
                        {
                            Id = new Guid("1ebb665d-8468-46e0-890c-3ccdc63ae881"),
                            CityId = new Guid("0b72ef6e-f690-47a5-bc06-9605802f46cb"),
                            Language = "en",
                            Name = "Kyiv"
                        },
                        new
                        {
                            Id = new Guid("0d75d80d-20bb-49a4-9a61-2a9d75d26079"),
                            CityId = new Guid("2070417c-6f79-46d4-a1ae-94143008b606"),
                            Language = "en",
                            Name = "Kropyvnytskyi"
                        },
                        new
                        {
                            Id = new Guid("1909f673-cf97-4181-9bc7-7029baffc64a"),
                            CityId = new Guid("074e21c1-817b-4c61-b7c9-25c5d5a30df8"),
                            Language = "en",
                            Name = "Lutsk"
                        },
                        new
                        {
                            Id = new Guid("fc849a5f-76c8-4e2a-9834-c4777ac45965"),
                            CityId = new Guid("9ae4d9c8-0669-40d5-b5ba-2bd5fbaeb389"),
                            Language = "en",
                            Name = "Lviv"
                        },
                        new
                        {
                            Id = new Guid("49dd8861-f844-4aa3-bea6-6aa7365cc8dd"),
                            CityId = new Guid("f0305792-2f99-482f-86a1-e860e3236775"),
                            Language = "en",
                            Name = "Mykolaiv"
                        },
                        new
                        {
                            Id = new Guid("55fd5c22-84b4-4ae3-a350-8eb2f51a7ab9"),
                            CityId = new Guid("7b18c1ee-0d93-4b3b-a81a-10e334d4cdd3"),
                            Language = "en",
                            Name = "Odesa"
                        },
                        new
                        {
                            Id = new Guid("28078ac8-a640-459a-b6fd-c93819ab90c5"),
                            CityId = new Guid("67010e44-414f-45b2-bd67-7eb12e72cc0a"),
                            Language = "en",
                            Name = "Poltava"
                        },
                        new
                        {
                            Id = new Guid("40b1dbc4-c5e1-465a-9273-c922c4e29a5d"),
                            CityId = new Guid("eab245ca-2ff0-4403-8f55-65ad2c6f0460"),
                            Language = "en",
                            Name = "Rivne"
                        },
                        new
                        {
                            Id = new Guid("6b93a13d-2ccf-4676-b4cf-700d69b153d7"),
                            CityId = new Guid("15029935-d6e5-464b-abbe-4795c8d4dc3c"),
                            Language = "en",
                            Name = "Sumy"
                        },
                        new
                        {
                            Id = new Guid("03b11763-bbfa-4383-b443-9504f7efe64a"),
                            CityId = new Guid("4853ea9f-a540-4525-918c-d6e17fc00d28"),
                            Language = "en",
                            Name = "Ternopil"
                        },
                        new
                        {
                            Id = new Guid("55913e4e-90a4-40eb-ae0a-1bbb97697e29"),
                            CityId = new Guid("f9979e80-6f88-432c-81f1-47de85b1072e"),
                            Language = "en",
                            Name = "Uzhhorod"
                        },
                        new
                        {
                            Id = new Guid("04cb560e-c607-4efc-877d-340dfde24e03"),
                            CityId = new Guid("b3ca9d1d-e136-4f9e-8b0a-60b56cbcfaa2"),
                            Language = "en",
                            Name = "Kharkiv"
                        },
                        new
                        {
                            Id = new Guid("d4d14e1a-d24e-4e1f-aad8-c24555fb0f08"),
                            CityId = new Guid("f125a1cc-74c0-4424-8bc6-fcab0800d602"),
                            Language = "en",
                            Name = "Kherson"
                        },
                        new
                        {
                            Id = new Guid("d5f34dc3-d9f7-4731-9339-aa92d674a209"),
                            CityId = new Guid("5b09e033-c24a-4e52-952c-9f9f8ccf06f6"),
                            Language = "en",
                            Name = "Khmelnytskyi"
                        },
                        new
                        {
                            Id = new Guid("d528d578-27fb-488b-a231-90cf2b6200b0"),
                            CityId = new Guid("dd086a03-1e0f-444b-8be7-af6028591a71"),
                            Language = "en",
                            Name = "Cherkasy"
                        },
                        new
                        {
                            Id = new Guid("8380a125-8dcb-404a-8c61-ff874128d3ff"),
                            CityId = new Guid("f0ef1eb9-ebe1-4b75-ae88-d166f67ea470"),
                            Language = "en",
                            Name = "Chernivtsi"
                        },
                        new
                        {
                            Id = new Guid("edfbefca-f0f1-4a4f-a063-479e38d36fd7"),
                            CityId = new Guid("1914c2a3-7576-4e5d-a6b2-67e34c409175"),
                            Language = "en",
                            Name = "Chernihiv"
                        },
                        new
                        {
                            Id = new Guid("f0a97eab-5281-49c0-a165-645ffadd540d"),
                            CityId = new Guid("58d53050-f2b4-4571-9f59-e171715fbb3c"),
                            Language = "uk",
                            Name = "Варшава"
                        },
                        new
                        {
                            Id = new Guid("c209d18a-5435-4700-ba95-7b08b65be6bc"),
                            CityId = new Guid("36d87953-8e68-46f0-a588-3b90c9b5f5ce"),
                            Language = "uk",
                            Name = "Люблін"
                        },
                        new
                        {
                            Id = new Guid("b7d85eee-18b9-40bc-8bf7-760ad7a3f97e"),
                            CityId = new Guid("58d53050-f2b4-4571-9f59-e171715fbb3c"),
                            Language = "en",
                            Name = "Varshava"
                        },
                        new
                        {
                            Id = new Guid("03813f27-a0a5-4c65-b0c2-45dedc212a06"),
                            CityId = new Guid("36d87953-8e68-46f0-a588-3b90c9b5f5ce"),
                            Language = "en",
                            Name = "Lublin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a637ea86-fae4-47a3-ad96-d9e630225423"),
                            ISO = "uk"
                        },
                        new
                        {
                            Id = new Guid("1c05835f-b417-4bda-8a51-8b6fc740ef47"),
                            ISO = "pl"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CountryTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ab91f884-8b1e-4b98-9caa-6a2eb154fc91"),
                            CountryId = new Guid("a637ea86-fae4-47a3-ad96-d9e630225423"),
                            Language = "en",
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("1dac11b7-1aca-4f70-b1ca-4e18e3919885"),
                            CountryId = new Guid("a637ea86-fae4-47a3-ad96-d9e630225423"),
                            Language = "uk",
                            Name = "Україна"
                        },
                        new
                        {
                            Id = new Guid("ba0c5939-fa38-431a-aa96-c403bf6eb956"),
                            CountryId = new Guid("1c05835f-b417-4bda-8a51-8b6fc740ef47"),
                            Language = "en",
                            Name = "Poland"
                        },
                        new
                        {
                            Id = new Guid("ff90ee03-f699-499a-bf4c-73f79e7ceac6"),
                            CountryId = new Guid("1c05835f-b417-4bda-8a51-8b6fc740ef47"),
                            Language = "uk",
                            Name = "Польша"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Donate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTimeCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderCardBank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SenderCardCountry")
                        .HasColumnType("int");

                    b.Property<string>("SenderCardMask2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderCardType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SenderCommission")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Donates");
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VolunteerApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VolunteerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VolunteerUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VolunteerUserId", "VolunteerApplicationId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DAL.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplictionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserRecipientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserSenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplictionId");

                    b.HasIndex("UserRecipientId");

                    b.HasIndex("UserSenderId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ProfilePictures");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f857d928-6013-4441-9ed0-6d57e15c8d3e"),
                            Title = "medicine"
                        },
                        new
                        {
                            Id = new Guid("c97fd293-eeee-4096-8385-79b83db403f8"),
                            Title = "cooking"
                        },
                        new
                        {
                            Id = new Guid("ccf140e7-e7c2-4586-a5a0-53a1d618f7dd"),
                            Title = "building"
                        },
                        new
                        {
                            Id = new Guid("95ec868d-06aa-47c2-8ac9-74a3d4eee05d"),
                            Title = "psychology"
                        });
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("701d42fd-c201-4449-b890-46baaabe1d83"),
                            Language = "en",
                            Name = "medicine",
                            SkillId = new Guid("f857d928-6013-4441-9ed0-6d57e15c8d3e")
                        },
                        new
                        {
                            Id = new Guid("1f1babc9-2e7a-45ab-9c20-bd16f9c935f2"),
                            Language = "uk",
                            Name = "медицина",
                            SkillId = new Guid("f857d928-6013-4441-9ed0-6d57e15c8d3e")
                        },
                        new
                        {
                            Id = new Guid("c18e24bf-50b6-4abf-a003-e9bb278ac5b2"),
                            Language = "en",
                            Name = "cooking",
                            SkillId = new Guid("c97fd293-eeee-4096-8385-79b83db403f8")
                        },
                        new
                        {
                            Id = new Guid("ce09598b-665d-4484-96d6-d7bb05162827"),
                            Language = "uk",
                            Name = "кулінарія",
                            SkillId = new Guid("c97fd293-eeee-4096-8385-79b83db403f8")
                        },
                        new
                        {
                            Id = new Guid("beefcbd2-6fe5-4c99-bb3b-65fbae79e1b0"),
                            Language = "en",
                            Name = "building",
                            SkillId = new Guid("ccf140e7-e7c2-4586-a5a0-53a1d618f7dd")
                        },
                        new
                        {
                            Id = new Guid("1a066b47-09d1-46fc-b8e0-1a2caff9223c"),
                            Language = "uk",
                            Name = "будівництво",
                            SkillId = new Guid("ccf140e7-e7c2-4586-a5a0-53a1d618f7dd")
                        },
                        new
                        {
                            Id = new Guid("b64e9472-516b-4511-9acf-f2546158a112"),
                            Language = "en",
                            Name = "psychology",
                            SkillId = new Guid("95ec868d-06aa-47c2-8ac9-74a3d4eee05d")
                        },
                        new
                        {
                            Id = new Guid("1b94eb2c-1485-4702-8459-fa450861fc91"),
                            Language = "uk",
                            Name = "психологія",
                            SkillId = new Guid("95ec868d-06aa-47c2-8ac9-74a3d4eee05d")
                        });
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a0d2d6d4-4e56-4f0b-b03d-4b184ff68545"),
                            CityId = new Guid("c4991e13-d40e-4450-8ab6-3026f230e157"),
                            DateOfBirth = new DateTime(2023, 5, 25, 15, 58, 5, 390, DateTimeKind.Local).AddTicks(4233),
                            FirstName = "the first",
                            LastName = "admin",
                            Login = "ourfirstadmin",
                            Password = "Rk/ryiBNbnHx+s9i1IveCNNw4axYPQHm4T1eratfQlg=",
                            Phone = "+11111111111",
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Document")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DocumentFormat")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("NULL");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ApplicationId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.HasOne("DAL.Entities.Category", "Category")
                        .WithMany("Applications")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("Applications")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationDocument", b =>
                {
                    b.HasOne("DAL.Entities.Application", null)
                        .WithMany("ApplicationDocuments")
                        .HasForeignKey("ApplicationId");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationSkill", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("ApplicationSkills")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("ApplicationSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DAL.Entities.CategoryTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Category", "Category")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("CityTranslations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("CountryTranslations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.Donate", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Donates")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.HasOne("DAL.Entities.Volunteer", "Volunteer")
                        .WithMany("Messages")
                        .HasForeignKey("VolunteerUserId", "VolunteerApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("DAL.Entities.Notification", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Notifications")
                        .HasForeignKey("ApplictionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "UserRecipient")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("UserRecipientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "UserSender")
                        .WithMany("SentNotifications")
                        .HasForeignKey("UserSenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("UserRecipient");

                    b.Navigation("UserSender");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithOne("ProfilePicture")
                        .HasForeignKey("DAL.Entities.ProfilePicture", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("SkillTranslations")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Volunteers")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Volunteers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Navigation("ApplicationDocuments");

                    b.Navigation("ApplicationSkills");

                    b.Navigation("Donates");

                    b.Navigation("Notifications");

                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("CategoryTranslations");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("CityTranslations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("CountryTranslations");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Navigation("ApplicationSkills");

                    b.Navigation("SkillTranslations");

                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ProfilePicture");

                    b.Navigation("ReceivedNotifications");

                    b.Navigation("SentNotifications");

                    b.Navigation("UserSkills");

                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
