// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(VolunteerNetServerDBContext))]
    [Migration("20230521180549_TableNotification")]
    partial class TableNotification
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("CurrentSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<string>("OwnerCardName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequiredNumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<decimal?>("RequiredSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationSkill", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("ApplicationSkills");
                });

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("12ccbc6a-ffd1-4f16-ac82-e19cec0be3a5"),
                            Title = "health care"
                        },
                        new
                        {
                            Id = new Guid("3f92092e-6bc0-48f2-b748-6faf466d2196"),
                            Title = "education"
                        },
                        new
                        {
                            Id = new Guid("f2812d18-58e4-40e1-aa38-5549e8697e1c"),
                            Title = "sports and physical culture"
                        },
                        new
                        {
                            Id = new Guid("5705d2e3-6c42-4f9d-aedd-9222b7478b78"),
                            Title = "culture and art"
                        },
                        new
                        {
                            Id = new Guid("391c9993-0875-40e8-b758-ce8e90d1369f"),
                            Title = "social programs"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CategoryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DescriptionCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1775fdd6-6c2f-4380-bc71-6bd3e90861bc"),
                            CategoryId = new Guid("12ccbc6a-ffd1-4f16-ac82-e19cec0be3a5"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "health care"
                        },
                        new
                        {
                            Id = new Guid("57a92ba1-f300-4e70-9d52-8b40622aa568"),
                            CategoryId = new Guid("12ccbc6a-ffd1-4f16-ac82-e19cec0be3a5"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "охорона здоров'я"
                        },
                        new
                        {
                            Id = new Guid("3d6dd422-1d99-46ec-8795-d56a068e5cc6"),
                            CategoryId = new Guid("3f92092e-6bc0-48f2-b748-6faf466d2196"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "education"
                        },
                        new
                        {
                            Id = new Guid("06523cb4-423a-438c-945d-d3c0d2612655"),
                            CategoryId = new Guid("3f92092e-6bc0-48f2-b748-6faf466d2196"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "освіта"
                        },
                        new
                        {
                            Id = new Guid("8d6ba85e-ed10-4fd9-b407-5bec84b2b234"),
                            CategoryId = new Guid("f2812d18-58e4-40e1-aa38-5549e8697e1c"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "sport and physical culture"
                        },
                        new
                        {
                            Id = new Guid("62431ae0-02a4-4792-a51d-b282d74b357d"),
                            CategoryId = new Guid("f2812d18-58e4-40e1-aa38-5549e8697e1c"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "спорт та фізична культура"
                        },
                        new
                        {
                            Id = new Guid("29c55a14-c8f6-42d7-95d8-16ed867ee9d0"),
                            CategoryId = new Guid("5705d2e3-6c42-4f9d-aedd-9222b7478b78"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "culture and art"
                        },
                        new
                        {
                            Id = new Guid("753c7129-191a-44fb-9b2b-92af781b6761"),
                            CategoryId = new Guid("5705d2e3-6c42-4f9d-aedd-9222b7478b78"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "культура та мистецтво"
                        },
                        new
                        {
                            Id = new Guid("9819d2f2-2a20-4d4c-9c18-fc020aca8948"),
                            CategoryId = new Guid("391c9993-0875-40e8-b758-ce8e90d1369f"),
                            DescriptionCategory = " ",
                            Language = "en",
                            Name = "social programs"
                        },
                        new
                        {
                            Id = new Guid("63c31b11-6773-4789-9fe0-05b34b29125e"),
                            CategoryId = new Guid("391c9993-0875-40e8-b758-ce8e90d1369f"),
                            DescriptionCategory = " ",
                            Language = "uk",
                            Name = "соціальні програми"
                        });
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b6640cbd-c0a6-4e7c-bb09-63167bf682b8"),
                            CountryId = new Guid("6318653e-2fc6-4218-9f23-0b3f2fccd0e1"),
                            ISO = "vi"
                        },
                        new
                        {
                            Id = new Guid("3a019c43-ba82-4404-a2b2-7909d66ca7b9"),
                            CountryId = new Guid("6318653e-2fc6-4218-9f23-0b3f2fccd0e1"),
                            ISO = "dn"
                        },
                        new
                        {
                            Id = new Guid("89cd9292-72ad-44ed-8036-17fbd919e397"),
                            CountryId = new Guid("6318653e-2fc6-4218-9f23-0b3f2fccd0e1"),
                            ISO = "zhy"
                        },
                        new
                        {
                            Id = new Guid("27bdf029-0038-4e96-ac48-7c29385b8ba8"),
                            CountryId = new Guid("6318653e-2fc6-4218-9f23-0b3f2fccd0e1"),
                            ISO = "zp"
                        },
                        new
                        {
                            Id = new Guid("29270762-236b-4241-b4bc-979ac9b3c8d7"),
                            CountryId = new Guid("6318653e-2fc6-4218-9f23-0b3f2fccd0e1"),
                            ISO = "if"
                        },
                        new
                        {
                            Id = new Guid("4377d8f9-6e36-4cb3-8c3b-d9b57db164f1"),
                            CountryId = new Guid("6318653e-2fc6-4218-9f23-0b3f2fccd0e1"),
                            ISO = "ky"
                        },
                        new
                        {
                            Id = new Guid("159c60b8-abe9-444d-9d4d-291e848f1cd7"),
                            CountryId = new Guid("6318653e-2fc6-4218-9f23-0b3f2fccd0e1"),
                            ISO = "kr"
                        },
                        new
                        {
                            Id = new Guid("46459742-a9d5-4846-a2b5-9d92690a83ae"),
                            CountryId = new Guid("6318653e-2fc6-4218-9f23-0b3f2fccd0e1"),
                            ISO = "lut"
                        },
                        new
                        {
                            Id = new Guid("515e7764-cf8f-4ecd-be5b-e56bb6e8ebe4"),
                            CountryId = new Guid("6318653e-2fc6-4218-9f23-0b3f2fccd0e1"),
                            ISO = "lv"
                        },
                        new
                        {
                            Id = new Guid("575718b8-9875-4325-9149-bb46d1bb7b3c"),
                            CountryId = new Guid("6318653e-2fc6-4218-9f23-0b3f2fccd0e1"),
                            ISO = "my"
                        },
                        new
                        {
                            Id = new Guid("5165dfc9-20ff-4cf3-a25d-1cd439e46867"),
                            CountryId = new Guid("6318653e-2fc6-4218-9f23-0b3f2fccd0e1"),
                            ISO = "od"
                        },
                        new
                        {
                            Id = new Guid("b40ef485-dce2-42d5-87e6-fb9adf2a47f1"),
                            CountryId = new Guid("6318653e-2fc6-4218-9f23-0b3f2fccd0e1"),
                            ISO = "pol"
                        },
                        new
                        {
                            Id = new Guid("56393e7a-12a5-4907-8b86-3e030787e8f3"),
                            CountryId = new Guid("6318653e-2fc6-4218-9f23-0b3f2fccd0e1"),
                            ISO = "ri"
                        },
                        new
                        {
                            Id = new Guid("7cb0387c-0af8-4bb5-b6a4-88cc48ddeecb"),
                            CountryId = new Guid("6318653e-2fc6-4218-9f23-0b3f2fccd0e1"),
                            ISO = "su"
                        },
                        new
                        {
                            Id = new Guid("d402e2ec-cc6a-4032-88b5-596deeda84bc"),
                            CountryId = new Guid("6318653e-2fc6-4218-9f23-0b3f2fccd0e1"),
                            ISO = "ter"
                        },
                        new
                        {
                            Id = new Guid("738e0cbb-8ae9-4987-b640-08bbbc0c1b21"),
                            CountryId = new Guid("6318653e-2fc6-4218-9f23-0b3f2fccd0e1"),
                            ISO = "uzh"
                        },
                        new
                        {
                            Id = new Guid("9c3b7c7f-4a5e-4f9c-a599-746a03273cbc"),
                            CountryId = new Guid("6318653e-2fc6-4218-9f23-0b3f2fccd0e1"),
                            ISO = "khar"
                        },
                        new
                        {
                            Id = new Guid("5e470eaa-962e-4fc6-b690-8999c5b587e1"),
                            CountryId = new Guid("6318653e-2fc6-4218-9f23-0b3f2fccd0e1"),
                            ISO = "kher"
                        },
                        new
                        {
                            Id = new Guid("b7b27855-1587-4083-90e7-c2fca811db8c"),
                            CountryId = new Guid("6318653e-2fc6-4218-9f23-0b3f2fccd0e1"),
                            ISO = "khm"
                        },
                        new
                        {
                            Id = new Guid("77921bbc-67b9-4a43-8119-aaf9b92bf85b"),
                            CountryId = new Guid("6318653e-2fc6-4218-9f23-0b3f2fccd0e1"),
                            ISO = "chk"
                        },
                        new
                        {
                            Id = new Guid("aff9c095-18d1-4da9-82ce-e05552c19eda"),
                            CountryId = new Guid("6318653e-2fc6-4218-9f23-0b3f2fccd0e1"),
                            ISO = "chv"
                        },
                        new
                        {
                            Id = new Guid("1fa5e58e-c131-4c21-ba4d-9b97098ac75d"),
                            CountryId = new Guid("6318653e-2fc6-4218-9f23-0b3f2fccd0e1"),
                            ISO = "chh"
                        },
                        new
                        {
                            Id = new Guid("a0a26340-3e4b-4937-8ba0-3d81f366cbbc"),
                            CountryId = new Guid("f5487ac8-3b6b-42f8-a861-f97c19fcd08a"),
                            ISO = "var"
                        },
                        new
                        {
                            Id = new Guid("4d77f085-0304-4a6a-ae18-5dcdaa655815"),
                            CountryId = new Guid("f5487ac8-3b6b-42f8-a861-f97c19fcd08a"),
                            ISO = "lub"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("CityTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("08aa794c-d1e6-4e6a-a4cf-caa5d9de3cc8"),
                            CityId = new Guid("b6640cbd-c0a6-4e7c-bb09-63167bf682b8"),
                            Language = "uk",
                            Name = "Вінниця"
                        },
                        new
                        {
                            Id = new Guid("9ca610f0-8cc0-4c71-ba21-6ecf2b6c3d98"),
                            CityId = new Guid("3a019c43-ba82-4404-a2b2-7909d66ca7b9"),
                            Language = "uk",
                            Name = "Дніпро"
                        },
                        new
                        {
                            Id = new Guid("50024423-7dee-41a3-b985-979d7b22e3ef"),
                            CityId = new Guid("89cd9292-72ad-44ed-8036-17fbd919e397"),
                            Language = "uk",
                            Name = "Житомир"
                        },
                        new
                        {
                            Id = new Guid("9e5595a0-c7f0-440b-919b-bce2cec8d021"),
                            CityId = new Guid("27bdf029-0038-4e96-ac48-7c29385b8ba8"),
                            Language = "uk",
                            Name = "Запоріжжя"
                        },
                        new
                        {
                            Id = new Guid("c609f0a3-15b2-450f-91f9-1d461f9fe338"),
                            CityId = new Guid("29270762-236b-4241-b4bc-979ac9b3c8d7"),
                            Language = "uk",
                            Name = "Івано-Франківськ"
                        },
                        new
                        {
                            Id = new Guid("df71d824-7555-4d0d-b1ee-e9ba2b78de90"),
                            CityId = new Guid("4377d8f9-6e36-4cb3-8c3b-d9b57db164f1"),
                            Language = "uk",
                            Name = "Київ"
                        },
                        new
                        {
                            Id = new Guid("976c7aa1-325c-4750-8d5a-e1e444922d7a"),
                            CityId = new Guid("159c60b8-abe9-444d-9d4d-291e848f1cd7"),
                            Language = "uk",
                            Name = "Кропивницький"
                        },
                        new
                        {
                            Id = new Guid("943d7169-538c-4a52-b790-6a4e0ebdacde"),
                            CityId = new Guid("46459742-a9d5-4846-a2b5-9d92690a83ae"),
                            Language = "uk",
                            Name = "Луцьк"
                        },
                        new
                        {
                            Id = new Guid("0e7834e9-6d0e-495e-a4d2-31ce424f18ec"),
                            CityId = new Guid("515e7764-cf8f-4ecd-be5b-e56bb6e8ebe4"),
                            Language = "uk",
                            Name = "Львів"
                        },
                        new
                        {
                            Id = new Guid("9bb4f61a-cf6d-46f6-a7d1-c1cd6fc28daf"),
                            CityId = new Guid("575718b8-9875-4325-9149-bb46d1bb7b3c"),
                            Language = "uk",
                            Name = "Миколаїв"
                        },
                        new
                        {
                            Id = new Guid("776dee7a-bbc4-45e2-94c8-a0dbee0690c0"),
                            CityId = new Guid("5165dfc9-20ff-4cf3-a25d-1cd439e46867"),
                            Language = "uk",
                            Name = "Одеса"
                        },
                        new
                        {
                            Id = new Guid("6b6420b9-833c-46d4-a673-4bd772fc2707"),
                            CityId = new Guid("b40ef485-dce2-42d5-87e6-fb9adf2a47f1"),
                            Language = "uk",
                            Name = "Полтава"
                        },
                        new
                        {
                            Id = new Guid("ec1ef93d-bbc8-47a9-add2-fda9dbc841b1"),
                            CityId = new Guid("56393e7a-12a5-4907-8b86-3e030787e8f3"),
                            Language = "uk",
                            Name = "Рівне"
                        },
                        new
                        {
                            Id = new Guid("8d2eed9f-25aa-40b6-94db-2ab63647eda4"),
                            CityId = new Guid("7cb0387c-0af8-4bb5-b6a4-88cc48ddeecb"),
                            Language = "uk",
                            Name = "Суми"
                        },
                        new
                        {
                            Id = new Guid("3ba6d37c-cb3e-41c5-a293-092d8e704991"),
                            CityId = new Guid("d402e2ec-cc6a-4032-88b5-596deeda84bc"),
                            Language = "uk",
                            Name = "Тернопіль"
                        },
                        new
                        {
                            Id = new Guid("11b96df9-ec41-4547-9eb7-d070ae3e0cd1"),
                            CityId = new Guid("738e0cbb-8ae9-4987-b640-08bbbc0c1b21"),
                            Language = "uk",
                            Name = "Ужгород"
                        },
                        new
                        {
                            Id = new Guid("b28e98d3-9513-4333-8ded-822b0ba73251"),
                            CityId = new Guid("9c3b7c7f-4a5e-4f9c-a599-746a03273cbc"),
                            Language = "uk",
                            Name = "Харків"
                        },
                        new
                        {
                            Id = new Guid("14b855d8-d97c-4df1-b324-7698424cace9"),
                            CityId = new Guid("5e470eaa-962e-4fc6-b690-8999c5b587e1"),
                            Language = "uk",
                            Name = "Херсон"
                        },
                        new
                        {
                            Id = new Guid("43eb2c38-548f-4b6a-9fa7-9f302022f56f"),
                            CityId = new Guid("b7b27855-1587-4083-90e7-c2fca811db8c"),
                            Language = "uk",
                            Name = "Хмельницький"
                        },
                        new
                        {
                            Id = new Guid("0a6450ab-2fa3-4fe5-943e-797b21aff088"),
                            CityId = new Guid("77921bbc-67b9-4a43-8119-aaf9b92bf85b"),
                            Language = "uk",
                            Name = "Черкаси"
                        },
                        new
                        {
                            Id = new Guid("6cb961d3-1e9b-4fc0-9abd-0cc8815a133a"),
                            CityId = new Guid("aff9c095-18d1-4da9-82ce-e05552c19eda"),
                            Language = "uk",
                            Name = "Чернівці"
                        },
                        new
                        {
                            Id = new Guid("76186f85-d212-4240-9d58-a60fd710b232"),
                            CityId = new Guid("1fa5e58e-c131-4c21-ba4d-9b97098ac75d"),
                            Language = "uk",
                            Name = "Чернігів"
                        },
                        new
                        {
                            Id = new Guid("216606f7-3760-4d4d-9f15-9990da7869ef"),
                            CityId = new Guid("b6640cbd-c0a6-4e7c-bb09-63167bf682b8"),
                            Language = "en",
                            Name = "Vinnytsia"
                        },
                        new
                        {
                            Id = new Guid("ea0e33dd-85ed-4763-9128-f8498fec887a"),
                            CityId = new Guid("3a019c43-ba82-4404-a2b2-7909d66ca7b9"),
                            Language = "en",
                            Name = "Dnipro"
                        },
                        new
                        {
                            Id = new Guid("ced0f4b1-b3b6-4603-8ff7-51b8ad199eab"),
                            CityId = new Guid("89cd9292-72ad-44ed-8036-17fbd919e397"),
                            Language = "en",
                            Name = "Zhytomyr"
                        },
                        new
                        {
                            Id = new Guid("a1f5e3af-8b5d-427d-98c3-5d53af04e9dd"),
                            CityId = new Guid("27bdf029-0038-4e96-ac48-7c29385b8ba8"),
                            Language = "en",
                            Name = "Zaporizhzhia"
                        },
                        new
                        {
                            Id = new Guid("69ca1631-3090-48cc-9ccd-6b4783fae920"),
                            CityId = new Guid("29270762-236b-4241-b4bc-979ac9b3c8d7"),
                            Language = "en",
                            Name = "Ivano-Frankivsk"
                        },
                        new
                        {
                            Id = new Guid("489e0415-6250-4b10-8985-7376dd6865a4"),
                            CityId = new Guid("4377d8f9-6e36-4cb3-8c3b-d9b57db164f1"),
                            Language = "en",
                            Name = "Kyiv"
                        },
                        new
                        {
                            Id = new Guid("386c1246-f1bc-4a04-9d9d-e86976a25d03"),
                            CityId = new Guid("159c60b8-abe9-444d-9d4d-291e848f1cd7"),
                            Language = "en",
                            Name = "Kropyvnytskyi"
                        },
                        new
                        {
                            Id = new Guid("b5e596cc-f48a-41f1-bd1d-21cf1070a50d"),
                            CityId = new Guid("46459742-a9d5-4846-a2b5-9d92690a83ae"),
                            Language = "en",
                            Name = "Lutsk"
                        },
                        new
                        {
                            Id = new Guid("5124ab2e-f590-4429-b85a-3dae8f7383f1"),
                            CityId = new Guid("515e7764-cf8f-4ecd-be5b-e56bb6e8ebe4"),
                            Language = "en",
                            Name = "Lviv"
                        },
                        new
                        {
                            Id = new Guid("7d384580-710c-425b-81a3-63a2865f6364"),
                            CityId = new Guid("575718b8-9875-4325-9149-bb46d1bb7b3c"),
                            Language = "en",
                            Name = "Mykolaiv"
                        },
                        new
                        {
                            Id = new Guid("0a7a3cc6-0b71-49b0-85b3-812ca71159be"),
                            CityId = new Guid("5165dfc9-20ff-4cf3-a25d-1cd439e46867"),
                            Language = "en",
                            Name = "Odesa"
                        },
                        new
                        {
                            Id = new Guid("89c579f9-04cb-4f47-b53a-1f494cfc5f9f"),
                            CityId = new Guid("b40ef485-dce2-42d5-87e6-fb9adf2a47f1"),
                            Language = "en",
                            Name = "Poltava"
                        },
                        new
                        {
                            Id = new Guid("f283dd3e-1d67-43c1-9221-f76cb917b4d9"),
                            CityId = new Guid("56393e7a-12a5-4907-8b86-3e030787e8f3"),
                            Language = "en",
                            Name = "Rivne"
                        },
                        new
                        {
                            Id = new Guid("126d0277-b643-4fa5-85ae-b5e074355ebd"),
                            CityId = new Guid("7cb0387c-0af8-4bb5-b6a4-88cc48ddeecb"),
                            Language = "en",
                            Name = "Sumy"
                        },
                        new
                        {
                            Id = new Guid("67d1c559-8824-4eb9-b14f-59ec04e46216"),
                            CityId = new Guid("d402e2ec-cc6a-4032-88b5-596deeda84bc"),
                            Language = "en",
                            Name = "Ternopil"
                        },
                        new
                        {
                            Id = new Guid("43bf4bab-3ae3-4bd0-9b4d-846c6fd9f20e"),
                            CityId = new Guid("738e0cbb-8ae9-4987-b640-08bbbc0c1b21"),
                            Language = "en",
                            Name = "Uzhhorod"
                        },
                        new
                        {
                            Id = new Guid("29cf1598-8694-44ef-908a-5e3d9ed39e2b"),
                            CityId = new Guid("9c3b7c7f-4a5e-4f9c-a599-746a03273cbc"),
                            Language = "en",
                            Name = "Kharkiv"
                        },
                        new
                        {
                            Id = new Guid("82dd0e62-e7e5-4838-a075-2940cafa7b1d"),
                            CityId = new Guid("5e470eaa-962e-4fc6-b690-8999c5b587e1"),
                            Language = "en",
                            Name = "Kherson"
                        },
                        new
                        {
                            Id = new Guid("b7d06b50-55a5-4abc-b72d-9a99f2993acf"),
                            CityId = new Guid("b7b27855-1587-4083-90e7-c2fca811db8c"),
                            Language = "en",
                            Name = "Khmelnytskyi"
                        },
                        new
                        {
                            Id = new Guid("5e81a7f5-4351-4a69-a620-c2277c51e779"),
                            CityId = new Guid("77921bbc-67b9-4a43-8119-aaf9b92bf85b"),
                            Language = "en",
                            Name = "Cherkasy"
                        },
                        new
                        {
                            Id = new Guid("e15902c3-14e6-4c8d-b6f9-17689b861e6a"),
                            CityId = new Guid("aff9c095-18d1-4da9-82ce-e05552c19eda"),
                            Language = "en",
                            Name = "Chernivtsi"
                        },
                        new
                        {
                            Id = new Guid("c68b6896-d391-4155-890e-5cc19bed1939"),
                            CityId = new Guid("1fa5e58e-c131-4c21-ba4d-9b97098ac75d"),
                            Language = "en",
                            Name = "Chernihiv"
                        },
                        new
                        {
                            Id = new Guid("4005e215-7c31-42dc-9b03-c7c3477d8678"),
                            CityId = new Guid("a0a26340-3e4b-4937-8ba0-3d81f366cbbc"),
                            Language = "uk",
                            Name = "Варшава"
                        },
                        new
                        {
                            Id = new Guid("fae91c8e-ea8d-476e-a062-2e3853ee0052"),
                            CityId = new Guid("4d77f085-0304-4a6a-ae18-5dcdaa655815"),
                            Language = "uk",
                            Name = "Люблін"
                        },
                        new
                        {
                            Id = new Guid("9e8a535c-d0c0-4cc3-9ac6-8c5789e22309"),
                            CityId = new Guid("a0a26340-3e4b-4937-8ba0-3d81f366cbbc"),
                            Language = "en",
                            Name = "Varshava"
                        },
                        new
                        {
                            Id = new Guid("7eabf058-d376-4fd8-a281-9898f4934ba7"),
                            CityId = new Guid("4d77f085-0304-4a6a-ae18-5dcdaa655815"),
                            Language = "en",
                            Name = "Lublin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6318653e-2fc6-4218-9f23-0b3f2fccd0e1"),
                            ISO = "uk"
                        },
                        new
                        {
                            Id = new Guid("f5487ac8-3b6b-42f8-a861-f97c19fcd08a"),
                            ISO = "pl"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CountryTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ef6cd477-eaa1-42c5-8eab-40a90b6bb4b3"),
                            CountryId = new Guid("6318653e-2fc6-4218-9f23-0b3f2fccd0e1"),
                            Language = "en",
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("dab9427f-318a-462b-8d3f-d9f8be589e6b"),
                            CountryId = new Guid("6318653e-2fc6-4218-9f23-0b3f2fccd0e1"),
                            Language = "uk",
                            Name = "Україна"
                        },
                        new
                        {
                            Id = new Guid("b3fe9b49-0928-496b-b9e1-5f8fad6d9d57"),
                            CountryId = new Guid("f5487ac8-3b6b-42f8-a861-f97c19fcd08a"),
                            Language = "en",
                            Name = "Poland"
                        },
                        new
                        {
                            Id = new Guid("d9408c63-7d4a-4bfd-833e-e54338a05137"),
                            CountryId = new Guid("f5487ac8-3b6b-42f8-a861-f97c19fcd08a"),
                            Language = "uk",
                            Name = "Польша"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VolunteerApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VolunteerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VolunteerUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VolunteerUserId", "VolunteerApplicationId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DAL.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplictionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserRecipientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserSenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplictionId");

                    b.HasIndex("UserRecipientId");

                    b.HasIndex("UserSenderId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ProfilePictures");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("13091a59-580d-41d4-8d16-05bb5dd039f8"),
                            Title = "medicine"
                        },
                        new
                        {
                            Id = new Guid("1fcc204a-55e3-4f35-bffd-66f2340d7579"),
                            Title = "cooking"
                        },
                        new
                        {
                            Id = new Guid("e1f817dd-eb71-46d6-8eb1-fa2c5748b7d5"),
                            Title = "building"
                        },
                        new
                        {
                            Id = new Guid("78982b25-e4ca-4a68-9350-30253af349f2"),
                            Title = "psychology"
                        });
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9c5f4e64-cec1-44d6-a63a-1ee1e945098e"),
                            Language = "en",
                            Name = "medicine",
                            SkillId = new Guid("13091a59-580d-41d4-8d16-05bb5dd039f8")
                        },
                        new
                        {
                            Id = new Guid("d04931b4-7a3f-4119-a70b-6dd638db34de"),
                            Language = "uk",
                            Name = "медицина",
                            SkillId = new Guid("13091a59-580d-41d4-8d16-05bb5dd039f8")
                        },
                        new
                        {
                            Id = new Guid("35a127a7-5ee7-41b7-86cc-29de3e96f725"),
                            Language = "en",
                            Name = "cooking",
                            SkillId = new Guid("1fcc204a-55e3-4f35-bffd-66f2340d7579")
                        },
                        new
                        {
                            Id = new Guid("9ae17261-cc8d-45d7-9e3d-6c60d9aa945e"),
                            Language = "uk",
                            Name = "кулінарія",
                            SkillId = new Guid("1fcc204a-55e3-4f35-bffd-66f2340d7579")
                        },
                        new
                        {
                            Id = new Guid("a26a1913-0fbd-47f3-87f9-f718ebb1962d"),
                            Language = "en",
                            Name = "building",
                            SkillId = new Guid("e1f817dd-eb71-46d6-8eb1-fa2c5748b7d5")
                        },
                        new
                        {
                            Id = new Guid("c50e9c32-942f-4e3d-ad02-c7c1294da66d"),
                            Language = "uk",
                            Name = "будівництво",
                            SkillId = new Guid("e1f817dd-eb71-46d6-8eb1-fa2c5748b7d5")
                        },
                        new
                        {
                            Id = new Guid("0677fda1-2d5b-4ed4-b6e6-129287c34075"),
                            Language = "en",
                            Name = "psychology",
                            SkillId = new Guid("78982b25-e4ca-4a68-9350-30253af349f2")
                        },
                        new
                        {
                            Id = new Guid("f3991458-28de-4e53-8d1c-2ac63d9b739e"),
                            Language = "uk",
                            Name = "психологія",
                            SkillId = new Guid("78982b25-e4ca-4a68-9350-30253af349f2")
                        });
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("884f59a9-9367-4a32-b9d9-0dfc7386b977"),
                            CityId = new Guid("b6640cbd-c0a6-4e7c-bb09-63167bf682b8"),
                            DateOfBirth = new DateTime(2023, 5, 21, 21, 5, 37, 595, DateTimeKind.Local).AddTicks(3938),
                            FirstName = "the first",
                            LastName = "admin",
                            Login = "ourfirstadmin",
                            Password = "Rk/ryiBNbnHx+s9i1IveCNNw4axYPQHm4T1eratfQlg=",
                            Phone = "+11111111111",
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Document")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DocumentFormat")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("NULL");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ApplicationId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.HasOne("DAL.Entities.Category", "Category")
                        .WithMany("Applications")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("Applications")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationSkill", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("ApplicationSkills")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("ApplicationSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DAL.Entities.CategoryTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Category", "Category")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("CityTranslations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("CountryTranslations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.HasOne("DAL.Entities.Volunteer", "Volunteer")
                        .WithMany("Messages")
                        .HasForeignKey("VolunteerUserId", "VolunteerApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("DAL.Entities.Notification", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Notifications")
                        .HasForeignKey("ApplictionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "UserRecipient")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("UserRecipientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "UserSender")
                        .WithMany("SentNotifications")
                        .HasForeignKey("UserSenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("UserRecipient");

                    b.Navigation("UserSender");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithOne("ProfilePicture")
                        .HasForeignKey("DAL.Entities.ProfilePicture", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("SkillTranslations")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Volunteers")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Volunteers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Navigation("ApplicationSkills");

                    b.Navigation("Notifications");

                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("CategoryTranslations");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("CityTranslations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("CountryTranslations");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Navigation("ApplicationSkills");

                    b.Navigation("SkillTranslations");

                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ProfilePicture");

                    b.Navigation("ReceivedNotifications");

                    b.Navigation("SentNotifications");

                    b.Navigation("UserSkills");

                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
