// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(VolunteerNetServerDBContext))]
    [Migration("20230426141834_EntityPrimaryKeys")]
    partial class EntityPrimaryKeys
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<int>("RequiredNumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("23d60066-a01c-4125-9460-51c2c44be3fb"),
                            CountryId = new Guid("628bfb3f-90a6-42a4-9973-c72aee72e5b9"),
                            ISO = "vi"
                        },
                        new
                        {
                            Id = new Guid("939d7624-52ea-40a8-b97e-2e6072e0e447"),
                            CountryId = new Guid("628bfb3f-90a6-42a4-9973-c72aee72e5b9"),
                            ISO = "dn"
                        },
                        new
                        {
                            Id = new Guid("934505a6-ed3e-496e-9b12-ae5ecb29caac"),
                            CountryId = new Guid("628bfb3f-90a6-42a4-9973-c72aee72e5b9"),
                            ISO = "zhy"
                        },
                        new
                        {
                            Id = new Guid("e22a3e3a-b2c7-4594-9c3c-b1ee82f2abc5"),
                            CountryId = new Guid("628bfb3f-90a6-42a4-9973-c72aee72e5b9"),
                            ISO = "zp"
                        },
                        new
                        {
                            Id = new Guid("4088df07-4729-4128-b389-bdf531374e61"),
                            CountryId = new Guid("628bfb3f-90a6-42a4-9973-c72aee72e5b9"),
                            ISO = "if"
                        },
                        new
                        {
                            Id = new Guid("8365520c-7adb-40e7-8f8e-8aa894f23f45"),
                            CountryId = new Guid("628bfb3f-90a6-42a4-9973-c72aee72e5b9"),
                            ISO = "ky"
                        },
                        new
                        {
                            Id = new Guid("716cb3a2-c82f-4c9f-bf11-6eb607ccf157"),
                            CountryId = new Guid("628bfb3f-90a6-42a4-9973-c72aee72e5b9"),
                            ISO = "kr"
                        },
                        new
                        {
                            Id = new Guid("8c3d236f-e3bd-4e5d-8242-d0fc9001873e"),
                            CountryId = new Guid("628bfb3f-90a6-42a4-9973-c72aee72e5b9"),
                            ISO = "lut"
                        },
                        new
                        {
                            Id = new Guid("15e8f167-21e1-49e1-81cf-b887e2a2df7e"),
                            CountryId = new Guid("628bfb3f-90a6-42a4-9973-c72aee72e5b9"),
                            ISO = "lv"
                        },
                        new
                        {
                            Id = new Guid("b714d7fc-117d-4d6c-8047-d2b18d8545e2"),
                            CountryId = new Guid("628bfb3f-90a6-42a4-9973-c72aee72e5b9"),
                            ISO = "my"
                        },
                        new
                        {
                            Id = new Guid("2e4a0a3a-ae27-4214-a8dd-ee62cf873c97"),
                            CountryId = new Guid("628bfb3f-90a6-42a4-9973-c72aee72e5b9"),
                            ISO = "od"
                        },
                        new
                        {
                            Id = new Guid("5f4ab7e4-02a8-40b9-b567-d10419997cee"),
                            CountryId = new Guid("628bfb3f-90a6-42a4-9973-c72aee72e5b9"),
                            ISO = "pol"
                        },
                        new
                        {
                            Id = new Guid("a5439bfb-0e63-47ac-baf5-682cf7796c25"),
                            CountryId = new Guid("628bfb3f-90a6-42a4-9973-c72aee72e5b9"),
                            ISO = "ri"
                        },
                        new
                        {
                            Id = new Guid("6df1614f-5e36-4570-a8ae-d376ab6cbeb0"),
                            CountryId = new Guid("628bfb3f-90a6-42a4-9973-c72aee72e5b9"),
                            ISO = "su"
                        },
                        new
                        {
                            Id = new Guid("babba8eb-e8e3-4723-b503-5ea3675a140c"),
                            CountryId = new Guid("628bfb3f-90a6-42a4-9973-c72aee72e5b9"),
                            ISO = "ter"
                        },
                        new
                        {
                            Id = new Guid("27b25b9e-8e43-4207-8eae-1fe85643e3f9"),
                            CountryId = new Guid("628bfb3f-90a6-42a4-9973-c72aee72e5b9"),
                            ISO = "uzh"
                        },
                        new
                        {
                            Id = new Guid("c2a03a37-ca5a-475c-b3e1-00808fdb08ca"),
                            CountryId = new Guid("628bfb3f-90a6-42a4-9973-c72aee72e5b9"),
                            ISO = "khar"
                        },
                        new
                        {
                            Id = new Guid("bc59eea7-2ec7-4aad-9c24-481d07c8b313"),
                            CountryId = new Guid("628bfb3f-90a6-42a4-9973-c72aee72e5b9"),
                            ISO = "kher"
                        },
                        new
                        {
                            Id = new Guid("a9cb8fcb-ef04-4c84-8422-b0c6ea6f1ceb"),
                            CountryId = new Guid("628bfb3f-90a6-42a4-9973-c72aee72e5b9"),
                            ISO = "khm"
                        },
                        new
                        {
                            Id = new Guid("56e61e49-8a4e-41aa-b065-3394199b480c"),
                            CountryId = new Guid("628bfb3f-90a6-42a4-9973-c72aee72e5b9"),
                            ISO = "chk"
                        },
                        new
                        {
                            Id = new Guid("fd204277-732a-4046-88c8-66e4f048106b"),
                            CountryId = new Guid("628bfb3f-90a6-42a4-9973-c72aee72e5b9"),
                            ISO = "chv"
                        },
                        new
                        {
                            Id = new Guid("e31a4b03-01fb-4405-b6ae-84495f2e1a99"),
                            CountryId = new Guid("628bfb3f-90a6-42a4-9973-c72aee72e5b9"),
                            ISO = "chh"
                        },
                        new
                        {
                            Id = new Guid("c9f83da1-4f06-483e-bf71-34766d8ed071"),
                            CountryId = new Guid("93fec4cc-1158-46fd-b81b-0d644fee2af1"),
                            ISO = "var"
                        },
                        new
                        {
                            Id = new Guid("e1d7776b-7bb4-4f31-9f5c-484bcfa259dc"),
                            CountryId = new Guid("93fec4cc-1158-46fd-b81b-0d644fee2af1"),
                            ISO = "lub"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("CityTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1fb5f52b-984f-4011-b1e8-4ce4deca7313"),
                            CityId = new Guid("23d60066-a01c-4125-9460-51c2c44be3fb"),
                            Language = "uk",
                            Name = "Вінниця"
                        },
                        new
                        {
                            Id = new Guid("ad5c22e7-4ac9-4e7e-9c21-b87fb8858839"),
                            CityId = new Guid("939d7624-52ea-40a8-b97e-2e6072e0e447"),
                            Language = "uk",
                            Name = "Дніпро"
                        },
                        new
                        {
                            Id = new Guid("28fe3f66-b14a-4332-81e3-928a881bcf9d"),
                            CityId = new Guid("934505a6-ed3e-496e-9b12-ae5ecb29caac"),
                            Language = "uk",
                            Name = "Житомир"
                        },
                        new
                        {
                            Id = new Guid("d6a280c0-0467-4a36-9163-f87e7203da80"),
                            CityId = new Guid("e22a3e3a-b2c7-4594-9c3c-b1ee82f2abc5"),
                            Language = "uk",
                            Name = "Запоріжжя"
                        },
                        new
                        {
                            Id = new Guid("6c9eeb21-38aa-4dc4-915e-5240a79756d4"),
                            CityId = new Guid("4088df07-4729-4128-b389-bdf531374e61"),
                            Language = "uk",
                            Name = "Івано-Франківськ"
                        },
                        new
                        {
                            Id = new Guid("3ce6d72e-69c5-4765-b4ff-7f8625d49f80"),
                            CityId = new Guid("8365520c-7adb-40e7-8f8e-8aa894f23f45"),
                            Language = "uk",
                            Name = "Київ"
                        },
                        new
                        {
                            Id = new Guid("36abdab1-e3fa-4737-9205-48c7ee1a78c7"),
                            CityId = new Guid("716cb3a2-c82f-4c9f-bf11-6eb607ccf157"),
                            Language = "uk",
                            Name = "Кропивницький"
                        },
                        new
                        {
                            Id = new Guid("43bd6193-133e-4355-8b60-88d8e49bdcb8"),
                            CityId = new Guid("8c3d236f-e3bd-4e5d-8242-d0fc9001873e"),
                            Language = "uk",
                            Name = "Луцьк"
                        },
                        new
                        {
                            Id = new Guid("d0eef493-1e32-4762-b157-571e302ae665"),
                            CityId = new Guid("15e8f167-21e1-49e1-81cf-b887e2a2df7e"),
                            Language = "uk",
                            Name = "Львів"
                        },
                        new
                        {
                            Id = new Guid("9aa96f91-e411-423f-8bba-1a9c5aa815fc"),
                            CityId = new Guid("b714d7fc-117d-4d6c-8047-d2b18d8545e2"),
                            Language = "uk",
                            Name = "Миколаїв"
                        },
                        new
                        {
                            Id = new Guid("226cb4a1-73b6-45c6-9c79-63f0d8042d88"),
                            CityId = new Guid("2e4a0a3a-ae27-4214-a8dd-ee62cf873c97"),
                            Language = "uk",
                            Name = "Одеса"
                        },
                        new
                        {
                            Id = new Guid("e69d5492-4b9a-41b1-8776-3fe369046ea3"),
                            CityId = new Guid("5f4ab7e4-02a8-40b9-b567-d10419997cee"),
                            Language = "uk",
                            Name = "Полтава"
                        },
                        new
                        {
                            Id = new Guid("8de41efc-d728-4aff-a20f-22caddeefb44"),
                            CityId = new Guid("a5439bfb-0e63-47ac-baf5-682cf7796c25"),
                            Language = "uk",
                            Name = "Рівне"
                        },
                        new
                        {
                            Id = new Guid("578f8420-f85d-4f10-b889-174dd4d3572a"),
                            CityId = new Guid("6df1614f-5e36-4570-a8ae-d376ab6cbeb0"),
                            Language = "uk",
                            Name = "Суми"
                        },
                        new
                        {
                            Id = new Guid("9838475e-c69c-415d-abfd-9e7ddf018d42"),
                            CityId = new Guid("babba8eb-e8e3-4723-b503-5ea3675a140c"),
                            Language = "uk",
                            Name = "Тернопіль"
                        },
                        new
                        {
                            Id = new Guid("4871c457-d4d2-4acc-b64f-1660bd14696d"),
                            CityId = new Guid("27b25b9e-8e43-4207-8eae-1fe85643e3f9"),
                            Language = "uk",
                            Name = "Ужгород"
                        },
                        new
                        {
                            Id = new Guid("b0296d6c-76ef-486d-880f-9c477397de38"),
                            CityId = new Guid("c2a03a37-ca5a-475c-b3e1-00808fdb08ca"),
                            Language = "uk",
                            Name = "Харків"
                        },
                        new
                        {
                            Id = new Guid("bce92c61-7a5b-4ed9-86dd-ccf264e8dcc9"),
                            CityId = new Guid("bc59eea7-2ec7-4aad-9c24-481d07c8b313"),
                            Language = "uk",
                            Name = "Херсон"
                        },
                        new
                        {
                            Id = new Guid("5a01d0ac-a7b4-4692-b1cf-6f37681def31"),
                            CityId = new Guid("a9cb8fcb-ef04-4c84-8422-b0c6ea6f1ceb"),
                            Language = "uk",
                            Name = "Хмельницький"
                        },
                        new
                        {
                            Id = new Guid("970ac055-5be2-445d-887d-6afbaa590675"),
                            CityId = new Guid("56e61e49-8a4e-41aa-b065-3394199b480c"),
                            Language = "uk",
                            Name = "Черкаси"
                        },
                        new
                        {
                            Id = new Guid("68553fe7-670f-4919-9376-731eb5f9a296"),
                            CityId = new Guid("fd204277-732a-4046-88c8-66e4f048106b"),
                            Language = "uk",
                            Name = "Чернівці"
                        },
                        new
                        {
                            Id = new Guid("8f426450-23bf-4f52-bd5b-0ee3f594a811"),
                            CityId = new Guid("e31a4b03-01fb-4405-b6ae-84495f2e1a99"),
                            Language = "uk",
                            Name = "Чернігів"
                        },
                        new
                        {
                            Id = new Guid("3c1d5f5b-f020-4cfc-98d8-f3e6c05274ef"),
                            CityId = new Guid("23d60066-a01c-4125-9460-51c2c44be3fb"),
                            Language = "en",
                            Name = "Vinnytsia"
                        },
                        new
                        {
                            Id = new Guid("53b69b17-3cef-42dd-9fe0-beee9eeacbcd"),
                            CityId = new Guid("939d7624-52ea-40a8-b97e-2e6072e0e447"),
                            Language = "en",
                            Name = "Dnipro"
                        },
                        new
                        {
                            Id = new Guid("d25eb61b-c629-43eb-8734-447fa4467b4c"),
                            CityId = new Guid("934505a6-ed3e-496e-9b12-ae5ecb29caac"),
                            Language = "en",
                            Name = "Zhytomyr"
                        },
                        new
                        {
                            Id = new Guid("5dab1a90-93fd-44fe-ab5e-b57f5f4f501f"),
                            CityId = new Guid("e22a3e3a-b2c7-4594-9c3c-b1ee82f2abc5"),
                            Language = "en",
                            Name = "Zaporizhzhia"
                        },
                        new
                        {
                            Id = new Guid("41e632b2-3eb3-4b17-884b-a44000fdfe8e"),
                            CityId = new Guid("4088df07-4729-4128-b389-bdf531374e61"),
                            Language = "en",
                            Name = "Ivano-Frankivsk"
                        },
                        new
                        {
                            Id = new Guid("d64f8a31-301a-441a-8c59-b53d6810a8a3"),
                            CityId = new Guid("8365520c-7adb-40e7-8f8e-8aa894f23f45"),
                            Language = "en",
                            Name = "Kyiv"
                        },
                        new
                        {
                            Id = new Guid("235d4fa7-63d7-444a-afb9-3ba56f6fcce5"),
                            CityId = new Guid("716cb3a2-c82f-4c9f-bf11-6eb607ccf157"),
                            Language = "en",
                            Name = "Kropyvnytskyi"
                        },
                        new
                        {
                            Id = new Guid("5dee43ee-4dfd-4d02-b8ba-a937017370eb"),
                            CityId = new Guid("8c3d236f-e3bd-4e5d-8242-d0fc9001873e"),
                            Language = "en",
                            Name = "Lutsk"
                        },
                        new
                        {
                            Id = new Guid("717a1532-38b0-4804-bb97-733f84600485"),
                            CityId = new Guid("15e8f167-21e1-49e1-81cf-b887e2a2df7e"),
                            Language = "en",
                            Name = "Lviv"
                        },
                        new
                        {
                            Id = new Guid("a2b6266a-65ea-40b5-8120-87ea7fcefe4d"),
                            CityId = new Guid("b714d7fc-117d-4d6c-8047-d2b18d8545e2"),
                            Language = "en",
                            Name = "Mykolaiv"
                        },
                        new
                        {
                            Id = new Guid("98379b5c-95f5-484c-b1fb-eda95774049c"),
                            CityId = new Guid("2e4a0a3a-ae27-4214-a8dd-ee62cf873c97"),
                            Language = "en",
                            Name = "Odesa"
                        },
                        new
                        {
                            Id = new Guid("5a55a23e-0d86-438e-a411-fd8a47953de0"),
                            CityId = new Guid("5f4ab7e4-02a8-40b9-b567-d10419997cee"),
                            Language = "en",
                            Name = "Poltava"
                        },
                        new
                        {
                            Id = new Guid("3b67fdcc-5535-401f-9321-6fdd4b4ee1ba"),
                            CityId = new Guid("a5439bfb-0e63-47ac-baf5-682cf7796c25"),
                            Language = "en",
                            Name = "Rivne"
                        },
                        new
                        {
                            Id = new Guid("1de47fdb-5658-4fc1-bb55-22e9eb5f461a"),
                            CityId = new Guid("6df1614f-5e36-4570-a8ae-d376ab6cbeb0"),
                            Language = "en",
                            Name = "Sumy"
                        },
                        new
                        {
                            Id = new Guid("92382b29-e9b2-4043-8480-c9cd158070fe"),
                            CityId = new Guid("babba8eb-e8e3-4723-b503-5ea3675a140c"),
                            Language = "en",
                            Name = "Ternopil"
                        },
                        new
                        {
                            Id = new Guid("593312b7-28d8-468a-b684-454895649ceb"),
                            CityId = new Guid("27b25b9e-8e43-4207-8eae-1fe85643e3f9"),
                            Language = "en",
                            Name = "Uzhhorod"
                        },
                        new
                        {
                            Id = new Guid("8920fa5d-dcbe-4f65-bf9c-8f985ddf0b0d"),
                            CityId = new Guid("c2a03a37-ca5a-475c-b3e1-00808fdb08ca"),
                            Language = "en",
                            Name = "Kharkiv"
                        },
                        new
                        {
                            Id = new Guid("b537c895-e853-4970-ae03-143dcbe7d93c"),
                            CityId = new Guid("bc59eea7-2ec7-4aad-9c24-481d07c8b313"),
                            Language = "en",
                            Name = "Kherson"
                        },
                        new
                        {
                            Id = new Guid("051261dc-8737-4b93-9fbc-a49bce7a225b"),
                            CityId = new Guid("a9cb8fcb-ef04-4c84-8422-b0c6ea6f1ceb"),
                            Language = "en",
                            Name = "Khmelnytskyi"
                        },
                        new
                        {
                            Id = new Guid("a4ee79b6-692d-420c-a435-aa72dfb3e4fc"),
                            CityId = new Guid("56e61e49-8a4e-41aa-b065-3394199b480c"),
                            Language = "en",
                            Name = "Cherkasy"
                        },
                        new
                        {
                            Id = new Guid("2b2d9da8-75be-4691-8e8f-3ab0f5bb58c3"),
                            CityId = new Guid("fd204277-732a-4046-88c8-66e4f048106b"),
                            Language = "en",
                            Name = "Chernivtsi"
                        },
                        new
                        {
                            Id = new Guid("8c5c9539-8b8b-48ab-8bc1-d611ea4fafd3"),
                            CityId = new Guid("e31a4b03-01fb-4405-b6ae-84495f2e1a99"),
                            Language = "en",
                            Name = "Chernihiv"
                        },
                        new
                        {
                            Id = new Guid("b1430633-169a-4e5f-b4a8-1d2e4f2fe08b"),
                            CityId = new Guid("c9f83da1-4f06-483e-bf71-34766d8ed071"),
                            Language = "uk",
                            Name = "Варшава"
                        },
                        new
                        {
                            Id = new Guid("b586dd49-f4a9-408e-bd05-450f0612b633"),
                            CityId = new Guid("e1d7776b-7bb4-4f31-9f5c-484bcfa259dc"),
                            Language = "uk",
                            Name = "Люблін"
                        },
                        new
                        {
                            Id = new Guid("e8465d04-32f0-4053-a9b5-ebb050453377"),
                            CityId = new Guid("c9f83da1-4f06-483e-bf71-34766d8ed071"),
                            Language = "en",
                            Name = "Varshava"
                        },
                        new
                        {
                            Id = new Guid("7e117298-8d7c-417f-a6f1-f109717efdde"),
                            CityId = new Guid("e1d7776b-7bb4-4f31-9f5c-484bcfa259dc"),
                            Language = "en",
                            Name = "Lublin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("628bfb3f-90a6-42a4-9973-c72aee72e5b9"),
                            ISO = "uk"
                        },
                        new
                        {
                            Id = new Guid("93fec4cc-1158-46fd-b81b-0d644fee2af1"),
                            ISO = "pl"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CountryTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ea006e47-2d8b-4da2-8092-0958a4323e82"),
                            CountryId = new Guid("628bfb3f-90a6-42a4-9973-c72aee72e5b9"),
                            Language = "en",
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("3e1eb895-011f-431a-aae0-8adac485563c"),
                            CountryId = new Guid("628bfb3f-90a6-42a4-9973-c72aee72e5b9"),
                            Language = "uk",
                            Name = "Україна"
                        },
                        new
                        {
                            Id = new Guid("52edb4d6-03c1-452a-9b04-33d6ad419f3a"),
                            CountryId = new Guid("93fec4cc-1158-46fd-b81b-0d644fee2af1"),
                            Language = "en",
                            Name = "Poland"
                        },
                        new
                        {
                            Id = new Guid("837b1f50-18e5-4da2-bbb0-b2ae54ff7f8f"),
                            CountryId = new Guid("93fec4cc-1158-46fd-b81b-0d644fee2af1"),
                            Language = "uk",
                            Name = "Польша"
                        });
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ProfilePictures");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2eba7b4c-d6b4-4a32-b579-f4bdf90026a6"),
                            Title = "medicine"
                        },
                        new
                        {
                            Id = new Guid("b065d92a-1bfc-4e8e-b00f-1fc491862519"),
                            Title = "cooking"
                        },
                        new
                        {
                            Id = new Guid("6a03759c-51d1-4d14-8e76-dcab55f9de85"),
                            Title = "building"
                        },
                        new
                        {
                            Id = new Guid("283f0b56-84f0-4dd5-a434-f4b57ad4f17f"),
                            Title = "psychology"
                        });
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ba77a535-1aca-44e9-a99c-8b67157f2199"),
                            Language = "en",
                            Name = "medicine",
                            SkillId = new Guid("2eba7b4c-d6b4-4a32-b579-f4bdf90026a6")
                        },
                        new
                        {
                            Id = new Guid("0f71bad8-5fe0-44a1-8174-7ce051be90d8"),
                            Language = "uk",
                            Name = "медицина",
                            SkillId = new Guid("2eba7b4c-d6b4-4a32-b579-f4bdf90026a6")
                        },
                        new
                        {
                            Id = new Guid("56ec8eb3-5826-4bbc-9f18-58a8d485d98f"),
                            Language = "en",
                            Name = "cooking",
                            SkillId = new Guid("b065d92a-1bfc-4e8e-b00f-1fc491862519")
                        },
                        new
                        {
                            Id = new Guid("9501b578-46cf-4d34-b165-0ce70e8f2111"),
                            Language = "uk",
                            Name = "кулінарія",
                            SkillId = new Guid("b065d92a-1bfc-4e8e-b00f-1fc491862519")
                        },
                        new
                        {
                            Id = new Guid("6a397d20-ce7b-432c-b70d-4ceecccdde00"),
                            Language = "en",
                            Name = "building",
                            SkillId = new Guid("6a03759c-51d1-4d14-8e76-dcab55f9de85")
                        },
                        new
                        {
                            Id = new Guid("00b60ec9-26e1-4c53-91a5-3a5b6e4a6af9"),
                            Language = "uk",
                            Name = "будівництво",
                            SkillId = new Guid("6a03759c-51d1-4d14-8e76-dcab55f9de85")
                        },
                        new
                        {
                            Id = new Guid("98baebe6-b055-4bb0-8b36-391e5c823553"),
                            Language = "en",
                            Name = "psychology",
                            SkillId = new Guid("283f0b56-84f0-4dd5-a434-f4b57ad4f17f")
                        },
                        new
                        {
                            Id = new Guid("dddd9a7e-20c7-41c6-bd11-f138b56e5871"),
                            Language = "uk",
                            Name = "психологія",
                            SkillId = new Guid("283f0b56-84f0-4dd5-a434-f4b57ad4f17f")
                        });
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bc3138db-1a56-497b-9c68-811d6f492496"),
                            CityId = new Guid("23d60066-a01c-4125-9460-51c2c44be3fb"),
                            DateOfBirth = new DateTime(2023, 4, 26, 17, 18, 34, 492, DateTimeKind.Local).AddTicks(2563),
                            FirstName = "the first",
                            LastName = "admin",
                            Login = "ourfirstadmin",
                            Password = "Rk/ryiBNbnHx+s9i1IveCNNw4axYPQHm4T1eratfQlg=",
                            Phone = "+11111111111",
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Document")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DocumentFormat")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("NULL");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ApplicationId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("CityTranslations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("CountryTranslations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithOne("ProfilePicture")
                        .HasForeignKey("DAL.Entities.ProfilePicture", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("SkillTranslations")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Volunteers")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Volunteers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Navigation("CityTranslations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("CountryTranslations");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Navigation("SkillTranslations");

                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ProfilePicture");

                    b.Navigation("UserSkills");

                    b.Navigation("Volunteers");
                });
#pragma warning restore 612, 618
        }
    }
}
