// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(VolunteerNetServerDBContext))]
    [Migration("20230429194225_MessageDateTime")]
    partial class MessageDateTime
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<int>("RequiredNumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("32b8ea14-3abc-4de9-9e10-28467f77ab36"),
                            CountryId = new Guid("ad6d19c5-9475-4fed-af86-676caac46f8d"),
                            ISO = "vi"
                        },
                        new
                        {
                            Id = new Guid("74f3605a-bbe9-4448-9d9e-256dd153cfea"),
                            CountryId = new Guid("ad6d19c5-9475-4fed-af86-676caac46f8d"),
                            ISO = "dn"
                        },
                        new
                        {
                            Id = new Guid("e49496ff-aa30-48ef-858b-3112330c2554"),
                            CountryId = new Guid("ad6d19c5-9475-4fed-af86-676caac46f8d"),
                            ISO = "zhy"
                        },
                        new
                        {
                            Id = new Guid("6333c8c0-2b12-4859-b710-af924b524eab"),
                            CountryId = new Guid("ad6d19c5-9475-4fed-af86-676caac46f8d"),
                            ISO = "zp"
                        },
                        new
                        {
                            Id = new Guid("76c5af12-d268-4cae-9b5b-14cb5317fa82"),
                            CountryId = new Guid("ad6d19c5-9475-4fed-af86-676caac46f8d"),
                            ISO = "if"
                        },
                        new
                        {
                            Id = new Guid("10e9ddb3-07d2-46eb-8960-e7f824f69c10"),
                            CountryId = new Guid("ad6d19c5-9475-4fed-af86-676caac46f8d"),
                            ISO = "ky"
                        },
                        new
                        {
                            Id = new Guid("777df35c-1c3b-4af5-b0be-0b8fb058e6df"),
                            CountryId = new Guid("ad6d19c5-9475-4fed-af86-676caac46f8d"),
                            ISO = "kr"
                        },
                        new
                        {
                            Id = new Guid("6b7d4243-8ff7-450a-8505-8f3f1eabf2c7"),
                            CountryId = new Guid("ad6d19c5-9475-4fed-af86-676caac46f8d"),
                            ISO = "lut"
                        },
                        new
                        {
                            Id = new Guid("91eed7ae-8659-48e9-b7f6-2e3bf249c216"),
                            CountryId = new Guid("ad6d19c5-9475-4fed-af86-676caac46f8d"),
                            ISO = "lv"
                        },
                        new
                        {
                            Id = new Guid("8e6e4b90-f5c7-4f84-9944-4e71c0c68240"),
                            CountryId = new Guid("ad6d19c5-9475-4fed-af86-676caac46f8d"),
                            ISO = "my"
                        },
                        new
                        {
                            Id = new Guid("39d2507e-c3b2-4587-b5f2-0710d47bb5cd"),
                            CountryId = new Guid("ad6d19c5-9475-4fed-af86-676caac46f8d"),
                            ISO = "od"
                        },
                        new
                        {
                            Id = new Guid("32d638a4-1952-470a-b23f-f2627498cc97"),
                            CountryId = new Guid("ad6d19c5-9475-4fed-af86-676caac46f8d"),
                            ISO = "pol"
                        },
                        new
                        {
                            Id = new Guid("6ff4cc82-931f-48bf-944e-7333d56ebb92"),
                            CountryId = new Guid("ad6d19c5-9475-4fed-af86-676caac46f8d"),
                            ISO = "ri"
                        },
                        new
                        {
                            Id = new Guid("0047646d-0463-41fd-b212-20f87452c46c"),
                            CountryId = new Guid("ad6d19c5-9475-4fed-af86-676caac46f8d"),
                            ISO = "su"
                        },
                        new
                        {
                            Id = new Guid("7ee63579-eaea-4daf-a04d-f8b4c5209e81"),
                            CountryId = new Guid("ad6d19c5-9475-4fed-af86-676caac46f8d"),
                            ISO = "ter"
                        },
                        new
                        {
                            Id = new Guid("e4601708-74d7-4f62-b5b8-4ecac25a3d93"),
                            CountryId = new Guid("ad6d19c5-9475-4fed-af86-676caac46f8d"),
                            ISO = "uzh"
                        },
                        new
                        {
                            Id = new Guid("9a3c15ab-7a01-47df-82f7-503db2815928"),
                            CountryId = new Guid("ad6d19c5-9475-4fed-af86-676caac46f8d"),
                            ISO = "khar"
                        },
                        new
                        {
                            Id = new Guid("f938372e-a64c-4f9b-a41d-d272d5218530"),
                            CountryId = new Guid("ad6d19c5-9475-4fed-af86-676caac46f8d"),
                            ISO = "kher"
                        },
                        new
                        {
                            Id = new Guid("132bb179-8927-41ba-ad6c-95abcb4dd298"),
                            CountryId = new Guid("ad6d19c5-9475-4fed-af86-676caac46f8d"),
                            ISO = "khm"
                        },
                        new
                        {
                            Id = new Guid("6cdf8056-a4a6-4a04-94bc-8c7cdc02916b"),
                            CountryId = new Guid("ad6d19c5-9475-4fed-af86-676caac46f8d"),
                            ISO = "chk"
                        },
                        new
                        {
                            Id = new Guid("7df36eaf-5315-4d51-9bf2-b6f223ea9d3d"),
                            CountryId = new Guid("ad6d19c5-9475-4fed-af86-676caac46f8d"),
                            ISO = "chv"
                        },
                        new
                        {
                            Id = new Guid("ecb241ff-48d2-4a30-8d2f-e19aaeae6966"),
                            CountryId = new Guid("ad6d19c5-9475-4fed-af86-676caac46f8d"),
                            ISO = "chh"
                        },
                        new
                        {
                            Id = new Guid("236dea69-6222-4e35-836e-de79882c9884"),
                            CountryId = new Guid("4db20a35-50f9-4a0a-83e0-652e51c00838"),
                            ISO = "var"
                        },
                        new
                        {
                            Id = new Guid("7f1a433d-15ec-47d1-bc31-c55d22d77cf7"),
                            CountryId = new Guid("4db20a35-50f9-4a0a-83e0-652e51c00838"),
                            ISO = "lub"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("CityTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f9dbb874-f3f5-4896-95db-dddbbd6fd918"),
                            CityId = new Guid("32b8ea14-3abc-4de9-9e10-28467f77ab36"),
                            Language = "uk",
                            Name = "Вінниця"
                        },
                        new
                        {
                            Id = new Guid("a39d3b14-f8d8-4625-8828-8ab03ce825fb"),
                            CityId = new Guid("74f3605a-bbe9-4448-9d9e-256dd153cfea"),
                            Language = "uk",
                            Name = "Дніпро"
                        },
                        new
                        {
                            Id = new Guid("81fe4aa5-1eaf-46ff-9c22-d21084932dcd"),
                            CityId = new Guid("e49496ff-aa30-48ef-858b-3112330c2554"),
                            Language = "uk",
                            Name = "Житомир"
                        },
                        new
                        {
                            Id = new Guid("01ac85c0-5d0e-4499-9a2e-0a8ada37b9f7"),
                            CityId = new Guid("6333c8c0-2b12-4859-b710-af924b524eab"),
                            Language = "uk",
                            Name = "Запоріжжя"
                        },
                        new
                        {
                            Id = new Guid("d4c9726a-271d-4983-907a-368a4b32cb0c"),
                            CityId = new Guid("76c5af12-d268-4cae-9b5b-14cb5317fa82"),
                            Language = "uk",
                            Name = "Івано-Франківськ"
                        },
                        new
                        {
                            Id = new Guid("e8c5d3cb-54d3-4f12-b3a4-d940d9fe0441"),
                            CityId = new Guid("10e9ddb3-07d2-46eb-8960-e7f824f69c10"),
                            Language = "uk",
                            Name = "Київ"
                        },
                        new
                        {
                            Id = new Guid("ccbf579a-04be-4b28-83ef-7ba92ca7c7ff"),
                            CityId = new Guid("777df35c-1c3b-4af5-b0be-0b8fb058e6df"),
                            Language = "uk",
                            Name = "Кропивницький"
                        },
                        new
                        {
                            Id = new Guid("089bf411-69ec-4f99-8063-c4c7d0175566"),
                            CityId = new Guid("6b7d4243-8ff7-450a-8505-8f3f1eabf2c7"),
                            Language = "uk",
                            Name = "Луцьк"
                        },
                        new
                        {
                            Id = new Guid("832b074d-8b2f-43b2-9b0b-42da1b70a8f3"),
                            CityId = new Guid("91eed7ae-8659-48e9-b7f6-2e3bf249c216"),
                            Language = "uk",
                            Name = "Львів"
                        },
                        new
                        {
                            Id = new Guid("929052ac-4a58-4598-97e5-436c42143c43"),
                            CityId = new Guid("8e6e4b90-f5c7-4f84-9944-4e71c0c68240"),
                            Language = "uk",
                            Name = "Миколаїв"
                        },
                        new
                        {
                            Id = new Guid("8690b411-0a41-421a-86a0-eb7e6ed85605"),
                            CityId = new Guid("39d2507e-c3b2-4587-b5f2-0710d47bb5cd"),
                            Language = "uk",
                            Name = "Одеса"
                        },
                        new
                        {
                            Id = new Guid("9ec0772b-1ff7-4d7f-b981-d394504534fc"),
                            CityId = new Guid("32d638a4-1952-470a-b23f-f2627498cc97"),
                            Language = "uk",
                            Name = "Полтава"
                        },
                        new
                        {
                            Id = new Guid("9c40657d-bda9-4ed8-b9ed-eb38a476ccfd"),
                            CityId = new Guid("6ff4cc82-931f-48bf-944e-7333d56ebb92"),
                            Language = "uk",
                            Name = "Рівне"
                        },
                        new
                        {
                            Id = new Guid("1577c334-0f2c-4a4d-ab12-1553eb577457"),
                            CityId = new Guid("0047646d-0463-41fd-b212-20f87452c46c"),
                            Language = "uk",
                            Name = "Суми"
                        },
                        new
                        {
                            Id = new Guid("5d559555-efbc-4431-91c4-ae4a9b94389a"),
                            CityId = new Guid("7ee63579-eaea-4daf-a04d-f8b4c5209e81"),
                            Language = "uk",
                            Name = "Тернопіль"
                        },
                        new
                        {
                            Id = new Guid("13b2b8c9-437f-4649-8c8c-6752cc1f328f"),
                            CityId = new Guid("e4601708-74d7-4f62-b5b8-4ecac25a3d93"),
                            Language = "uk",
                            Name = "Ужгород"
                        },
                        new
                        {
                            Id = new Guid("d5fd5731-8086-4506-aed7-7f15832016a1"),
                            CityId = new Guid("9a3c15ab-7a01-47df-82f7-503db2815928"),
                            Language = "uk",
                            Name = "Харків"
                        },
                        new
                        {
                            Id = new Guid("f913752a-ce2d-4f3d-be26-ed6a8ee598a3"),
                            CityId = new Guid("f938372e-a64c-4f9b-a41d-d272d5218530"),
                            Language = "uk",
                            Name = "Херсон"
                        },
                        new
                        {
                            Id = new Guid("929e4f5b-42e6-4950-9d9d-22fdcb21ee0f"),
                            CityId = new Guid("132bb179-8927-41ba-ad6c-95abcb4dd298"),
                            Language = "uk",
                            Name = "Хмельницький"
                        },
                        new
                        {
                            Id = new Guid("f5f22ed0-bdb9-4061-9baf-a938972e2eba"),
                            CityId = new Guid("6cdf8056-a4a6-4a04-94bc-8c7cdc02916b"),
                            Language = "uk",
                            Name = "Черкаси"
                        },
                        new
                        {
                            Id = new Guid("20385250-b7ad-4512-982e-b13a8a3191fe"),
                            CityId = new Guid("7df36eaf-5315-4d51-9bf2-b6f223ea9d3d"),
                            Language = "uk",
                            Name = "Чернівці"
                        },
                        new
                        {
                            Id = new Guid("c3bd4362-a7ed-4dd5-879a-7d01077738bb"),
                            CityId = new Guid("ecb241ff-48d2-4a30-8d2f-e19aaeae6966"),
                            Language = "uk",
                            Name = "Чернігів"
                        },
                        new
                        {
                            Id = new Guid("96a8f7a2-b505-443a-9fd2-c4e6edb1f036"),
                            CityId = new Guid("32b8ea14-3abc-4de9-9e10-28467f77ab36"),
                            Language = "en",
                            Name = "Vinnytsia"
                        },
                        new
                        {
                            Id = new Guid("43840b78-506b-453b-8ca7-e1d771e0872e"),
                            CityId = new Guid("74f3605a-bbe9-4448-9d9e-256dd153cfea"),
                            Language = "en",
                            Name = "Dnipro"
                        },
                        new
                        {
                            Id = new Guid("e392717f-2a9a-4930-85ad-537eb286fe6a"),
                            CityId = new Guid("e49496ff-aa30-48ef-858b-3112330c2554"),
                            Language = "en",
                            Name = "Zhytomyr"
                        },
                        new
                        {
                            Id = new Guid("183f3950-fac5-4512-ac17-7d4a72ce87de"),
                            CityId = new Guid("6333c8c0-2b12-4859-b710-af924b524eab"),
                            Language = "en",
                            Name = "Zaporizhzhia"
                        },
                        new
                        {
                            Id = new Guid("20a14cc0-244c-469b-9b78-7f7d3eb90263"),
                            CityId = new Guid("76c5af12-d268-4cae-9b5b-14cb5317fa82"),
                            Language = "en",
                            Name = "Ivano-Frankivsk"
                        },
                        new
                        {
                            Id = new Guid("babee326-f9ac-4bc2-9939-f87c994d581c"),
                            CityId = new Guid("10e9ddb3-07d2-46eb-8960-e7f824f69c10"),
                            Language = "en",
                            Name = "Kyiv"
                        },
                        new
                        {
                            Id = new Guid("b68a5a03-9b11-4bbc-9ec2-d3bedd084fa9"),
                            CityId = new Guid("777df35c-1c3b-4af5-b0be-0b8fb058e6df"),
                            Language = "en",
                            Name = "Kropyvnytskyi"
                        },
                        new
                        {
                            Id = new Guid("9a6b259f-79f5-484d-9ea4-b39903d5d47f"),
                            CityId = new Guid("6b7d4243-8ff7-450a-8505-8f3f1eabf2c7"),
                            Language = "en",
                            Name = "Lutsk"
                        },
                        new
                        {
                            Id = new Guid("70d1ff00-64c8-4f8a-94b6-eaa035c302a7"),
                            CityId = new Guid("91eed7ae-8659-48e9-b7f6-2e3bf249c216"),
                            Language = "en",
                            Name = "Lviv"
                        },
                        new
                        {
                            Id = new Guid("86bd8831-b4f5-4e9d-8392-6c62a1bdccb5"),
                            CityId = new Guid("8e6e4b90-f5c7-4f84-9944-4e71c0c68240"),
                            Language = "en",
                            Name = "Mykolaiv"
                        },
                        new
                        {
                            Id = new Guid("d5b2a6d7-e20c-4a00-8d3a-9493b7bb1671"),
                            CityId = new Guid("39d2507e-c3b2-4587-b5f2-0710d47bb5cd"),
                            Language = "en",
                            Name = "Odesa"
                        },
                        new
                        {
                            Id = new Guid("45abebf9-fddb-40f5-b04f-b697fad53ce3"),
                            CityId = new Guid("32d638a4-1952-470a-b23f-f2627498cc97"),
                            Language = "en",
                            Name = "Poltava"
                        },
                        new
                        {
                            Id = new Guid("15abcf9c-019d-4a98-902c-8cfa6b481686"),
                            CityId = new Guid("6ff4cc82-931f-48bf-944e-7333d56ebb92"),
                            Language = "en",
                            Name = "Rivne"
                        },
                        new
                        {
                            Id = new Guid("a9d58cd6-99fc-49ef-ab68-51284d34ead3"),
                            CityId = new Guid("0047646d-0463-41fd-b212-20f87452c46c"),
                            Language = "en",
                            Name = "Sumy"
                        },
                        new
                        {
                            Id = new Guid("33da4f01-a460-4908-83fe-57071ff61c44"),
                            CityId = new Guid("7ee63579-eaea-4daf-a04d-f8b4c5209e81"),
                            Language = "en",
                            Name = "Ternopil"
                        },
                        new
                        {
                            Id = new Guid("7b7eedd1-5794-44ae-b1f9-9ce27b9fcaab"),
                            CityId = new Guid("e4601708-74d7-4f62-b5b8-4ecac25a3d93"),
                            Language = "en",
                            Name = "Uzhhorod"
                        },
                        new
                        {
                            Id = new Guid("28c8aa19-8b6a-492c-8bb1-51a59b6b896f"),
                            CityId = new Guid("9a3c15ab-7a01-47df-82f7-503db2815928"),
                            Language = "en",
                            Name = "Kharkiv"
                        },
                        new
                        {
                            Id = new Guid("0d73c628-f453-422e-8699-f09c58aaac10"),
                            CityId = new Guid("f938372e-a64c-4f9b-a41d-d272d5218530"),
                            Language = "en",
                            Name = "Kherson"
                        },
                        new
                        {
                            Id = new Guid("3d2b6ce1-620c-4e6b-94c0-3d305f2838ac"),
                            CityId = new Guid("132bb179-8927-41ba-ad6c-95abcb4dd298"),
                            Language = "en",
                            Name = "Khmelnytskyi"
                        },
                        new
                        {
                            Id = new Guid("4cd6622e-f1cb-4355-8012-aba19636cf2f"),
                            CityId = new Guid("6cdf8056-a4a6-4a04-94bc-8c7cdc02916b"),
                            Language = "en",
                            Name = "Cherkasy"
                        },
                        new
                        {
                            Id = new Guid("4a6147cc-869f-4158-91da-e39de9675352"),
                            CityId = new Guid("7df36eaf-5315-4d51-9bf2-b6f223ea9d3d"),
                            Language = "en",
                            Name = "Chernivtsi"
                        },
                        new
                        {
                            Id = new Guid("47185e2f-be50-4545-95fa-38eb025c70dc"),
                            CityId = new Guid("ecb241ff-48d2-4a30-8d2f-e19aaeae6966"),
                            Language = "en",
                            Name = "Chernihiv"
                        },
                        new
                        {
                            Id = new Guid("b99ebe00-3023-4b92-93ec-a4dcd5f8ae6e"),
                            CityId = new Guid("236dea69-6222-4e35-836e-de79882c9884"),
                            Language = "uk",
                            Name = "Варшава"
                        },
                        new
                        {
                            Id = new Guid("76a623a6-57dd-4116-ac63-e774df0666c5"),
                            CityId = new Guid("7f1a433d-15ec-47d1-bc31-c55d22d77cf7"),
                            Language = "uk",
                            Name = "Люблін"
                        },
                        new
                        {
                            Id = new Guid("f288c212-5a6f-4750-babe-fe258670ca12"),
                            CityId = new Guid("236dea69-6222-4e35-836e-de79882c9884"),
                            Language = "en",
                            Name = "Varshava"
                        },
                        new
                        {
                            Id = new Guid("42801da8-8822-4749-9280-b2db29842b63"),
                            CityId = new Guid("7f1a433d-15ec-47d1-bc31-c55d22d77cf7"),
                            Language = "en",
                            Name = "Lublin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ad6d19c5-9475-4fed-af86-676caac46f8d"),
                            ISO = "uk"
                        },
                        new
                        {
                            Id = new Guid("4db20a35-50f9-4a0a-83e0-652e51c00838"),
                            ISO = "pl"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CountryTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("66fc9717-e88e-4a7e-87ca-f60eb92dbaf1"),
                            CountryId = new Guid("ad6d19c5-9475-4fed-af86-676caac46f8d"),
                            Language = "en",
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("176d4bd4-31ef-4faa-b601-894ddfc251d5"),
                            CountryId = new Guid("ad6d19c5-9475-4fed-af86-676caac46f8d"),
                            Language = "uk",
                            Name = "Україна"
                        },
                        new
                        {
                            Id = new Guid("03771e6a-f867-4e24-8bc4-f251c25d3d1b"),
                            CountryId = new Guid("4db20a35-50f9-4a0a-83e0-652e51c00838"),
                            Language = "en",
                            Name = "Poland"
                        },
                        new
                        {
                            Id = new Guid("492c8237-aed7-430f-801d-708fcac5a5c3"),
                            CountryId = new Guid("4db20a35-50f9-4a0a-83e0-652e51c00838"),
                            Language = "uk",
                            Name = "Польша"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VolunteerApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VolunteerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VolunteerUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VolunteerUserId", "VolunteerApplicationId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ProfilePictures");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ccfa7516-9d25-4664-924c-6cba096f38ea"),
                            Title = "medicine"
                        },
                        new
                        {
                            Id = new Guid("ede76abd-2d8b-4674-90be-2885d4b69b22"),
                            Title = "cooking"
                        },
                        new
                        {
                            Id = new Guid("3a5385b9-5ba5-4e08-8c37-6c8697ac2c2a"),
                            Title = "building"
                        },
                        new
                        {
                            Id = new Guid("44f8b0f1-3eee-4ee9-a360-ded0b8d47440"),
                            Title = "psychology"
                        });
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("25a1e358-491f-45a9-8e01-2a205454b94a"),
                            Language = "en",
                            Name = "medicine",
                            SkillId = new Guid("ccfa7516-9d25-4664-924c-6cba096f38ea")
                        },
                        new
                        {
                            Id = new Guid("74e5d211-a10c-4db7-a563-aa37618d3d40"),
                            Language = "uk",
                            Name = "медицина",
                            SkillId = new Guid("ccfa7516-9d25-4664-924c-6cba096f38ea")
                        },
                        new
                        {
                            Id = new Guid("ec6f533a-5390-420a-9dbc-a87f1a407a8d"),
                            Language = "en",
                            Name = "cooking",
                            SkillId = new Guid("ede76abd-2d8b-4674-90be-2885d4b69b22")
                        },
                        new
                        {
                            Id = new Guid("678a5fe3-8462-4eaf-96fa-8e4ed5ed7ecd"),
                            Language = "uk",
                            Name = "кулінарія",
                            SkillId = new Guid("ede76abd-2d8b-4674-90be-2885d4b69b22")
                        },
                        new
                        {
                            Id = new Guid("4b164ed7-4ae5-4c6c-b681-57e91bcc6017"),
                            Language = "en",
                            Name = "building",
                            SkillId = new Guid("3a5385b9-5ba5-4e08-8c37-6c8697ac2c2a")
                        },
                        new
                        {
                            Id = new Guid("7ad2be9d-8dd6-4d52-b98d-9dd4447e3976"),
                            Language = "uk",
                            Name = "будівництво",
                            SkillId = new Guid("3a5385b9-5ba5-4e08-8c37-6c8697ac2c2a")
                        },
                        new
                        {
                            Id = new Guid("fb940d7c-9a3a-4a24-a15f-ee897d58fb5c"),
                            Language = "en",
                            Name = "psychology",
                            SkillId = new Guid("44f8b0f1-3eee-4ee9-a360-ded0b8d47440")
                        },
                        new
                        {
                            Id = new Guid("d9b77503-d889-4ab0-959c-9d2151bc49ed"),
                            Language = "uk",
                            Name = "психологія",
                            SkillId = new Guid("44f8b0f1-3eee-4ee9-a360-ded0b8d47440")
                        });
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c8d276bd-c0d5-4053-813b-66b1eaed61d1"),
                            CityId = new Guid("32b8ea14-3abc-4de9-9e10-28467f77ab36"),
                            DateOfBirth = new DateTime(2023, 4, 29, 22, 42, 24, 817, DateTimeKind.Local).AddTicks(8041),
                            FirstName = "the first",
                            LastName = "admin",
                            Login = "ourfirstadmin",
                            Password = "Rk/ryiBNbnHx+s9i1IveCNNw4axYPQHm4T1eratfQlg=",
                            Phone = "+11111111111",
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Document")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DocumentFormat")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("NULL");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ApplicationId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("CityTranslations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("CountryTranslations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.HasOne("DAL.Entities.Volunteer", "Volunteer")
                        .WithMany("Messages")
                        .HasForeignKey("VolunteerUserId", "VolunteerApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithOne("ProfilePicture")
                        .HasForeignKey("DAL.Entities.ProfilePicture", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("SkillTranslations")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Volunteers")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Volunteers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Navigation("CityTranslations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("CountryTranslations");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Navigation("SkillTranslations");

                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ProfilePicture");

                    b.Navigation("UserSkills");

                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
