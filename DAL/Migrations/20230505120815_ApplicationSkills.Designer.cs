// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(VolunteerNetServerDBContext))]
    [Migration("20230505120815_ApplicationSkills")]
    partial class ApplicationSkills
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequiredNumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationSkill", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("ApplicationSkills");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d04cc81c-7575-4cb3-8c23-af7aab32d1fe"),
                            CountryId = new Guid("c04e00af-d61d-43cd-a599-ee91e0525862"),
                            ISO = "vi"
                        },
                        new
                        {
                            Id = new Guid("5d840330-62be-40e3-9f18-d4838917e3bd"),
                            CountryId = new Guid("c04e00af-d61d-43cd-a599-ee91e0525862"),
                            ISO = "dn"
                        },
                        new
                        {
                            Id = new Guid("0965f21b-07ff-4515-a0c4-435938951718"),
                            CountryId = new Guid("c04e00af-d61d-43cd-a599-ee91e0525862"),
                            ISO = "zhy"
                        },
                        new
                        {
                            Id = new Guid("80001b4c-1f82-42c8-aa93-5719f0842814"),
                            CountryId = new Guid("c04e00af-d61d-43cd-a599-ee91e0525862"),
                            ISO = "zp"
                        },
                        new
                        {
                            Id = new Guid("e5acf189-2b53-4008-bbff-d106f5bae6da"),
                            CountryId = new Guid("c04e00af-d61d-43cd-a599-ee91e0525862"),
                            ISO = "if"
                        },
                        new
                        {
                            Id = new Guid("c7377159-39de-45d1-a9eb-b4ec5c669326"),
                            CountryId = new Guid("c04e00af-d61d-43cd-a599-ee91e0525862"),
                            ISO = "ky"
                        },
                        new
                        {
                            Id = new Guid("807d8e7d-af15-43c9-bdbe-ba52e5085e71"),
                            CountryId = new Guid("c04e00af-d61d-43cd-a599-ee91e0525862"),
                            ISO = "kr"
                        },
                        new
                        {
                            Id = new Guid("34c04c8b-fdd7-4a06-b8d3-f1c5d3bcd201"),
                            CountryId = new Guid("c04e00af-d61d-43cd-a599-ee91e0525862"),
                            ISO = "lut"
                        },
                        new
                        {
                            Id = new Guid("c19b7447-d2b5-4e85-b3a5-148a4f111583"),
                            CountryId = new Guid("c04e00af-d61d-43cd-a599-ee91e0525862"),
                            ISO = "lv"
                        },
                        new
                        {
                            Id = new Guid("053ca3fc-5db7-4088-84e1-1e9cd49914a6"),
                            CountryId = new Guid("c04e00af-d61d-43cd-a599-ee91e0525862"),
                            ISO = "my"
                        },
                        new
                        {
                            Id = new Guid("4eb3b0bf-1126-48f1-a74c-712964d72701"),
                            CountryId = new Guid("c04e00af-d61d-43cd-a599-ee91e0525862"),
                            ISO = "od"
                        },
                        new
                        {
                            Id = new Guid("0a94837c-d110-44ff-b08b-dbef2cea8f7c"),
                            CountryId = new Guid("c04e00af-d61d-43cd-a599-ee91e0525862"),
                            ISO = "pol"
                        },
                        new
                        {
                            Id = new Guid("4099da1b-8e27-442b-b0e7-1d4c29e1096e"),
                            CountryId = new Guid("c04e00af-d61d-43cd-a599-ee91e0525862"),
                            ISO = "ri"
                        },
                        new
                        {
                            Id = new Guid("50643153-fa0e-4987-99f8-3a367c5fb7b3"),
                            CountryId = new Guid("c04e00af-d61d-43cd-a599-ee91e0525862"),
                            ISO = "su"
                        },
                        new
                        {
                            Id = new Guid("1344cac2-6f10-4ae7-95da-cdff99d86f7f"),
                            CountryId = new Guid("c04e00af-d61d-43cd-a599-ee91e0525862"),
                            ISO = "ter"
                        },
                        new
                        {
                            Id = new Guid("a8d6e9a9-5f8b-42f5-a1b7-507b5f7fc32f"),
                            CountryId = new Guid("c04e00af-d61d-43cd-a599-ee91e0525862"),
                            ISO = "uzh"
                        },
                        new
                        {
                            Id = new Guid("bdb89c7e-5cbf-47ed-adec-1a98acc40d3b"),
                            CountryId = new Guid("c04e00af-d61d-43cd-a599-ee91e0525862"),
                            ISO = "khar"
                        },
                        new
                        {
                            Id = new Guid("ff50bfda-3480-49fd-82d9-2dab4457f213"),
                            CountryId = new Guid("c04e00af-d61d-43cd-a599-ee91e0525862"),
                            ISO = "kher"
                        },
                        new
                        {
                            Id = new Guid("0209d34f-2860-42f8-93e6-cd46784e1222"),
                            CountryId = new Guid("c04e00af-d61d-43cd-a599-ee91e0525862"),
                            ISO = "khm"
                        },
                        new
                        {
                            Id = new Guid("d382141a-127a-4495-b1e5-d845455878f3"),
                            CountryId = new Guid("c04e00af-d61d-43cd-a599-ee91e0525862"),
                            ISO = "chk"
                        },
                        new
                        {
                            Id = new Guid("23efc5b5-e1da-43b5-90e3-d7213319db55"),
                            CountryId = new Guid("c04e00af-d61d-43cd-a599-ee91e0525862"),
                            ISO = "chv"
                        },
                        new
                        {
                            Id = new Guid("b2925f69-0d0e-4a05-84d9-86fe581dc629"),
                            CountryId = new Guid("c04e00af-d61d-43cd-a599-ee91e0525862"),
                            ISO = "chh"
                        },
                        new
                        {
                            Id = new Guid("5fdd6f88-40cd-4010-8551-3d4c7667cb7d"),
                            CountryId = new Guid("160bd906-760b-408c-9ee5-d68bfb695007"),
                            ISO = "var"
                        },
                        new
                        {
                            Id = new Guid("5ba5e5d1-55f7-4044-af47-b1ec5371f12f"),
                            CountryId = new Guid("160bd906-760b-408c-9ee5-d68bfb695007"),
                            ISO = "lub"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("CityTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f930e6d0-5d38-4d4e-b928-e34426e6a6e4"),
                            CityId = new Guid("d04cc81c-7575-4cb3-8c23-af7aab32d1fe"),
                            Language = "uk",
                            Name = "Вінниця"
                        },
                        new
                        {
                            Id = new Guid("808737ac-dc80-41f1-8f20-b1200b9b0d8f"),
                            CityId = new Guid("5d840330-62be-40e3-9f18-d4838917e3bd"),
                            Language = "uk",
                            Name = "Дніпро"
                        },
                        new
                        {
                            Id = new Guid("d46515eb-c53e-4219-b75f-5fb4e5ef6b7e"),
                            CityId = new Guid("0965f21b-07ff-4515-a0c4-435938951718"),
                            Language = "uk",
                            Name = "Житомир"
                        },
                        new
                        {
                            Id = new Guid("c22e586a-ea47-45ec-a091-d8989f18cab3"),
                            CityId = new Guid("80001b4c-1f82-42c8-aa93-5719f0842814"),
                            Language = "uk",
                            Name = "Запоріжжя"
                        },
                        new
                        {
                            Id = new Guid("194dfb05-ffcf-4958-8fe0-e1794c71fd3e"),
                            CityId = new Guid("e5acf189-2b53-4008-bbff-d106f5bae6da"),
                            Language = "uk",
                            Name = "Івано-Франківськ"
                        },
                        new
                        {
                            Id = new Guid("f390b724-6a91-4f89-922e-9bced5edc8b7"),
                            CityId = new Guid("c7377159-39de-45d1-a9eb-b4ec5c669326"),
                            Language = "uk",
                            Name = "Київ"
                        },
                        new
                        {
                            Id = new Guid("796ffbfd-1b55-4220-b6da-d819493795ca"),
                            CityId = new Guid("807d8e7d-af15-43c9-bdbe-ba52e5085e71"),
                            Language = "uk",
                            Name = "Кропивницький"
                        },
                        new
                        {
                            Id = new Guid("baf8aad5-7e55-4bbc-be5b-c9cadce68bca"),
                            CityId = new Guid("34c04c8b-fdd7-4a06-b8d3-f1c5d3bcd201"),
                            Language = "uk",
                            Name = "Луцьк"
                        },
                        new
                        {
                            Id = new Guid("7ebfd3fc-4357-4398-801c-ca886edc91c8"),
                            CityId = new Guid("c19b7447-d2b5-4e85-b3a5-148a4f111583"),
                            Language = "uk",
                            Name = "Львів"
                        },
                        new
                        {
                            Id = new Guid("8780de40-d424-4df9-ba41-7222cfbb529a"),
                            CityId = new Guid("053ca3fc-5db7-4088-84e1-1e9cd49914a6"),
                            Language = "uk",
                            Name = "Миколаїв"
                        },
                        new
                        {
                            Id = new Guid("fe4946e1-1a4f-4d7c-a5dc-a3d9a9f3ad9f"),
                            CityId = new Guid("4eb3b0bf-1126-48f1-a74c-712964d72701"),
                            Language = "uk",
                            Name = "Одеса"
                        },
                        new
                        {
                            Id = new Guid("a9b63121-359b-4717-987d-202428cff93b"),
                            CityId = new Guid("0a94837c-d110-44ff-b08b-dbef2cea8f7c"),
                            Language = "uk",
                            Name = "Полтава"
                        },
                        new
                        {
                            Id = new Guid("1b5980e0-2d82-4055-937f-89915d13968c"),
                            CityId = new Guid("4099da1b-8e27-442b-b0e7-1d4c29e1096e"),
                            Language = "uk",
                            Name = "Рівне"
                        },
                        new
                        {
                            Id = new Guid("8b32bfd2-1cab-4189-a146-ed403208d220"),
                            CityId = new Guid("50643153-fa0e-4987-99f8-3a367c5fb7b3"),
                            Language = "uk",
                            Name = "Суми"
                        },
                        new
                        {
                            Id = new Guid("4013a30c-b5fe-4faf-9a68-0d3b61ad5c37"),
                            CityId = new Guid("1344cac2-6f10-4ae7-95da-cdff99d86f7f"),
                            Language = "uk",
                            Name = "Тернопіль"
                        },
                        new
                        {
                            Id = new Guid("288623ab-fde6-439a-a36f-c495893f232b"),
                            CityId = new Guid("a8d6e9a9-5f8b-42f5-a1b7-507b5f7fc32f"),
                            Language = "uk",
                            Name = "Ужгород"
                        },
                        new
                        {
                            Id = new Guid("11abf3ab-6724-45b7-95c3-2a28041986f9"),
                            CityId = new Guid("bdb89c7e-5cbf-47ed-adec-1a98acc40d3b"),
                            Language = "uk",
                            Name = "Харків"
                        },
                        new
                        {
                            Id = new Guid("9701cd85-2067-426f-ba9a-187d7f423259"),
                            CityId = new Guid("ff50bfda-3480-49fd-82d9-2dab4457f213"),
                            Language = "uk",
                            Name = "Херсон"
                        },
                        new
                        {
                            Id = new Guid("c0fa42ce-09cd-42a9-9346-a2d30fe136ea"),
                            CityId = new Guid("0209d34f-2860-42f8-93e6-cd46784e1222"),
                            Language = "uk",
                            Name = "Хмельницький"
                        },
                        new
                        {
                            Id = new Guid("41be2bb8-b39d-4ce9-aa61-740568ee79e7"),
                            CityId = new Guid("d382141a-127a-4495-b1e5-d845455878f3"),
                            Language = "uk",
                            Name = "Черкаси"
                        },
                        new
                        {
                            Id = new Guid("b3b8197a-e9a7-42e9-b03a-5f8b57699891"),
                            CityId = new Guid("23efc5b5-e1da-43b5-90e3-d7213319db55"),
                            Language = "uk",
                            Name = "Чернівці"
                        },
                        new
                        {
                            Id = new Guid("1378f27c-d3f8-40e2-a4a9-ae0c4ed3b1d1"),
                            CityId = new Guid("b2925f69-0d0e-4a05-84d9-86fe581dc629"),
                            Language = "uk",
                            Name = "Чернігів"
                        },
                        new
                        {
                            Id = new Guid("73f90ae2-b3af-4ec1-b87f-6102936bc3dd"),
                            CityId = new Guid("d04cc81c-7575-4cb3-8c23-af7aab32d1fe"),
                            Language = "en",
                            Name = "Vinnytsia"
                        },
                        new
                        {
                            Id = new Guid("60aae57f-35e9-42a0-85d2-9b65aa6c9ec9"),
                            CityId = new Guid("5d840330-62be-40e3-9f18-d4838917e3bd"),
                            Language = "en",
                            Name = "Dnipro"
                        },
                        new
                        {
                            Id = new Guid("3ed94e74-1505-418a-8876-20bc493315fd"),
                            CityId = new Guid("0965f21b-07ff-4515-a0c4-435938951718"),
                            Language = "en",
                            Name = "Zhytomyr"
                        },
                        new
                        {
                            Id = new Guid("89ad3224-0fcb-431b-97e2-a7735ecf37f3"),
                            CityId = new Guid("80001b4c-1f82-42c8-aa93-5719f0842814"),
                            Language = "en",
                            Name = "Zaporizhzhia"
                        },
                        new
                        {
                            Id = new Guid("cbe358ac-ccf0-48b3-a394-b9f131f4b9ba"),
                            CityId = new Guid("e5acf189-2b53-4008-bbff-d106f5bae6da"),
                            Language = "en",
                            Name = "Ivano-Frankivsk"
                        },
                        new
                        {
                            Id = new Guid("e44fe964-c164-436e-b9c8-e38dc7f6a0b3"),
                            CityId = new Guid("c7377159-39de-45d1-a9eb-b4ec5c669326"),
                            Language = "en",
                            Name = "Kyiv"
                        },
                        new
                        {
                            Id = new Guid("eddc50e1-de80-4d43-8388-bbda125fe95d"),
                            CityId = new Guid("807d8e7d-af15-43c9-bdbe-ba52e5085e71"),
                            Language = "en",
                            Name = "Kropyvnytskyi"
                        },
                        new
                        {
                            Id = new Guid("981b76df-d4bd-47dd-a7db-0affd0b8232a"),
                            CityId = new Guid("34c04c8b-fdd7-4a06-b8d3-f1c5d3bcd201"),
                            Language = "en",
                            Name = "Lutsk"
                        },
                        new
                        {
                            Id = new Guid("4fbfa576-fd3b-4fdc-a3b6-cbcd3d8614cf"),
                            CityId = new Guid("c19b7447-d2b5-4e85-b3a5-148a4f111583"),
                            Language = "en",
                            Name = "Lviv"
                        },
                        new
                        {
                            Id = new Guid("9b1a30f6-8672-480d-ac6f-f7264afdc921"),
                            CityId = new Guid("053ca3fc-5db7-4088-84e1-1e9cd49914a6"),
                            Language = "en",
                            Name = "Mykolaiv"
                        },
                        new
                        {
                            Id = new Guid("6a55f362-7820-47c0-8e7f-474561273771"),
                            CityId = new Guid("4eb3b0bf-1126-48f1-a74c-712964d72701"),
                            Language = "en",
                            Name = "Odesa"
                        },
                        new
                        {
                            Id = new Guid("372c09b7-0f20-487c-85e0-bfc813ffa733"),
                            CityId = new Guid("0a94837c-d110-44ff-b08b-dbef2cea8f7c"),
                            Language = "en",
                            Name = "Poltava"
                        },
                        new
                        {
                            Id = new Guid("17509a8f-3841-4934-9c08-f2088143fa95"),
                            CityId = new Guid("4099da1b-8e27-442b-b0e7-1d4c29e1096e"),
                            Language = "en",
                            Name = "Rivne"
                        },
                        new
                        {
                            Id = new Guid("97275f36-2808-4a6b-b53a-bf5fc8d8a21a"),
                            CityId = new Guid("50643153-fa0e-4987-99f8-3a367c5fb7b3"),
                            Language = "en",
                            Name = "Sumy"
                        },
                        new
                        {
                            Id = new Guid("9005ca14-66f6-4252-98b5-d42420656c3c"),
                            CityId = new Guid("1344cac2-6f10-4ae7-95da-cdff99d86f7f"),
                            Language = "en",
                            Name = "Ternopil"
                        },
                        new
                        {
                            Id = new Guid("d7e94366-0cce-48b6-9a0c-f4128a0d1cc3"),
                            CityId = new Guid("a8d6e9a9-5f8b-42f5-a1b7-507b5f7fc32f"),
                            Language = "en",
                            Name = "Uzhhorod"
                        },
                        new
                        {
                            Id = new Guid("06a63f26-24a7-4b77-8a0b-23cddb699294"),
                            CityId = new Guid("bdb89c7e-5cbf-47ed-adec-1a98acc40d3b"),
                            Language = "en",
                            Name = "Kharkiv"
                        },
                        new
                        {
                            Id = new Guid("dfe7c1bd-5d1a-4437-8f7f-2b3eb670965d"),
                            CityId = new Guid("ff50bfda-3480-49fd-82d9-2dab4457f213"),
                            Language = "en",
                            Name = "Kherson"
                        },
                        new
                        {
                            Id = new Guid("9eb14bc9-96b4-4a69-b5a0-6c962cd4577e"),
                            CityId = new Guid("0209d34f-2860-42f8-93e6-cd46784e1222"),
                            Language = "en",
                            Name = "Khmelnytskyi"
                        },
                        new
                        {
                            Id = new Guid("fac963a1-89b5-47ce-8922-099e6035adba"),
                            CityId = new Guid("d382141a-127a-4495-b1e5-d845455878f3"),
                            Language = "en",
                            Name = "Cherkasy"
                        },
                        new
                        {
                            Id = new Guid("c90b37ae-28ff-44b1-a770-39dcaf401692"),
                            CityId = new Guid("23efc5b5-e1da-43b5-90e3-d7213319db55"),
                            Language = "en",
                            Name = "Chernivtsi"
                        },
                        new
                        {
                            Id = new Guid("9adaebca-6a33-4bf7-8d5a-382b3b3c54bc"),
                            CityId = new Guid("b2925f69-0d0e-4a05-84d9-86fe581dc629"),
                            Language = "en",
                            Name = "Chernihiv"
                        },
                        new
                        {
                            Id = new Guid("eb67eab9-b3c3-4916-b78a-355a785631f1"),
                            CityId = new Guid("5fdd6f88-40cd-4010-8551-3d4c7667cb7d"),
                            Language = "uk",
                            Name = "Варшава"
                        },
                        new
                        {
                            Id = new Guid("cb104260-aecd-4fa5-815d-09747d9f9b7f"),
                            CityId = new Guid("5ba5e5d1-55f7-4044-af47-b1ec5371f12f"),
                            Language = "uk",
                            Name = "Люблін"
                        },
                        new
                        {
                            Id = new Guid("7e09350e-54d9-447c-9389-e8f9c59f2d68"),
                            CityId = new Guid("5fdd6f88-40cd-4010-8551-3d4c7667cb7d"),
                            Language = "en",
                            Name = "Varshava"
                        },
                        new
                        {
                            Id = new Guid("b28d7ab0-d767-404f-ad21-3cac921ca487"),
                            CityId = new Guid("5ba5e5d1-55f7-4044-af47-b1ec5371f12f"),
                            Language = "en",
                            Name = "Lublin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c04e00af-d61d-43cd-a599-ee91e0525862"),
                            ISO = "uk"
                        },
                        new
                        {
                            Id = new Guid("160bd906-760b-408c-9ee5-d68bfb695007"),
                            ISO = "pl"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CountryTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9a7f5aca-938b-44c6-9b02-fdf87a3b6997"),
                            CountryId = new Guid("c04e00af-d61d-43cd-a599-ee91e0525862"),
                            Language = "en",
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("6e24ffcb-f805-4f95-89e0-ce18bdcacb0f"),
                            CountryId = new Guid("c04e00af-d61d-43cd-a599-ee91e0525862"),
                            Language = "uk",
                            Name = "Україна"
                        },
                        new
                        {
                            Id = new Guid("a5f0f68f-9592-43e4-aa11-0801d9ea7e7b"),
                            CountryId = new Guid("160bd906-760b-408c-9ee5-d68bfb695007"),
                            Language = "en",
                            Name = "Poland"
                        },
                        new
                        {
                            Id = new Guid("b9a54102-64cc-49cd-a9e2-72564b034aef"),
                            CountryId = new Guid("160bd906-760b-408c-9ee5-d68bfb695007"),
                            Language = "uk",
                            Name = "Польша"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VolunteerApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VolunteerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VolunteerUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VolunteerUserId", "VolunteerApplicationId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ProfilePictures");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c32b9d0d-f0bc-47c1-8e2d-67188b035aa5"),
                            Title = "medicine"
                        },
                        new
                        {
                            Id = new Guid("46627ca9-f0c9-4913-af75-5e2d3261b94c"),
                            Title = "cooking"
                        },
                        new
                        {
                            Id = new Guid("ceebdc79-81b2-4f4d-91ff-7ef297288cb4"),
                            Title = "building"
                        },
                        new
                        {
                            Id = new Guid("d9ffe4df-1b55-4a42-a8a6-bb722851a7c2"),
                            Title = "psychology"
                        });
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3ee13a92-b1e0-4410-952a-b1b2d033f3ae"),
                            Language = "en",
                            Name = "medicine",
                            SkillId = new Guid("c32b9d0d-f0bc-47c1-8e2d-67188b035aa5")
                        },
                        new
                        {
                            Id = new Guid("bdee8f58-c3f2-4190-a87d-e466ce5d7f27"),
                            Language = "uk",
                            Name = "медицина",
                            SkillId = new Guid("c32b9d0d-f0bc-47c1-8e2d-67188b035aa5")
                        },
                        new
                        {
                            Id = new Guid("5c920e11-4db4-4994-9208-7e669876995a"),
                            Language = "en",
                            Name = "cooking",
                            SkillId = new Guid("46627ca9-f0c9-4913-af75-5e2d3261b94c")
                        },
                        new
                        {
                            Id = new Guid("e8e2ab3b-a920-4958-84d7-fcb31af09eca"),
                            Language = "uk",
                            Name = "кулінарія",
                            SkillId = new Guid("46627ca9-f0c9-4913-af75-5e2d3261b94c")
                        },
                        new
                        {
                            Id = new Guid("05b0a91c-bf36-48e6-8297-cd341b4757db"),
                            Language = "en",
                            Name = "building",
                            SkillId = new Guid("ceebdc79-81b2-4f4d-91ff-7ef297288cb4")
                        },
                        new
                        {
                            Id = new Guid("4e5fe4a2-d861-48a8-95b2-e2554b995bfe"),
                            Language = "uk",
                            Name = "будівництво",
                            SkillId = new Guid("ceebdc79-81b2-4f4d-91ff-7ef297288cb4")
                        },
                        new
                        {
                            Id = new Guid("94595d9c-5186-4356-9fda-bd8b1cd702bb"),
                            Language = "en",
                            Name = "psychology",
                            SkillId = new Guid("d9ffe4df-1b55-4a42-a8a6-bb722851a7c2")
                        },
                        new
                        {
                            Id = new Guid("7ee6d43c-2034-4d2b-ad1a-76df9a7cbdaf"),
                            Language = "uk",
                            Name = "психологія",
                            SkillId = new Guid("d9ffe4df-1b55-4a42-a8a6-bb722851a7c2")
                        });
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b73eb90c-c9c0-4ede-97c2-383e43659526"),
                            CityId = new Guid("d04cc81c-7575-4cb3-8c23-af7aab32d1fe"),
                            DateOfBirth = new DateTime(2023, 5, 5, 15, 8, 15, 435, DateTimeKind.Local).AddTicks(29),
                            FirstName = "the first",
                            LastName = "admin",
                            Login = "ourfirstadmin",
                            Password = "Rk/ryiBNbnHx+s9i1IveCNNw4axYPQHm4T1eratfQlg=",
                            Phone = "+11111111111",
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Document")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DocumentFormat")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("NULL");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ApplicationId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("Applications")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationSkill", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("ApplicationSkills")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("ApplicationSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("CityTranslations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("CountryTranslations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.HasOne("DAL.Entities.Volunteer", "Volunteer")
                        .WithMany("Messages")
                        .HasForeignKey("VolunteerUserId", "VolunteerApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithOne("ProfilePicture")
                        .HasForeignKey("DAL.Entities.ProfilePicture", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("SkillTranslations")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Volunteers")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Volunteers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Navigation("ApplicationSkills");

                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("CityTranslations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("CountryTranslations");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Navigation("ApplicationSkills");

                    b.Navigation("SkillTranslations");

                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ProfilePicture");

                    b.Navigation("UserSkills");

                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
