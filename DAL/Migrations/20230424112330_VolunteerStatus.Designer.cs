// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(VolunteerNetServerDBContext))]
    [Migration("20230424112330_VolunteerStatus")]
    partial class VolunteerStatus
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<int>("RequiredNumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5b72e681-35ff-4c15-9c0a-bba39657dced"),
                            CountryId = new Guid("fb561ceb-8bcd-484f-af46-387cde7881fa"),
                            ISO = "vi"
                        },
                        new
                        {
                            Id = new Guid("8fb6b615-366e-4ff6-b7eb-bf56c23ee3e8"),
                            CountryId = new Guid("fb561ceb-8bcd-484f-af46-387cde7881fa"),
                            ISO = "dn"
                        },
                        new
                        {
                            Id = new Guid("6e47b452-01d4-4d78-bdc1-9179232a08d7"),
                            CountryId = new Guid("fb561ceb-8bcd-484f-af46-387cde7881fa"),
                            ISO = "zhy"
                        },
                        new
                        {
                            Id = new Guid("af59def9-605a-4c1f-90c6-bbef719e6c1e"),
                            CountryId = new Guid("fb561ceb-8bcd-484f-af46-387cde7881fa"),
                            ISO = "zp"
                        },
                        new
                        {
                            Id = new Guid("874d0a63-2590-4631-9c85-e45ad79e5ffb"),
                            CountryId = new Guid("fb561ceb-8bcd-484f-af46-387cde7881fa"),
                            ISO = "if"
                        },
                        new
                        {
                            Id = new Guid("7738bc3d-3011-4186-b4f7-3ac707164367"),
                            CountryId = new Guid("fb561ceb-8bcd-484f-af46-387cde7881fa"),
                            ISO = "ky"
                        },
                        new
                        {
                            Id = new Guid("43fb6c7f-b88d-4c7a-b33f-b92b71b44b14"),
                            CountryId = new Guid("fb561ceb-8bcd-484f-af46-387cde7881fa"),
                            ISO = "kr"
                        },
                        new
                        {
                            Id = new Guid("9899190c-d179-4bd4-beba-e1912fa55d4a"),
                            CountryId = new Guid("fb561ceb-8bcd-484f-af46-387cde7881fa"),
                            ISO = "lut"
                        },
                        new
                        {
                            Id = new Guid("bb62b8fb-afad-4d5d-8018-da11235ffe5c"),
                            CountryId = new Guid("fb561ceb-8bcd-484f-af46-387cde7881fa"),
                            ISO = "lv"
                        },
                        new
                        {
                            Id = new Guid("cc5e7147-ed49-4b1b-b4ea-380acbbcd9d2"),
                            CountryId = new Guid("fb561ceb-8bcd-484f-af46-387cde7881fa"),
                            ISO = "my"
                        },
                        new
                        {
                            Id = new Guid("3ab54bcc-77dc-4074-b305-e2dc9a91ebd4"),
                            CountryId = new Guid("fb561ceb-8bcd-484f-af46-387cde7881fa"),
                            ISO = "od"
                        },
                        new
                        {
                            Id = new Guid("9bb83db9-cdbe-4517-95d5-dd164df0f879"),
                            CountryId = new Guid("fb561ceb-8bcd-484f-af46-387cde7881fa"),
                            ISO = "pol"
                        },
                        new
                        {
                            Id = new Guid("1f141682-a7b4-4302-ade1-f111787fc813"),
                            CountryId = new Guid("fb561ceb-8bcd-484f-af46-387cde7881fa"),
                            ISO = "ri"
                        },
                        new
                        {
                            Id = new Guid("0cae5759-82f6-4831-ab22-7f8761b5a4fd"),
                            CountryId = new Guid("fb561ceb-8bcd-484f-af46-387cde7881fa"),
                            ISO = "su"
                        },
                        new
                        {
                            Id = new Guid("4195ce31-c52a-4c8c-a687-327e5781d828"),
                            CountryId = new Guid("fb561ceb-8bcd-484f-af46-387cde7881fa"),
                            ISO = "ter"
                        },
                        new
                        {
                            Id = new Guid("25a4c5e8-74dd-4443-a0f9-14d7ebaad753"),
                            CountryId = new Guid("fb561ceb-8bcd-484f-af46-387cde7881fa"),
                            ISO = "uzh"
                        },
                        new
                        {
                            Id = new Guid("98ed47ca-e29f-4921-81ab-c5a0bdbc7cc9"),
                            CountryId = new Guid("fb561ceb-8bcd-484f-af46-387cde7881fa"),
                            ISO = "khar"
                        },
                        new
                        {
                            Id = new Guid("d7c64e8f-e4eb-4963-8dba-8cf72df9545a"),
                            CountryId = new Guid("fb561ceb-8bcd-484f-af46-387cde7881fa"),
                            ISO = "kher"
                        },
                        new
                        {
                            Id = new Guid("9239b383-df55-46a5-9c20-7b8838421ae8"),
                            CountryId = new Guid("fb561ceb-8bcd-484f-af46-387cde7881fa"),
                            ISO = "khm"
                        },
                        new
                        {
                            Id = new Guid("c996d7d5-d4d8-4774-b743-e0c6aa51d26b"),
                            CountryId = new Guid("fb561ceb-8bcd-484f-af46-387cde7881fa"),
                            ISO = "chk"
                        },
                        new
                        {
                            Id = new Guid("c52e72a8-cdec-43a1-b9aa-f1b5ab4351db"),
                            CountryId = new Guid("fb561ceb-8bcd-484f-af46-387cde7881fa"),
                            ISO = "chv"
                        },
                        new
                        {
                            Id = new Guid("dfc9658c-2196-433f-879d-174bb44e4394"),
                            CountryId = new Guid("fb561ceb-8bcd-484f-af46-387cde7881fa"),
                            ISO = "chh"
                        },
                        new
                        {
                            Id = new Guid("7a9f4c57-c631-42fb-a849-35eb89177f5c"),
                            CountryId = new Guid("9c4b058b-634a-4776-bbf9-be19e30af95a"),
                            ISO = "var"
                        },
                        new
                        {
                            Id = new Guid("be0776c8-fafc-4b9e-92b2-2670643ac6bb"),
                            CountryId = new Guid("9c4b058b-634a-4776-bbf9-be19e30af95a"),
                            ISO = "lub"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("CityTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("32ab2d01-fab0-4aa8-a451-0129e71a4e37"),
                            CityId = new Guid("5b72e681-35ff-4c15-9c0a-bba39657dced"),
                            Language = "uk",
                            Name = "Вінниця"
                        },
                        new
                        {
                            Id = new Guid("82e0ed44-467b-4b5e-a27e-175d7fbbe4c2"),
                            CityId = new Guid("8fb6b615-366e-4ff6-b7eb-bf56c23ee3e8"),
                            Language = "uk",
                            Name = "Дніпро"
                        },
                        new
                        {
                            Id = new Guid("d2cce605-5548-49a9-8997-b299dd96d828"),
                            CityId = new Guid("6e47b452-01d4-4d78-bdc1-9179232a08d7"),
                            Language = "uk",
                            Name = "Житомир"
                        },
                        new
                        {
                            Id = new Guid("4f89dfc0-184c-40d9-a418-af4f8522fd3b"),
                            CityId = new Guid("af59def9-605a-4c1f-90c6-bbef719e6c1e"),
                            Language = "uk",
                            Name = "Запоріжжя"
                        },
                        new
                        {
                            Id = new Guid("7a321142-5fa8-473d-be4d-6dc1cde4d902"),
                            CityId = new Guid("874d0a63-2590-4631-9c85-e45ad79e5ffb"),
                            Language = "uk",
                            Name = "Івано-Франківськ"
                        },
                        new
                        {
                            Id = new Guid("a9ddb839-0eb6-4d8c-87e9-0dfc28cf1120"),
                            CityId = new Guid("7738bc3d-3011-4186-b4f7-3ac707164367"),
                            Language = "uk",
                            Name = "Київ"
                        },
                        new
                        {
                            Id = new Guid("937fc90d-83bf-4f1f-9fd0-d714c09ce79b"),
                            CityId = new Guid("43fb6c7f-b88d-4c7a-b33f-b92b71b44b14"),
                            Language = "uk",
                            Name = "Кропивницький"
                        },
                        new
                        {
                            Id = new Guid("e94255bf-6ab2-4f4e-8a29-ab1e937c865a"),
                            CityId = new Guid("9899190c-d179-4bd4-beba-e1912fa55d4a"),
                            Language = "uk",
                            Name = "Луцьк"
                        },
                        new
                        {
                            Id = new Guid("973ef18d-f918-4a2b-830d-6de9a201b2db"),
                            CityId = new Guid("bb62b8fb-afad-4d5d-8018-da11235ffe5c"),
                            Language = "uk",
                            Name = "Львів"
                        },
                        new
                        {
                            Id = new Guid("67c20726-a2bc-44a8-8daf-aaf2c6654221"),
                            CityId = new Guid("cc5e7147-ed49-4b1b-b4ea-380acbbcd9d2"),
                            Language = "uk",
                            Name = "Миколаїв"
                        },
                        new
                        {
                            Id = new Guid("8a38d885-fad3-4b16-b9b9-9e2e5bcbaba3"),
                            CityId = new Guid("3ab54bcc-77dc-4074-b305-e2dc9a91ebd4"),
                            Language = "uk",
                            Name = "Одеса"
                        },
                        new
                        {
                            Id = new Guid("1ceb8cce-efde-4bf8-a266-f63f1cadbdb1"),
                            CityId = new Guid("9bb83db9-cdbe-4517-95d5-dd164df0f879"),
                            Language = "uk",
                            Name = "Полтава"
                        },
                        new
                        {
                            Id = new Guid("b0cb93a1-8dc7-43d7-9b32-123d2c2fc18d"),
                            CityId = new Guid("1f141682-a7b4-4302-ade1-f111787fc813"),
                            Language = "uk",
                            Name = "Рівне"
                        },
                        new
                        {
                            Id = new Guid("d0da64d4-115a-43f6-b3de-db8f7c829877"),
                            CityId = new Guid("0cae5759-82f6-4831-ab22-7f8761b5a4fd"),
                            Language = "uk",
                            Name = "Суми"
                        },
                        new
                        {
                            Id = new Guid("c276c466-e262-479b-97dc-2246c926e3d7"),
                            CityId = new Guid("4195ce31-c52a-4c8c-a687-327e5781d828"),
                            Language = "uk",
                            Name = "Тернопіль"
                        },
                        new
                        {
                            Id = new Guid("ef04a46c-23f0-49ab-870d-975b44ffc0d2"),
                            CityId = new Guid("25a4c5e8-74dd-4443-a0f9-14d7ebaad753"),
                            Language = "uk",
                            Name = "Ужгород"
                        },
                        new
                        {
                            Id = new Guid("1ffff0d4-066d-406c-88c8-91af078030f0"),
                            CityId = new Guid("98ed47ca-e29f-4921-81ab-c5a0bdbc7cc9"),
                            Language = "uk",
                            Name = "Харків"
                        },
                        new
                        {
                            Id = new Guid("06a9e4d7-5111-402c-9d97-662293bf64c9"),
                            CityId = new Guid("d7c64e8f-e4eb-4963-8dba-8cf72df9545a"),
                            Language = "uk",
                            Name = "Херсон"
                        },
                        new
                        {
                            Id = new Guid("056ef690-3ddd-4dbc-a995-3a04b0e1055f"),
                            CityId = new Guid("9239b383-df55-46a5-9c20-7b8838421ae8"),
                            Language = "uk",
                            Name = "Хмельницький"
                        },
                        new
                        {
                            Id = new Guid("9fe31788-1c31-4924-beee-842e4d8aeb32"),
                            CityId = new Guid("c996d7d5-d4d8-4774-b743-e0c6aa51d26b"),
                            Language = "uk",
                            Name = "Черкаси"
                        },
                        new
                        {
                            Id = new Guid("4a18ab71-2c75-4d7d-b6bb-efe9dc6da9f0"),
                            CityId = new Guid("c52e72a8-cdec-43a1-b9aa-f1b5ab4351db"),
                            Language = "uk",
                            Name = "Чернівці"
                        },
                        new
                        {
                            Id = new Guid("0601c5db-6222-4274-a3d8-48b77434a672"),
                            CityId = new Guid("dfc9658c-2196-433f-879d-174bb44e4394"),
                            Language = "uk",
                            Name = "Чернігів"
                        },
                        new
                        {
                            Id = new Guid("5f7722ed-2e00-44da-99be-a8ed71d3559e"),
                            CityId = new Guid("5b72e681-35ff-4c15-9c0a-bba39657dced"),
                            Language = "en",
                            Name = "Vinnytsia"
                        },
                        new
                        {
                            Id = new Guid("2ad0b756-3b51-481c-a296-8fdc6f19d83b"),
                            CityId = new Guid("8fb6b615-366e-4ff6-b7eb-bf56c23ee3e8"),
                            Language = "en",
                            Name = "Dnipro"
                        },
                        new
                        {
                            Id = new Guid("fabf3a36-5139-4efc-b61b-8f229f334027"),
                            CityId = new Guid("6e47b452-01d4-4d78-bdc1-9179232a08d7"),
                            Language = "en",
                            Name = "Zhytomyr"
                        },
                        new
                        {
                            Id = new Guid("de2a04d4-6659-45a7-9d76-61dbf3ba82b1"),
                            CityId = new Guid("af59def9-605a-4c1f-90c6-bbef719e6c1e"),
                            Language = "en",
                            Name = "Zaporizhzhia"
                        },
                        new
                        {
                            Id = new Guid("a274793f-d386-4d72-96af-d097569e19cf"),
                            CityId = new Guid("874d0a63-2590-4631-9c85-e45ad79e5ffb"),
                            Language = "en",
                            Name = "Ivano-Frankivsk"
                        },
                        new
                        {
                            Id = new Guid("b5393a82-224c-4286-ab37-2801ae9e979c"),
                            CityId = new Guid("7738bc3d-3011-4186-b4f7-3ac707164367"),
                            Language = "en",
                            Name = "Kyiv"
                        },
                        new
                        {
                            Id = new Guid("81aa3cb5-58f3-4505-85ce-a01e8e68a0b9"),
                            CityId = new Guid("43fb6c7f-b88d-4c7a-b33f-b92b71b44b14"),
                            Language = "en",
                            Name = "Kropyvnytskyi"
                        },
                        new
                        {
                            Id = new Guid("6fea0501-8419-4a7f-a19c-b160aa946664"),
                            CityId = new Guid("9899190c-d179-4bd4-beba-e1912fa55d4a"),
                            Language = "en",
                            Name = "Lutsk"
                        },
                        new
                        {
                            Id = new Guid("d1ecc6a8-9e18-4123-93ce-b65abfe80a99"),
                            CityId = new Guid("bb62b8fb-afad-4d5d-8018-da11235ffe5c"),
                            Language = "en",
                            Name = "Lviv"
                        },
                        new
                        {
                            Id = new Guid("26514583-01e8-4db5-ac9b-fe581f80bfc5"),
                            CityId = new Guid("cc5e7147-ed49-4b1b-b4ea-380acbbcd9d2"),
                            Language = "en",
                            Name = "Mykolaiv"
                        },
                        new
                        {
                            Id = new Guid("0a123e98-c08f-4b1e-a1f3-494f16b63fd5"),
                            CityId = new Guid("3ab54bcc-77dc-4074-b305-e2dc9a91ebd4"),
                            Language = "en",
                            Name = "Odesa"
                        },
                        new
                        {
                            Id = new Guid("6c54e9a3-4e38-451e-a6ef-6f036ff8fff2"),
                            CityId = new Guid("9bb83db9-cdbe-4517-95d5-dd164df0f879"),
                            Language = "en",
                            Name = "Poltava"
                        },
                        new
                        {
                            Id = new Guid("0c151d7e-23b1-4355-bd9e-7dbe6206ad09"),
                            CityId = new Guid("1f141682-a7b4-4302-ade1-f111787fc813"),
                            Language = "en",
                            Name = "Rivne"
                        },
                        new
                        {
                            Id = new Guid("f10f4645-c214-4fbd-9a17-3a74cc728c91"),
                            CityId = new Guid("0cae5759-82f6-4831-ab22-7f8761b5a4fd"),
                            Language = "en",
                            Name = "Sumy"
                        },
                        new
                        {
                            Id = new Guid("b2b4653e-4ff7-4a50-9254-f8191741f84a"),
                            CityId = new Guid("4195ce31-c52a-4c8c-a687-327e5781d828"),
                            Language = "en",
                            Name = "Ternopil"
                        },
                        new
                        {
                            Id = new Guid("d2135c14-7088-4bb7-a380-8801757a1673"),
                            CityId = new Guid("25a4c5e8-74dd-4443-a0f9-14d7ebaad753"),
                            Language = "en",
                            Name = "Uzhhorod"
                        },
                        new
                        {
                            Id = new Guid("0593e832-6eaf-4924-8ad3-41ba712b4efd"),
                            CityId = new Guid("98ed47ca-e29f-4921-81ab-c5a0bdbc7cc9"),
                            Language = "en",
                            Name = "Kharkiv"
                        },
                        new
                        {
                            Id = new Guid("2c7e2c05-24de-49be-b5ff-f68b270c0ba1"),
                            CityId = new Guid("d7c64e8f-e4eb-4963-8dba-8cf72df9545a"),
                            Language = "en",
                            Name = "Kherson"
                        },
                        new
                        {
                            Id = new Guid("0f0a1051-1394-4615-8459-1de85809c419"),
                            CityId = new Guid("9239b383-df55-46a5-9c20-7b8838421ae8"),
                            Language = "en",
                            Name = "Khmelnytskyi"
                        },
                        new
                        {
                            Id = new Guid("352bc003-e3e9-42ce-8f6e-fe5c76328f17"),
                            CityId = new Guid("c996d7d5-d4d8-4774-b743-e0c6aa51d26b"),
                            Language = "en",
                            Name = "Cherkasy"
                        },
                        new
                        {
                            Id = new Guid("0e185f28-b47f-41c9-835c-c1d5e149c1a1"),
                            CityId = new Guid("c52e72a8-cdec-43a1-b9aa-f1b5ab4351db"),
                            Language = "en",
                            Name = "Chernivtsi"
                        },
                        new
                        {
                            Id = new Guid("caa2119e-72a2-4fd2-be26-cd6f1189f4ab"),
                            CityId = new Guid("dfc9658c-2196-433f-879d-174bb44e4394"),
                            Language = "en",
                            Name = "Chernihiv"
                        },
                        new
                        {
                            Id = new Guid("de16f96f-f5c6-468e-b538-77bd74868429"),
                            CityId = new Guid("7a9f4c57-c631-42fb-a849-35eb89177f5c"),
                            Language = "uk",
                            Name = "Варшава"
                        },
                        new
                        {
                            Id = new Guid("6f8dd070-4ad6-46ab-abe4-6b5f8a44a78c"),
                            CityId = new Guid("be0776c8-fafc-4b9e-92b2-2670643ac6bb"),
                            Language = "uk",
                            Name = "Люблін"
                        },
                        new
                        {
                            Id = new Guid("b4f514bd-f8a6-4e6c-a0e0-fc41d81562ac"),
                            CityId = new Guid("7a9f4c57-c631-42fb-a849-35eb89177f5c"),
                            Language = "en",
                            Name = "Varshava"
                        },
                        new
                        {
                            Id = new Guid("1571fb9c-8198-4a98-8adb-29577662fc49"),
                            CityId = new Guid("be0776c8-fafc-4b9e-92b2-2670643ac6bb"),
                            Language = "en",
                            Name = "Lublin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fb561ceb-8bcd-484f-af46-387cde7881fa"),
                            ISO = "uk"
                        },
                        new
                        {
                            Id = new Guid("9c4b058b-634a-4776-bbf9-be19e30af95a"),
                            ISO = "pl"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CountryTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("33621aae-f18b-4bf4-a3d6-361e41f8cff7"),
                            CountryId = new Guid("fb561ceb-8bcd-484f-af46-387cde7881fa"),
                            Language = "en",
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("4d854680-e509-493d-8960-9f27bfec30f5"),
                            CountryId = new Guid("fb561ceb-8bcd-484f-af46-387cde7881fa"),
                            Language = "uk",
                            Name = "Україна"
                        },
                        new
                        {
                            Id = new Guid("7267ab5b-4673-4fd5-8fd3-72fc5deebb7a"),
                            CountryId = new Guid("9c4b058b-634a-4776-bbf9-be19e30af95a"),
                            Language = "en",
                            Name = "Poland"
                        },
                        new
                        {
                            Id = new Guid("3fb3d502-aa78-4653-b02a-c41f2869d797"),
                            CountryId = new Guid("9c4b058b-634a-4776-bbf9-be19e30af95a"),
                            Language = "uk",
                            Name = "Польша"
                        });
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ProfilePictures");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0510f486-ea6d-46e1-acbf-d0f0d88637f8"),
                            Title = "medicine"
                        },
                        new
                        {
                            Id = new Guid("383b9544-3e35-4286-b5e5-b5350effded9"),
                            Title = "cook"
                        });
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f68b051e-4cf7-4341-84ac-b04b5fd23c46"),
                            CityId = new Guid("5b72e681-35ff-4c15-9c0a-bba39657dced"),
                            DateOfBirth = new DateTime(2023, 4, 24, 14, 23, 29, 965, DateTimeKind.Local).AddTicks(3832),
                            FirstName = "the first",
                            LastName = "admin",
                            Login = "ourfirstadmin",
                            Password = "Rk/ryiBNbnHx+s9i1IveCNNw4axYPQHm4T1eratfQlg=",
                            Phone = "+11111111111",
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Document")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DocumentFormat")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("NULL");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "ApplicationId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("CityTranslations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("CountryTranslations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithOne("ProfilePicture")
                        .HasForeignKey("DAL.Entities.ProfilePicture", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Volunteers")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Volunteers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Navigation("CityTranslations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("CountryTranslations");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ProfilePicture");

                    b.Navigation("UserSkills");

                    b.Navigation("Volunteers");
                });
#pragma warning restore 612, 618
        }
    }
}
