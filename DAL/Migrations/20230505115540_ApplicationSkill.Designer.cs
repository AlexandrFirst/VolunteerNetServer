// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(VolunteerNetServerDBContext))]
    [Migration("20230505115540_ApplicationSkill")]
    partial class ApplicationSkill
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ApplicationSkill", b =>
                {
                    b.Property<Guid>("ApplicationsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationsId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("ApplicationSkill");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequiredNumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("30e7d7ef-d804-434f-b71a-a4e1acd739ec"),
                            CountryId = new Guid("5f9b14fc-7b65-4e07-a372-287472e24721"),
                            ISO = "vi"
                        },
                        new
                        {
                            Id = new Guid("22f760cd-1ae4-49b3-925f-18acdffb91f1"),
                            CountryId = new Guid("5f9b14fc-7b65-4e07-a372-287472e24721"),
                            ISO = "dn"
                        },
                        new
                        {
                            Id = new Guid("a94e5da2-0993-4c60-a404-ade5c584f0b7"),
                            CountryId = new Guid("5f9b14fc-7b65-4e07-a372-287472e24721"),
                            ISO = "zhy"
                        },
                        new
                        {
                            Id = new Guid("99e8e7bc-477e-4db1-9d83-6e0bb55cc8be"),
                            CountryId = new Guid("5f9b14fc-7b65-4e07-a372-287472e24721"),
                            ISO = "zp"
                        },
                        new
                        {
                            Id = new Guid("771574cd-f0dc-473d-b69d-adc4975dc64b"),
                            CountryId = new Guid("5f9b14fc-7b65-4e07-a372-287472e24721"),
                            ISO = "if"
                        },
                        new
                        {
                            Id = new Guid("710e6fd8-ebfe-4272-aab4-1645dd053b3f"),
                            CountryId = new Guid("5f9b14fc-7b65-4e07-a372-287472e24721"),
                            ISO = "ky"
                        },
                        new
                        {
                            Id = new Guid("f20def03-07b0-4bab-98f9-08f7749a9942"),
                            CountryId = new Guid("5f9b14fc-7b65-4e07-a372-287472e24721"),
                            ISO = "kr"
                        },
                        new
                        {
                            Id = new Guid("5d3cf2cb-2200-4c8e-a5eb-027f92a3e3ac"),
                            CountryId = new Guid("5f9b14fc-7b65-4e07-a372-287472e24721"),
                            ISO = "lut"
                        },
                        new
                        {
                            Id = new Guid("0f8287ec-a76a-42e2-bcc4-d40ec2b41706"),
                            CountryId = new Guid("5f9b14fc-7b65-4e07-a372-287472e24721"),
                            ISO = "lv"
                        },
                        new
                        {
                            Id = new Guid("fec83112-375b-4787-a0be-b661b5cb056b"),
                            CountryId = new Guid("5f9b14fc-7b65-4e07-a372-287472e24721"),
                            ISO = "my"
                        },
                        new
                        {
                            Id = new Guid("ded69edf-4ca6-47cc-a80f-2d04a00071bd"),
                            CountryId = new Guid("5f9b14fc-7b65-4e07-a372-287472e24721"),
                            ISO = "od"
                        },
                        new
                        {
                            Id = new Guid("cad176c9-672a-4798-b8d5-20b99ef0a2ea"),
                            CountryId = new Guid("5f9b14fc-7b65-4e07-a372-287472e24721"),
                            ISO = "pol"
                        },
                        new
                        {
                            Id = new Guid("71c73d52-4f94-453d-85bf-8946b78addce"),
                            CountryId = new Guid("5f9b14fc-7b65-4e07-a372-287472e24721"),
                            ISO = "ri"
                        },
                        new
                        {
                            Id = new Guid("1f5f635c-346f-4fd9-81e0-d9dcd67fcf12"),
                            CountryId = new Guid("5f9b14fc-7b65-4e07-a372-287472e24721"),
                            ISO = "su"
                        },
                        new
                        {
                            Id = new Guid("e87d647d-dff1-404d-a84b-3f7695a7e2ec"),
                            CountryId = new Guid("5f9b14fc-7b65-4e07-a372-287472e24721"),
                            ISO = "ter"
                        },
                        new
                        {
                            Id = new Guid("d9bbf057-75f3-4da4-95c5-a9211a691ef6"),
                            CountryId = new Guid("5f9b14fc-7b65-4e07-a372-287472e24721"),
                            ISO = "uzh"
                        },
                        new
                        {
                            Id = new Guid("b6cab964-bfdb-477d-a09c-f8a755d687a9"),
                            CountryId = new Guid("5f9b14fc-7b65-4e07-a372-287472e24721"),
                            ISO = "khar"
                        },
                        new
                        {
                            Id = new Guid("b7ad7557-b874-44ab-9c1e-719157690365"),
                            CountryId = new Guid("5f9b14fc-7b65-4e07-a372-287472e24721"),
                            ISO = "kher"
                        },
                        new
                        {
                            Id = new Guid("1cd93eb3-94c9-4c99-9443-4d418d796acc"),
                            CountryId = new Guid("5f9b14fc-7b65-4e07-a372-287472e24721"),
                            ISO = "khm"
                        },
                        new
                        {
                            Id = new Guid("61dcec76-afc6-4615-a318-b36642b0bf4c"),
                            CountryId = new Guid("5f9b14fc-7b65-4e07-a372-287472e24721"),
                            ISO = "chk"
                        },
                        new
                        {
                            Id = new Guid("6d199b99-360f-49e9-9dde-9b8f2f1efacd"),
                            CountryId = new Guid("5f9b14fc-7b65-4e07-a372-287472e24721"),
                            ISO = "chv"
                        },
                        new
                        {
                            Id = new Guid("e22e0ebb-461e-47de-be08-4d4be4e3a1d2"),
                            CountryId = new Guid("5f9b14fc-7b65-4e07-a372-287472e24721"),
                            ISO = "chh"
                        },
                        new
                        {
                            Id = new Guid("5210dbfa-dc92-43af-8b11-04ca0c183e76"),
                            CountryId = new Guid("e681cafe-a613-4cac-8939-db493467e7ec"),
                            ISO = "var"
                        },
                        new
                        {
                            Id = new Guid("cb3c0b79-93b5-4b92-9478-d0d15d48cbbf"),
                            CountryId = new Guid("e681cafe-a613-4cac-8939-db493467e7ec"),
                            ISO = "lub"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("CityTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b7c7e6d9-a9ad-48a1-b8f6-9bd0e413d904"),
                            CityId = new Guid("30e7d7ef-d804-434f-b71a-a4e1acd739ec"),
                            Language = "uk",
                            Name = "Вінниця"
                        },
                        new
                        {
                            Id = new Guid("68e00c63-9f8d-4212-a2a2-6f93e1739a58"),
                            CityId = new Guid("22f760cd-1ae4-49b3-925f-18acdffb91f1"),
                            Language = "uk",
                            Name = "Дніпро"
                        },
                        new
                        {
                            Id = new Guid("26e48572-6914-4f75-a59d-65757adaed12"),
                            CityId = new Guid("a94e5da2-0993-4c60-a404-ade5c584f0b7"),
                            Language = "uk",
                            Name = "Житомир"
                        },
                        new
                        {
                            Id = new Guid("3c5b085e-1a85-44e6-b279-618911bf2e03"),
                            CityId = new Guid("99e8e7bc-477e-4db1-9d83-6e0bb55cc8be"),
                            Language = "uk",
                            Name = "Запоріжжя"
                        },
                        new
                        {
                            Id = new Guid("a5f20c68-212b-4872-a103-b1242c9ec2da"),
                            CityId = new Guid("771574cd-f0dc-473d-b69d-adc4975dc64b"),
                            Language = "uk",
                            Name = "Івано-Франківськ"
                        },
                        new
                        {
                            Id = new Guid("88b75d66-cf04-4354-9dc2-f941adf8b5f3"),
                            CityId = new Guid("710e6fd8-ebfe-4272-aab4-1645dd053b3f"),
                            Language = "uk",
                            Name = "Київ"
                        },
                        new
                        {
                            Id = new Guid("c61225f1-f97f-4298-80ea-11761e548f0b"),
                            CityId = new Guid("f20def03-07b0-4bab-98f9-08f7749a9942"),
                            Language = "uk",
                            Name = "Кропивницький"
                        },
                        new
                        {
                            Id = new Guid("ec1eb6cb-67d5-4902-a155-43b55ed799f0"),
                            CityId = new Guid("5d3cf2cb-2200-4c8e-a5eb-027f92a3e3ac"),
                            Language = "uk",
                            Name = "Луцьк"
                        },
                        new
                        {
                            Id = new Guid("f026eba0-55de-41ce-8915-2abc35d3af7a"),
                            CityId = new Guid("0f8287ec-a76a-42e2-bcc4-d40ec2b41706"),
                            Language = "uk",
                            Name = "Львів"
                        },
                        new
                        {
                            Id = new Guid("eb809d4d-5bdc-4ef1-a16c-14652e8e2e75"),
                            CityId = new Guid("fec83112-375b-4787-a0be-b661b5cb056b"),
                            Language = "uk",
                            Name = "Миколаїв"
                        },
                        new
                        {
                            Id = new Guid("d1702b22-c234-46a6-98cb-11aed84e5e2c"),
                            CityId = new Guid("ded69edf-4ca6-47cc-a80f-2d04a00071bd"),
                            Language = "uk",
                            Name = "Одеса"
                        },
                        new
                        {
                            Id = new Guid("c6f44c04-6eaf-48fb-9e6c-49dd8ea27940"),
                            CityId = new Guid("cad176c9-672a-4798-b8d5-20b99ef0a2ea"),
                            Language = "uk",
                            Name = "Полтава"
                        },
                        new
                        {
                            Id = new Guid("2df01f67-194f-47f1-a987-7a1c9b795f91"),
                            CityId = new Guid("71c73d52-4f94-453d-85bf-8946b78addce"),
                            Language = "uk",
                            Name = "Рівне"
                        },
                        new
                        {
                            Id = new Guid("53d70959-64a8-4b9d-b7d8-584abb2d9485"),
                            CityId = new Guid("1f5f635c-346f-4fd9-81e0-d9dcd67fcf12"),
                            Language = "uk",
                            Name = "Суми"
                        },
                        new
                        {
                            Id = new Guid("eb2b420e-cdf6-4bdf-bf83-68e5a47be204"),
                            CityId = new Guid("e87d647d-dff1-404d-a84b-3f7695a7e2ec"),
                            Language = "uk",
                            Name = "Тернопіль"
                        },
                        new
                        {
                            Id = new Guid("4929b8fd-c91d-4e23-b504-51bfa23c7cdb"),
                            CityId = new Guid("d9bbf057-75f3-4da4-95c5-a9211a691ef6"),
                            Language = "uk",
                            Name = "Ужгород"
                        },
                        new
                        {
                            Id = new Guid("dcd3a1cb-cc57-47b1-8a10-601ac8efed63"),
                            CityId = new Guid("b6cab964-bfdb-477d-a09c-f8a755d687a9"),
                            Language = "uk",
                            Name = "Харків"
                        },
                        new
                        {
                            Id = new Guid("2832978a-acfe-4bb9-8e9c-347b23475170"),
                            CityId = new Guid("b7ad7557-b874-44ab-9c1e-719157690365"),
                            Language = "uk",
                            Name = "Херсон"
                        },
                        new
                        {
                            Id = new Guid("abbec467-3573-46c6-a7ac-92fa4f855a38"),
                            CityId = new Guid("1cd93eb3-94c9-4c99-9443-4d418d796acc"),
                            Language = "uk",
                            Name = "Хмельницький"
                        },
                        new
                        {
                            Id = new Guid("f91c35d7-42bd-4741-9ce6-2cbd7c1583b2"),
                            CityId = new Guid("61dcec76-afc6-4615-a318-b36642b0bf4c"),
                            Language = "uk",
                            Name = "Черкаси"
                        },
                        new
                        {
                            Id = new Guid("ab94a6c1-f8ed-4703-baa0-3c2ad2a53bcc"),
                            CityId = new Guid("6d199b99-360f-49e9-9dde-9b8f2f1efacd"),
                            Language = "uk",
                            Name = "Чернівці"
                        },
                        new
                        {
                            Id = new Guid("c289c3f4-ba77-48d7-ae35-766fcf8ede88"),
                            CityId = new Guid("e22e0ebb-461e-47de-be08-4d4be4e3a1d2"),
                            Language = "uk",
                            Name = "Чернігів"
                        },
                        new
                        {
                            Id = new Guid("5bce4cba-250c-4794-9576-f419cfd1078a"),
                            CityId = new Guid("30e7d7ef-d804-434f-b71a-a4e1acd739ec"),
                            Language = "en",
                            Name = "Vinnytsia"
                        },
                        new
                        {
                            Id = new Guid("ec4ca34a-2dd4-43bc-843a-361af08c72bd"),
                            CityId = new Guid("22f760cd-1ae4-49b3-925f-18acdffb91f1"),
                            Language = "en",
                            Name = "Dnipro"
                        },
                        new
                        {
                            Id = new Guid("327a8f8a-3669-4a42-bf66-791edc69ac75"),
                            CityId = new Guid("a94e5da2-0993-4c60-a404-ade5c584f0b7"),
                            Language = "en",
                            Name = "Zhytomyr"
                        },
                        new
                        {
                            Id = new Guid("c98d78c1-5ad7-4271-9cbe-017d68cdff49"),
                            CityId = new Guid("99e8e7bc-477e-4db1-9d83-6e0bb55cc8be"),
                            Language = "en",
                            Name = "Zaporizhzhia"
                        },
                        new
                        {
                            Id = new Guid("400b4d30-31cf-4b00-b1bf-021ea34398b6"),
                            CityId = new Guid("771574cd-f0dc-473d-b69d-adc4975dc64b"),
                            Language = "en",
                            Name = "Ivano-Frankivsk"
                        },
                        new
                        {
                            Id = new Guid("3d954783-729a-4827-9f58-20b184fa3312"),
                            CityId = new Guid("710e6fd8-ebfe-4272-aab4-1645dd053b3f"),
                            Language = "en",
                            Name = "Kyiv"
                        },
                        new
                        {
                            Id = new Guid("bf876b97-92b7-4957-8261-4e2b425e74c3"),
                            CityId = new Guid("f20def03-07b0-4bab-98f9-08f7749a9942"),
                            Language = "en",
                            Name = "Kropyvnytskyi"
                        },
                        new
                        {
                            Id = new Guid("49be084b-1032-49d1-930e-5c393d9c4ed1"),
                            CityId = new Guid("5d3cf2cb-2200-4c8e-a5eb-027f92a3e3ac"),
                            Language = "en",
                            Name = "Lutsk"
                        },
                        new
                        {
                            Id = new Guid("3e4284eb-79b3-4f05-a409-5b1a6b2e07c2"),
                            CityId = new Guid("0f8287ec-a76a-42e2-bcc4-d40ec2b41706"),
                            Language = "en",
                            Name = "Lviv"
                        },
                        new
                        {
                            Id = new Guid("749c6110-3acd-4b23-9b7c-a7fb382603ef"),
                            CityId = new Guid("fec83112-375b-4787-a0be-b661b5cb056b"),
                            Language = "en",
                            Name = "Mykolaiv"
                        },
                        new
                        {
                            Id = new Guid("710237b5-63db-467d-a231-3ad0a42fb5ed"),
                            CityId = new Guid("ded69edf-4ca6-47cc-a80f-2d04a00071bd"),
                            Language = "en",
                            Name = "Odesa"
                        },
                        new
                        {
                            Id = new Guid("741b694e-fc2d-4be2-800f-f9aa472fd4a5"),
                            CityId = new Guid("cad176c9-672a-4798-b8d5-20b99ef0a2ea"),
                            Language = "en",
                            Name = "Poltava"
                        },
                        new
                        {
                            Id = new Guid("f29f214a-e618-4930-97a2-5a5d932da0de"),
                            CityId = new Guid("71c73d52-4f94-453d-85bf-8946b78addce"),
                            Language = "en",
                            Name = "Rivne"
                        },
                        new
                        {
                            Id = new Guid("75258def-f349-40ad-9760-11994bd167d2"),
                            CityId = new Guid("1f5f635c-346f-4fd9-81e0-d9dcd67fcf12"),
                            Language = "en",
                            Name = "Sumy"
                        },
                        new
                        {
                            Id = new Guid("3240a006-f2ef-4d7f-9762-5391eea6905e"),
                            CityId = new Guid("e87d647d-dff1-404d-a84b-3f7695a7e2ec"),
                            Language = "en",
                            Name = "Ternopil"
                        },
                        new
                        {
                            Id = new Guid("f996e733-a7c3-4a9f-9744-1030129b0ead"),
                            CityId = new Guid("d9bbf057-75f3-4da4-95c5-a9211a691ef6"),
                            Language = "en",
                            Name = "Uzhhorod"
                        },
                        new
                        {
                            Id = new Guid("c9ff3c37-6727-463b-9f25-16e3bad217a7"),
                            CityId = new Guid("b6cab964-bfdb-477d-a09c-f8a755d687a9"),
                            Language = "en",
                            Name = "Kharkiv"
                        },
                        new
                        {
                            Id = new Guid("260d6ed7-fe39-4b44-933a-3274c0d5033e"),
                            CityId = new Guid("b7ad7557-b874-44ab-9c1e-719157690365"),
                            Language = "en",
                            Name = "Kherson"
                        },
                        new
                        {
                            Id = new Guid("111be736-7d09-4c02-874a-7fc35b9d1a44"),
                            CityId = new Guid("1cd93eb3-94c9-4c99-9443-4d418d796acc"),
                            Language = "en",
                            Name = "Khmelnytskyi"
                        },
                        new
                        {
                            Id = new Guid("f51cdd9c-3405-416b-8b13-508628c54074"),
                            CityId = new Guid("61dcec76-afc6-4615-a318-b36642b0bf4c"),
                            Language = "en",
                            Name = "Cherkasy"
                        },
                        new
                        {
                            Id = new Guid("71304c57-6b5a-4c2e-afd2-9fd47f02accf"),
                            CityId = new Guid("6d199b99-360f-49e9-9dde-9b8f2f1efacd"),
                            Language = "en",
                            Name = "Chernivtsi"
                        },
                        new
                        {
                            Id = new Guid("c07b14b9-477b-486f-b0da-c9bd5154d54b"),
                            CityId = new Guid("e22e0ebb-461e-47de-be08-4d4be4e3a1d2"),
                            Language = "en",
                            Name = "Chernihiv"
                        },
                        new
                        {
                            Id = new Guid("a34bba7c-226f-4669-abaf-ef6c8897de47"),
                            CityId = new Guid("5210dbfa-dc92-43af-8b11-04ca0c183e76"),
                            Language = "uk",
                            Name = "Варшава"
                        },
                        new
                        {
                            Id = new Guid("f42e460a-b3e4-488d-bbb9-f248eaa9414d"),
                            CityId = new Guid("cb3c0b79-93b5-4b92-9478-d0d15d48cbbf"),
                            Language = "uk",
                            Name = "Люблін"
                        },
                        new
                        {
                            Id = new Guid("da1d0cae-f811-4bbf-ad6b-c61889dc972c"),
                            CityId = new Guid("5210dbfa-dc92-43af-8b11-04ca0c183e76"),
                            Language = "en",
                            Name = "Varshava"
                        },
                        new
                        {
                            Id = new Guid("54c0ea4f-17a9-4e3a-9529-66507a5f52dc"),
                            CityId = new Guid("cb3c0b79-93b5-4b92-9478-d0d15d48cbbf"),
                            Language = "en",
                            Name = "Lublin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5f9b14fc-7b65-4e07-a372-287472e24721"),
                            ISO = "uk"
                        },
                        new
                        {
                            Id = new Guid("e681cafe-a613-4cac-8939-db493467e7ec"),
                            ISO = "pl"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CountryTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cffb7080-b0ca-4665-851c-6a378a774e42"),
                            CountryId = new Guid("5f9b14fc-7b65-4e07-a372-287472e24721"),
                            Language = "en",
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("823b7e11-1072-41a8-9c2e-262c51f60840"),
                            CountryId = new Guid("5f9b14fc-7b65-4e07-a372-287472e24721"),
                            Language = "uk",
                            Name = "Україна"
                        },
                        new
                        {
                            Id = new Guid("8dcbd7bb-0087-4940-8fc8-30ce5162d33c"),
                            CountryId = new Guid("e681cafe-a613-4cac-8939-db493467e7ec"),
                            Language = "en",
                            Name = "Poland"
                        },
                        new
                        {
                            Id = new Guid("c581de22-be2c-4906-932b-ce39bcfa7238"),
                            CountryId = new Guid("e681cafe-a613-4cac-8939-db493467e7ec"),
                            Language = "uk",
                            Name = "Польша"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VolunteerApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VolunteerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VolunteerUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VolunteerUserId", "VolunteerApplicationId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ProfilePictures");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4e2019b4-1e25-4656-b55f-f8c59cb93577"),
                            Title = "medicine"
                        },
                        new
                        {
                            Id = new Guid("fb5dadbe-f3ce-4111-aae3-2e3ebbc70a03"),
                            Title = "cooking"
                        },
                        new
                        {
                            Id = new Guid("8d28efd5-44fa-4895-9048-6bf8508d959e"),
                            Title = "building"
                        },
                        new
                        {
                            Id = new Guid("cb30c156-5aa9-43c6-a2b2-44c384821237"),
                            Title = "psychology"
                        });
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2b022a3a-5b4c-4fec-b56b-204d00d6fff9"),
                            Language = "en",
                            Name = "medicine",
                            SkillId = new Guid("4e2019b4-1e25-4656-b55f-f8c59cb93577")
                        },
                        new
                        {
                            Id = new Guid("e77ce4a7-8976-4ba8-ac81-3f50fc7aa7e2"),
                            Language = "uk",
                            Name = "медицина",
                            SkillId = new Guid("4e2019b4-1e25-4656-b55f-f8c59cb93577")
                        },
                        new
                        {
                            Id = new Guid("94105062-ecc1-44a4-abec-28969d03fb15"),
                            Language = "en",
                            Name = "cooking",
                            SkillId = new Guid("fb5dadbe-f3ce-4111-aae3-2e3ebbc70a03")
                        },
                        new
                        {
                            Id = new Guid("31319a56-0b47-4a9d-8667-823d8ff43e05"),
                            Language = "uk",
                            Name = "кулінарія",
                            SkillId = new Guid("fb5dadbe-f3ce-4111-aae3-2e3ebbc70a03")
                        },
                        new
                        {
                            Id = new Guid("65689005-8768-4f3f-9fa6-1ed77c221c1b"),
                            Language = "en",
                            Name = "building",
                            SkillId = new Guid("8d28efd5-44fa-4895-9048-6bf8508d959e")
                        },
                        new
                        {
                            Id = new Guid("2fd13941-9226-42ae-bd16-5b8754e98515"),
                            Language = "uk",
                            Name = "будівництво",
                            SkillId = new Guid("8d28efd5-44fa-4895-9048-6bf8508d959e")
                        },
                        new
                        {
                            Id = new Guid("d2fa96bf-e8e9-47ed-be91-f9c0e93fbd97"),
                            Language = "en",
                            Name = "psychology",
                            SkillId = new Guid("cb30c156-5aa9-43c6-a2b2-44c384821237")
                        },
                        new
                        {
                            Id = new Guid("938e24f8-8fc7-4b25-b210-0058df364d8f"),
                            Language = "uk",
                            Name = "психологія",
                            SkillId = new Guid("cb30c156-5aa9-43c6-a2b2-44c384821237")
                        });
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9c1adeca-80d8-4930-b024-3978961e2fec"),
                            CityId = new Guid("30e7d7ef-d804-434f-b71a-a4e1acd739ec"),
                            DateOfBirth = new DateTime(2023, 5, 5, 14, 55, 39, 911, DateTimeKind.Local).AddTicks(5667),
                            FirstName = "the first",
                            LastName = "admin",
                            Login = "ourfirstadmin",
                            Password = "Rk/ryiBNbnHx+s9i1IveCNNw4axYPQHm4T1eratfQlg=",
                            Phone = "+11111111111",
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Document")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DocumentFormat")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("NULL");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ApplicationId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Volunteers");
                });

            modelBuilder.Entity("ApplicationSkill", b =>
                {
                    b.HasOne("DAL.Entities.Application", null)
                        .WithMany()
                        .HasForeignKey("ApplicationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Skill", null)
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("Applications")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("CityTranslations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("CountryTranslations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.HasOne("DAL.Entities.Volunteer", "Volunteer")
                        .WithMany("Messages")
                        .HasForeignKey("VolunteerUserId", "VolunteerApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithOne("ProfilePicture")
                        .HasForeignKey("DAL.Entities.ProfilePicture", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("SkillTranslations")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Volunteers")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Volunteers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("CityTranslations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("CountryTranslations");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Navigation("SkillTranslations");

                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ProfilePicture");

                    b.Navigation("UserSkills");

                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
