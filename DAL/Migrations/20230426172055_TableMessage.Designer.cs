// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(VolunteerNetServerDBContext))]
    [Migration("20230426172055_TableMessage")]
    partial class TableMessage
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<int>("RequiredNumberOfVolunteers")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("84967efa-d1df-4fd4-93a9-9102acae8d62"),
                            CountryId = new Guid("ab2374c7-d7ce-41a3-8562-3b1d7d11efa1"),
                            ISO = "vi"
                        },
                        new
                        {
                            Id = new Guid("753f2b3a-99c1-41bb-ae93-b6851e615206"),
                            CountryId = new Guid("ab2374c7-d7ce-41a3-8562-3b1d7d11efa1"),
                            ISO = "dn"
                        },
                        new
                        {
                            Id = new Guid("2769eca9-aa80-426c-9f49-88fef5a7aa4c"),
                            CountryId = new Guid("ab2374c7-d7ce-41a3-8562-3b1d7d11efa1"),
                            ISO = "zhy"
                        },
                        new
                        {
                            Id = new Guid("6b3e9e6e-5acd-454f-85e8-d7f7ff8ddf55"),
                            CountryId = new Guid("ab2374c7-d7ce-41a3-8562-3b1d7d11efa1"),
                            ISO = "zp"
                        },
                        new
                        {
                            Id = new Guid("921789ef-11dd-47a1-9fce-be95610389e7"),
                            CountryId = new Guid("ab2374c7-d7ce-41a3-8562-3b1d7d11efa1"),
                            ISO = "if"
                        },
                        new
                        {
                            Id = new Guid("83fb5d44-6f68-4161-8029-251533401daf"),
                            CountryId = new Guid("ab2374c7-d7ce-41a3-8562-3b1d7d11efa1"),
                            ISO = "ky"
                        },
                        new
                        {
                            Id = new Guid("811b0642-3dbf-4832-b78d-916a1e2f6d92"),
                            CountryId = new Guid("ab2374c7-d7ce-41a3-8562-3b1d7d11efa1"),
                            ISO = "kr"
                        },
                        new
                        {
                            Id = new Guid("985f9725-38f5-43cb-a070-d66de0073152"),
                            CountryId = new Guid("ab2374c7-d7ce-41a3-8562-3b1d7d11efa1"),
                            ISO = "lut"
                        },
                        new
                        {
                            Id = new Guid("cb1240ba-bc81-4342-a93d-7ebdc0d5d19b"),
                            CountryId = new Guid("ab2374c7-d7ce-41a3-8562-3b1d7d11efa1"),
                            ISO = "lv"
                        },
                        new
                        {
                            Id = new Guid("f89916d4-ab24-4c7c-b4bf-061eb87e28d0"),
                            CountryId = new Guid("ab2374c7-d7ce-41a3-8562-3b1d7d11efa1"),
                            ISO = "my"
                        },
                        new
                        {
                            Id = new Guid("2276b02f-719f-4046-aeb9-6a816059bfe3"),
                            CountryId = new Guid("ab2374c7-d7ce-41a3-8562-3b1d7d11efa1"),
                            ISO = "od"
                        },
                        new
                        {
                            Id = new Guid("8589ca54-a2db-44b9-85b5-f20cc38188f7"),
                            CountryId = new Guid("ab2374c7-d7ce-41a3-8562-3b1d7d11efa1"),
                            ISO = "pol"
                        },
                        new
                        {
                            Id = new Guid("68c0ab10-a54c-4deb-b35c-b36a9b4f6264"),
                            CountryId = new Guid("ab2374c7-d7ce-41a3-8562-3b1d7d11efa1"),
                            ISO = "ri"
                        },
                        new
                        {
                            Id = new Guid("cb6165ce-f2e9-47a0-89ae-c1e8dbb869d6"),
                            CountryId = new Guid("ab2374c7-d7ce-41a3-8562-3b1d7d11efa1"),
                            ISO = "su"
                        },
                        new
                        {
                            Id = new Guid("3267d879-f47f-4e0a-87f2-eab8cd1669df"),
                            CountryId = new Guid("ab2374c7-d7ce-41a3-8562-3b1d7d11efa1"),
                            ISO = "ter"
                        },
                        new
                        {
                            Id = new Guid("d43168d7-d7bb-44b8-af7f-5b30e887f90d"),
                            CountryId = new Guid("ab2374c7-d7ce-41a3-8562-3b1d7d11efa1"),
                            ISO = "uzh"
                        },
                        new
                        {
                            Id = new Guid("7c827f73-ea66-406c-b7a0-cba5eacb0a62"),
                            CountryId = new Guid("ab2374c7-d7ce-41a3-8562-3b1d7d11efa1"),
                            ISO = "khar"
                        },
                        new
                        {
                            Id = new Guid("3edb7c37-2564-4730-bee7-b4e0f5656c31"),
                            CountryId = new Guid("ab2374c7-d7ce-41a3-8562-3b1d7d11efa1"),
                            ISO = "kher"
                        },
                        new
                        {
                            Id = new Guid("9c701fcf-59dd-4a39-b91a-3937f0a0228c"),
                            CountryId = new Guid("ab2374c7-d7ce-41a3-8562-3b1d7d11efa1"),
                            ISO = "khm"
                        },
                        new
                        {
                            Id = new Guid("ad2edb55-ec92-4447-a989-be8889e32b09"),
                            CountryId = new Guid("ab2374c7-d7ce-41a3-8562-3b1d7d11efa1"),
                            ISO = "chk"
                        },
                        new
                        {
                            Id = new Guid("52328248-d58d-4bb4-81c7-92e6be6fb85c"),
                            CountryId = new Guid("ab2374c7-d7ce-41a3-8562-3b1d7d11efa1"),
                            ISO = "chv"
                        },
                        new
                        {
                            Id = new Guid("52e55c05-b9ea-43b8-a5b7-187e76086094"),
                            CountryId = new Guid("ab2374c7-d7ce-41a3-8562-3b1d7d11efa1"),
                            ISO = "chh"
                        },
                        new
                        {
                            Id = new Guid("576a8f1e-ec55-4557-ae6a-ed2f5a445184"),
                            CountryId = new Guid("3aed49b5-79a6-4635-b478-6e2d8a2f0fbd"),
                            ISO = "var"
                        },
                        new
                        {
                            Id = new Guid("3cef1322-c5f5-426e-a9ad-4a307da0bea5"),
                            CountryId = new Guid("3aed49b5-79a6-4635-b478-6e2d8a2f0fbd"),
                            ISO = "lub"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("CityTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b7cfaed5-c7fc-4a55-a4b7-ba3115f1d322"),
                            CityId = new Guid("84967efa-d1df-4fd4-93a9-9102acae8d62"),
                            Language = "uk",
                            Name = "Вінниця"
                        },
                        new
                        {
                            Id = new Guid("8db2aad1-784b-421c-a5cc-5a05c4bf6e25"),
                            CityId = new Guid("753f2b3a-99c1-41bb-ae93-b6851e615206"),
                            Language = "uk",
                            Name = "Дніпро"
                        },
                        new
                        {
                            Id = new Guid("942b5f81-087f-4d47-ada9-484ddb6054f7"),
                            CityId = new Guid("2769eca9-aa80-426c-9f49-88fef5a7aa4c"),
                            Language = "uk",
                            Name = "Житомир"
                        },
                        new
                        {
                            Id = new Guid("e63f0d09-c177-485a-b004-b683c8a807a0"),
                            CityId = new Guid("6b3e9e6e-5acd-454f-85e8-d7f7ff8ddf55"),
                            Language = "uk",
                            Name = "Запоріжжя"
                        },
                        new
                        {
                            Id = new Guid("6a2a8a9a-15ff-4932-bc74-eb7145a4a5e8"),
                            CityId = new Guid("921789ef-11dd-47a1-9fce-be95610389e7"),
                            Language = "uk",
                            Name = "Івано-Франківськ"
                        },
                        new
                        {
                            Id = new Guid("5f04fae9-819e-47d7-8fc5-47611345b712"),
                            CityId = new Guid("83fb5d44-6f68-4161-8029-251533401daf"),
                            Language = "uk",
                            Name = "Київ"
                        },
                        new
                        {
                            Id = new Guid("a14389f0-7ee8-466a-a37c-a16107401e57"),
                            CityId = new Guid("811b0642-3dbf-4832-b78d-916a1e2f6d92"),
                            Language = "uk",
                            Name = "Кропивницький"
                        },
                        new
                        {
                            Id = new Guid("1a678c47-2d12-43c4-831b-21f700084ea8"),
                            CityId = new Guid("985f9725-38f5-43cb-a070-d66de0073152"),
                            Language = "uk",
                            Name = "Луцьк"
                        },
                        new
                        {
                            Id = new Guid("1b77b5e0-ca70-4cbc-b396-00bb4dfbd4c1"),
                            CityId = new Guid("cb1240ba-bc81-4342-a93d-7ebdc0d5d19b"),
                            Language = "uk",
                            Name = "Львів"
                        },
                        new
                        {
                            Id = new Guid("6f0c4403-da70-4a33-9034-9bb50665b689"),
                            CityId = new Guid("f89916d4-ab24-4c7c-b4bf-061eb87e28d0"),
                            Language = "uk",
                            Name = "Миколаїв"
                        },
                        new
                        {
                            Id = new Guid("1b3edee2-508b-469f-bb4a-24b341616cd8"),
                            CityId = new Guid("2276b02f-719f-4046-aeb9-6a816059bfe3"),
                            Language = "uk",
                            Name = "Одеса"
                        },
                        new
                        {
                            Id = new Guid("99e2a960-15f7-4bea-ab51-1a0828a1b3c2"),
                            CityId = new Guid("8589ca54-a2db-44b9-85b5-f20cc38188f7"),
                            Language = "uk",
                            Name = "Полтава"
                        },
                        new
                        {
                            Id = new Guid("826e73ed-91d6-4d75-9fb8-e1c7139e3357"),
                            CityId = new Guid("68c0ab10-a54c-4deb-b35c-b36a9b4f6264"),
                            Language = "uk",
                            Name = "Рівне"
                        },
                        new
                        {
                            Id = new Guid("9b70baa2-6dc9-46cb-858d-cd1012b00f7e"),
                            CityId = new Guid("cb6165ce-f2e9-47a0-89ae-c1e8dbb869d6"),
                            Language = "uk",
                            Name = "Суми"
                        },
                        new
                        {
                            Id = new Guid("cb7937b4-e527-4b5c-9640-abbc42934dc2"),
                            CityId = new Guid("3267d879-f47f-4e0a-87f2-eab8cd1669df"),
                            Language = "uk",
                            Name = "Тернопіль"
                        },
                        new
                        {
                            Id = new Guid("d79b5fa2-1c83-4bd1-b78f-3b96305647a4"),
                            CityId = new Guid("d43168d7-d7bb-44b8-af7f-5b30e887f90d"),
                            Language = "uk",
                            Name = "Ужгород"
                        },
                        new
                        {
                            Id = new Guid("a39a0d58-d59e-4e17-8c79-6c61b8273177"),
                            CityId = new Guid("7c827f73-ea66-406c-b7a0-cba5eacb0a62"),
                            Language = "uk",
                            Name = "Харків"
                        },
                        new
                        {
                            Id = new Guid("c0f76ee4-01bc-4d2d-bd2e-b2b414047e93"),
                            CityId = new Guid("3edb7c37-2564-4730-bee7-b4e0f5656c31"),
                            Language = "uk",
                            Name = "Херсон"
                        },
                        new
                        {
                            Id = new Guid("6712dc7e-6ba8-4d71-8869-75d3f1a79076"),
                            CityId = new Guid("9c701fcf-59dd-4a39-b91a-3937f0a0228c"),
                            Language = "uk",
                            Name = "Хмельницький"
                        },
                        new
                        {
                            Id = new Guid("4eb63089-3238-472c-883d-8c58469e9e8e"),
                            CityId = new Guid("ad2edb55-ec92-4447-a989-be8889e32b09"),
                            Language = "uk",
                            Name = "Черкаси"
                        },
                        new
                        {
                            Id = new Guid("b21b1893-4ff0-4b82-b743-b45aac422114"),
                            CityId = new Guid("52328248-d58d-4bb4-81c7-92e6be6fb85c"),
                            Language = "uk",
                            Name = "Чернівці"
                        },
                        new
                        {
                            Id = new Guid("113072e7-07ce-4cdb-a13a-ea7b11314e0d"),
                            CityId = new Guid("52e55c05-b9ea-43b8-a5b7-187e76086094"),
                            Language = "uk",
                            Name = "Чернігів"
                        },
                        new
                        {
                            Id = new Guid("15d3a12d-e5f4-4d36-89db-78b8732052c8"),
                            CityId = new Guid("84967efa-d1df-4fd4-93a9-9102acae8d62"),
                            Language = "en",
                            Name = "Vinnytsia"
                        },
                        new
                        {
                            Id = new Guid("1a6bf1c0-8841-4e53-b48b-8f760aedb08d"),
                            CityId = new Guid("753f2b3a-99c1-41bb-ae93-b6851e615206"),
                            Language = "en",
                            Name = "Dnipro"
                        },
                        new
                        {
                            Id = new Guid("235f5a72-da39-44da-8efc-6743f4460488"),
                            CityId = new Guid("2769eca9-aa80-426c-9f49-88fef5a7aa4c"),
                            Language = "en",
                            Name = "Zhytomyr"
                        },
                        new
                        {
                            Id = new Guid("232e7930-8949-4442-a426-44bc2d266c1f"),
                            CityId = new Guid("6b3e9e6e-5acd-454f-85e8-d7f7ff8ddf55"),
                            Language = "en",
                            Name = "Zaporizhzhia"
                        },
                        new
                        {
                            Id = new Guid("311a599b-7c5a-41b3-ad62-9271fb982fbe"),
                            CityId = new Guid("921789ef-11dd-47a1-9fce-be95610389e7"),
                            Language = "en",
                            Name = "Ivano-Frankivsk"
                        },
                        new
                        {
                            Id = new Guid("596e047d-5fe0-4d92-8c10-43996b46abfa"),
                            CityId = new Guid("83fb5d44-6f68-4161-8029-251533401daf"),
                            Language = "en",
                            Name = "Kyiv"
                        },
                        new
                        {
                            Id = new Guid("4c4a65e1-f798-4487-874d-23e81eaad62b"),
                            CityId = new Guid("811b0642-3dbf-4832-b78d-916a1e2f6d92"),
                            Language = "en",
                            Name = "Kropyvnytskyi"
                        },
                        new
                        {
                            Id = new Guid("0e2e85d2-d701-4e33-82e1-39c0d8357d1f"),
                            CityId = new Guid("985f9725-38f5-43cb-a070-d66de0073152"),
                            Language = "en",
                            Name = "Lutsk"
                        },
                        new
                        {
                            Id = new Guid("d309d91e-ac1f-42a0-9e99-515272cb442d"),
                            CityId = new Guid("cb1240ba-bc81-4342-a93d-7ebdc0d5d19b"),
                            Language = "en",
                            Name = "Lviv"
                        },
                        new
                        {
                            Id = new Guid("1ae08791-db90-4ee5-bb93-67b21c1e4e23"),
                            CityId = new Guid("f89916d4-ab24-4c7c-b4bf-061eb87e28d0"),
                            Language = "en",
                            Name = "Mykolaiv"
                        },
                        new
                        {
                            Id = new Guid("87536e2f-d84e-46c7-b227-6d0bb01f7444"),
                            CityId = new Guid("2276b02f-719f-4046-aeb9-6a816059bfe3"),
                            Language = "en",
                            Name = "Odesa"
                        },
                        new
                        {
                            Id = new Guid("0afdd3fe-5f3a-4c1b-87b0-48a6f2b289d4"),
                            CityId = new Guid("8589ca54-a2db-44b9-85b5-f20cc38188f7"),
                            Language = "en",
                            Name = "Poltava"
                        },
                        new
                        {
                            Id = new Guid("1e1dacc7-29e1-4924-a7f6-91ff1d41839f"),
                            CityId = new Guid("68c0ab10-a54c-4deb-b35c-b36a9b4f6264"),
                            Language = "en",
                            Name = "Rivne"
                        },
                        new
                        {
                            Id = new Guid("2d7c440e-bc0d-4e15-8417-80583d3fb0d1"),
                            CityId = new Guid("cb6165ce-f2e9-47a0-89ae-c1e8dbb869d6"),
                            Language = "en",
                            Name = "Sumy"
                        },
                        new
                        {
                            Id = new Guid("4520604f-4a23-4cba-a824-1cb553a7761b"),
                            CityId = new Guid("3267d879-f47f-4e0a-87f2-eab8cd1669df"),
                            Language = "en",
                            Name = "Ternopil"
                        },
                        new
                        {
                            Id = new Guid("f246a2b2-8aae-4ccd-92e2-0305aa29b4a3"),
                            CityId = new Guid("d43168d7-d7bb-44b8-af7f-5b30e887f90d"),
                            Language = "en",
                            Name = "Uzhhorod"
                        },
                        new
                        {
                            Id = new Guid("992fdde7-6686-4120-a62b-d552ececb710"),
                            CityId = new Guid("7c827f73-ea66-406c-b7a0-cba5eacb0a62"),
                            Language = "en",
                            Name = "Kharkiv"
                        },
                        new
                        {
                            Id = new Guid("0d7143be-db6b-48ec-b694-b7e385c6b54c"),
                            CityId = new Guid("3edb7c37-2564-4730-bee7-b4e0f5656c31"),
                            Language = "en",
                            Name = "Kherson"
                        },
                        new
                        {
                            Id = new Guid("d422f4b2-7059-429e-90c6-b150d9b8778b"),
                            CityId = new Guid("9c701fcf-59dd-4a39-b91a-3937f0a0228c"),
                            Language = "en",
                            Name = "Khmelnytskyi"
                        },
                        new
                        {
                            Id = new Guid("72564bdc-5e27-455c-9e9a-a9ff7d02ed06"),
                            CityId = new Guid("ad2edb55-ec92-4447-a989-be8889e32b09"),
                            Language = "en",
                            Name = "Cherkasy"
                        },
                        new
                        {
                            Id = new Guid("9729b448-ea4e-4d28-90c9-91d53f395c41"),
                            CityId = new Guid("52328248-d58d-4bb4-81c7-92e6be6fb85c"),
                            Language = "en",
                            Name = "Chernivtsi"
                        },
                        new
                        {
                            Id = new Guid("a25cd4c7-e482-4105-8bc8-9ded41cf7507"),
                            CityId = new Guid("52e55c05-b9ea-43b8-a5b7-187e76086094"),
                            Language = "en",
                            Name = "Chernihiv"
                        },
                        new
                        {
                            Id = new Guid("961c7304-3ff4-49d1-bac1-5336445555a6"),
                            CityId = new Guid("576a8f1e-ec55-4557-ae6a-ed2f5a445184"),
                            Language = "uk",
                            Name = "Варшава"
                        },
                        new
                        {
                            Id = new Guid("9297c74f-b47f-4f9a-9cc0-fb8f4f24addc"),
                            CityId = new Guid("3cef1322-c5f5-426e-a9ad-4a307da0bea5"),
                            Language = "uk",
                            Name = "Люблін"
                        },
                        new
                        {
                            Id = new Guid("c1829a07-2f7e-43b0-8907-3188876941b3"),
                            CityId = new Guid("576a8f1e-ec55-4557-ae6a-ed2f5a445184"),
                            Language = "en",
                            Name = "Varshava"
                        },
                        new
                        {
                            Id = new Guid("6f2c6be7-682a-47d2-9493-71564176a1b0"),
                            CityId = new Guid("3cef1322-c5f5-426e-a9ad-4a307da0bea5"),
                            Language = "en",
                            Name = "Lublin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ab2374c7-d7ce-41a3-8562-3b1d7d11efa1"),
                            ISO = "uk"
                        },
                        new
                        {
                            Id = new Guid("3aed49b5-79a6-4635-b478-6e2d8a2f0fbd"),
                            ISO = "pl"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CountryTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a5db8812-c9d9-4b31-9015-629167e84aba"),
                            CountryId = new Guid("ab2374c7-d7ce-41a3-8562-3b1d7d11efa1"),
                            Language = "en",
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("99323699-ae93-474a-b6f0-05ddecd9882a"),
                            CountryId = new Guid("ab2374c7-d7ce-41a3-8562-3b1d7d11efa1"),
                            Language = "uk",
                            Name = "Україна"
                        },
                        new
                        {
                            Id = new Guid("edc5acc8-e0e5-47b0-a9f6-f50f27cc9267"),
                            CountryId = new Guid("3aed49b5-79a6-4635-b478-6e2d8a2f0fbd"),
                            Language = "en",
                            Name = "Poland"
                        },
                        new
                        {
                            Id = new Guid("36f33a3d-e3ce-40d2-86fd-05363fb5822d"),
                            CountryId = new Guid("3aed49b5-79a6-4635-b478-6e2d8a2f0fbd"),
                            Language = "uk",
                            Name = "Польша"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VolunteerApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VolunteerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VolunteerUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VolunteerUserId", "VolunteerApplicationId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ProfilePictures");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("86f8c005-1359-402e-a2e3-bcf5ff01dccc"),
                            Title = "medicine"
                        },
                        new
                        {
                            Id = new Guid("60fa3dfe-db7f-4e08-bd07-6c6b31ab77a4"),
                            Title = "cooking"
                        },
                        new
                        {
                            Id = new Guid("44687ba9-a7fe-4d8f-be5d-1b74255cd6e4"),
                            Title = "building"
                        },
                        new
                        {
                            Id = new Guid("968919a5-aaaa-499b-b3f3-bde0e31e0a21"),
                            Title = "psychology"
                        });
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillTranslations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("37bf70fc-bda4-4af4-aaaf-4e43fedcdbfa"),
                            Language = "en",
                            Name = "medicine",
                            SkillId = new Guid("86f8c005-1359-402e-a2e3-bcf5ff01dccc")
                        },
                        new
                        {
                            Id = new Guid("741218d6-0bd4-495c-9d5d-333a60e0c945"),
                            Language = "uk",
                            Name = "медицина",
                            SkillId = new Guid("86f8c005-1359-402e-a2e3-bcf5ff01dccc")
                        },
                        new
                        {
                            Id = new Guid("901c30f9-ab2b-47c5-aa37-9b2b741e757c"),
                            Language = "en",
                            Name = "cooking",
                            SkillId = new Guid("60fa3dfe-db7f-4e08-bd07-6c6b31ab77a4")
                        },
                        new
                        {
                            Id = new Guid("0c57a805-32bc-43b0-b4bb-5c5fa9804cb9"),
                            Language = "uk",
                            Name = "кулінарія",
                            SkillId = new Guid("60fa3dfe-db7f-4e08-bd07-6c6b31ab77a4")
                        },
                        new
                        {
                            Id = new Guid("b2e8eda1-680b-4451-82f2-7722a2873169"),
                            Language = "en",
                            Name = "building",
                            SkillId = new Guid("44687ba9-a7fe-4d8f-be5d-1b74255cd6e4")
                        },
                        new
                        {
                            Id = new Guid("75b5ba60-00e6-443a-b25c-3046deb5671f"),
                            Language = "uk",
                            Name = "будівництво",
                            SkillId = new Guid("44687ba9-a7fe-4d8f-be5d-1b74255cd6e4")
                        },
                        new
                        {
                            Id = new Guid("6451651d-5a5f-4432-98ba-5a3646636757"),
                            Language = "en",
                            Name = "psychology",
                            SkillId = new Guid("968919a5-aaaa-499b-b3f3-bde0e31e0a21")
                        },
                        new
                        {
                            Id = new Guid("3b640ad6-00e7-49c8-998a-df263835d420"),
                            Language = "uk",
                            Name = "психологія",
                            SkillId = new Guid("968919a5-aaaa-499b-b3f3-bde0e31e0a21")
                        });
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b4cc7afa-46a9-4396-8aef-8583109a0d96"),
                            CityId = new Guid("84967efa-d1df-4fd4-93a9-9102acae8d62"),
                            DateOfBirth = new DateTime(2023, 4, 26, 20, 20, 54, 809, DateTimeKind.Local).AddTicks(3876),
                            FirstName = "the first",
                            LastName = "admin",
                            Login = "ourfirstadmin",
                            Password = "Rk/ryiBNbnHx+s9i1IveCNNw4axYPQHm4T1eratfQlg=",
                            Phone = "+11111111111",
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Document")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DocumentFormat")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("NULL");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("VolunteerApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VolunteerUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "ApplicationId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("VolunteerUserId", "VolunteerApplicationId");

                    b.ToTable("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.CityTranslation", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("CityTranslations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.CountryTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("CountryTranslations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.HasOne("DAL.Entities.Volunteer", "Volunteer")
                        .WithMany()
                        .HasForeignKey("VolunteerUserId", "VolunteerApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("DAL.Entities.ProfilePicture", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithOne("ProfilePicture")
                        .HasForeignKey("DAL.Entities.ProfilePicture", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.SkillTranslation", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("SkillTranslations")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.HasOne("DAL.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.UserSkill", b =>
                {
                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.HasOne("DAL.Entities.Application", "Application")
                        .WithMany("Volunteers")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Volunteers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Volunteer", null)
                        .WithMany("Volunteers")
                        .HasForeignKey("VolunteerUserId", "VolunteerApplicationId");

                    b.Navigation("Application");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Application", b =>
                {
                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.City", b =>
                {
                    b.Navigation("CityTranslations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("CountryTranslations");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Navigation("SkillTranslations");

                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ProfilePicture");

                    b.Navigation("UserSkills");

                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("DAL.Entities.Volunteer", b =>
                {
                    b.Navigation("Volunteers");
                });
#pragma warning restore 612, 618
        }
    }
}
